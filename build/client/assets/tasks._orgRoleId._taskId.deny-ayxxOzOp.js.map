{"version":3,"file":"tasks._orgRoleId._taskId.deny-ayxxOzOp.js","sources":["../../../app/routes/_withNav+/_withSideBar+/tasks.$orgRoleId.$taskId.deny.tsx"],"sourcesContent":["import ErrorReport from '@components/ui/ErrorReport';\nimport { Form, Input, Label } from '@components/ui';\nimport { Modal } from '@components/ui/modals';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport React, { useState } from 'react';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { denyTask, getTask } from './.server/tasks.queries';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  await requireUser(request, { permissions: Attribute.ORGS_READWRITE });\n  const { taskId } = params;\n  if (!taskId) throw json({ status: 'error', error: 'Task Id is required.' });\n  const task = await getTask(taskId);\n  return json({ taskId: taskId, task });\n};\n\nenum DenialReason {\n  inPerson,\n  docsNeeded,\n  incompleteDocs,\n  pastDue,\n  missingInfo,\n  other,\n}\n\n// TODO: Add try catch\nexport async function action({ request, params }: ActionFunctionArgs) {\n  const schema = z.object({\n    message: z.string().optional(),\n    reason: z.nativeEnum(DenialReason),\n  });\n\n  try {\n    const ReasonMessages = new Map();\n    ReasonMessages.set(DenialReason.inPerson, 'In-person visit required!');\n    ReasonMessages.set(DenialReason.docsNeeded, 'Documents needed to complete task!');\n    ReasonMessages.set(DenialReason.incompleteDocs, 'Documents are incomplete!');\n    ReasonMessages.set(DenialReason.pastDue, 'Task is past required completion date!');\n    ReasonMessages.set(DenialReason.missingInfo, 'Missing information!');\n    ReasonMessages.set(DenialReason.other, '');\n\n    if (!params.taskId) throw new Error('missing task id');\n    const { id: userId } = await requireUserAsObject(request, {\n      permissions: Attribute.ORGS_READWRITE,\n    });\n\n    const { reason: reasonString, ...formData } = Object.fromEntries(\n      (await request.formData()).entries()\n    );\n\n    let { message, reason } = schema.parse({\n      reason: +reasonString,\n      ...formData,\n    });\n\n    if(message){\n      message = ReasonMessages.get(reason) + ' ' + message;\n    }\n\n    if (!message) {\n      message = ReasonMessages.get(reason);\n      if (!message)\n        message = 'Item Denied.';\n    }\n\n    denyTask(params.taskId, userId, message);\n\n    // await updateOrg(orgId, {\n    //   userId,\n    //   orgName,\n    //   abbreviation,\n    // });\n\n    return redirectWithSuccess('..', 'Task successfully denied.');\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      if (e instanceof ZodError) {\n        return jsonWithError(\n          { status: 'error', message: 'validation error', errors: e.errors },\n          'There was an error denying the task.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', message: e.message },\n        'There was an error adding the base.'\n      );\n    }\n  }\n}\nconst EditOrgDefaultPage = () => {\n  const { taskId, task } = useLoaderData<typeof loader>();\n\n  const [optionSelect, setOptionSelect] = useState<undefined | DenialReason | string>();\n\n  const [addMessageCheck, setAddMessageCheck] = useState(false);\n\n  const handleOptionSelect = (event: React.FormEvent) => {\n    setOptionSelect((event.target as HTMLSelectElement).value);\n    if(+(event.target as HTMLSelectElement).value === DenialReason.other){\n      setAddMessageCheck(true);\n\n    }\n    else{\n      setAddMessageCheck(false);\n    }\n  };\n\n  const handleMessageCheck = () => {\n    setAddMessageCheck(!addMessageCheck);\n  };\n\n  return (\n    <Modal>\n      <Form method=\"POST\">\n        <Modal.Body>\n          <Modal.Title>Deny Task: {task?.templateItem.name}</Modal.Title>\n          <Form.Row>\n            <Label htmlFor=\"reason\">Reason for denial:</Label>\n            <Input.ValidationGroup\n              message=\"Please select a reason for denial.\"\n              isValid={optionSelect !== 'default'}>\n              <Input.Select\n                name=\"reason\"\n                onChange={handleOptionSelect}\n                options={[\n                  { id: DenialReason.inPerson, name: 'In-Person Visit' },\n                  { id: DenialReason.docsNeeded, name: 'Missing Documents' },\n                  { id: DenialReason.incompleteDocs, name: 'Incomplete Documents'},\n                  { id: DenialReason.missingInfo, name: 'Missing Information'},\n                  { id: DenialReason.pastDue, name: 'Past Due Date'},\n                  { id: DenialReason.other, name: 'Other' },\n                ]}></Input.Select>\n            </Input.ValidationGroup>\n          </Form.Row>\n          <Form.Row>\n            <Input.Checkbox\n              label=\"Add Message\"\n              id=\"MessageCheckbox\"\n              checked={addMessageCheck}\n              onChange={handleMessageCheck}\n              disabled={+optionSelect === DenialReason.other}></Input.Checkbox>\n            {addMessageCheck && <Input.Textarea name=\"message\" required></Input.Textarea>}\n          </Form.Row>\n        </Modal.Body>\n        <Modal.Buttons link=\"/\" value=\"edit\" onClick={(e) => {if (optionSelect === 'default') e.preventDefault();}}\n          disabled={optionSelect === 'default' || optionSelect === undefined}>\n          Send\n        </Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default EditOrgDefaultPage;\n"],"names":["EditOrgDefaultPage","taskId","task","useLoaderData","optionSelect","setOptionSelect","useState","addMessageCheck","setAddMessageCheck","handleOptionSelect","event","target","value","handleMessageCheck","jsx","Modal","children","jsxs","Form","method","Body","Title","templateItem","name","Row","Label","htmlFor","Input","ValidationGroup","message","isValid","Select","onChange","options","id","Checkbox","label","checked","disabled","Textarea","required","Buttons","link","onClick","e","preventDefault","ErrorBoundary","ErrorReport"],"mappings":"y4BAuGMA,MAAAA,EAAqBA,IAAM,CAC/B,KAAM,CAAEC,OAAAA,EAAQC,KAAAA,CAAK,EAAIC,EAA6B,EAEhD,CAACC,EAAcC,CAAe,EAAIC,WAA4C,EAE9E,CAACC,EAAiBC,CAAkB,EAAIF,EAAAA,SAAS,EAAK,EAEtDG,EAAsBC,GAA2B,CACpCL,EAAAK,EAAMC,OAA6BC,KAAK,EACtD,CAAEF,EAAMC,OAA6BC,OAAU,EAChDJ,EAAmB,EAAI,EAIvBA,EAAmB,EAAK,CAE5B,EAEMK,EAAqBA,IAAM,CAC/BL,EAAmB,CAACD,CAAe,CACrC,EAEA,OACGO,EAAAA,IAAAC,EAAA,CACCC,SAACC,EAAA,KAAAC,EAAA,CAAKC,OAAO,OACXH,SAAA,CAACC,EAAAA,KAAAF,EAAMK,KAAN,CACCJ,SAAA,CAACC,EAAAA,KAAAF,EAAMM,MAAN,CAAYL,SAAA,CAAA,cAAYd,GAAAA,YAAAA,EAAMoB,aAAaC,IAAA,EAAK,EACjDN,EAAAA,KAACC,EAAKM,IAAL,CACCR,SAAA,CAACF,EAAA,IAAAW,EAAA,CAAMC,QAAQ,SAASV,SAAkB,qBAAA,EAC1CF,EAAAA,IAACa,EAAMC,gBAAN,CACCC,QAAQ,qCACRC,QAAS1B,IAAiB,UAC1BY,SAAAF,EAAAA,IAACa,EAAMI,OAAN,CACCR,KAAK,SACLS,SAAUvB,EACVwB,QAAS,CACP,CAAEC,GAAI,EAAuBX,KAAM,iBAAkB,EACrD,CAAEW,GAAI,EAAyBX,KAAM,mBAAoB,EACzD,CAAEW,GAAI,EAA6BX,KAAM,sBAAsB,EAC/D,CAAEW,GAAI,EAA0BX,KAAM,qBAAqB,EAC3D,CAAEW,GAAI,EAAsBX,KAAM,eAAe,EACjD,CAAEW,GAAI,EAAoBX,KAAM,OAAQ,CAAA,CACvC,CAAA,CAAA,CACP,CAAA,EACF,EACAN,EAAAA,KAACC,EAAKM,IAAL,CACCR,SAAA,CAAAF,EAAAA,IAACa,EAAMQ,SAAN,CACCC,MAAM,cACNF,GAAG,kBACHG,QAAS9B,EACTyB,SAAUnB,EACVyB,SAAU,CAAClC,GAAiB,CAAoB,CAAA,EACjDG,SAAoBoB,EAAMY,SAAN,CAAehB,KAAK,UAAUiB,SAAQ,EAAC,CAAA,CAAA,CAC9D,CAAA,CAAA,EACF,EACA1B,EAAAA,IAACC,EAAM0B,QAAN,CAAcC,KAAK,IAAI9B,MAAM,OAAO+B,QAAUC,GAAM,CAAKxC,IAAiB,WAAWwC,EAAEC,eAAe,CAAE,EACvGP,SAAUlC,IAAiB,WAAaA,IAAiB,OAAWY,SAAA,MAAA,CAEtE,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,EACa8B,EAAgBC"}