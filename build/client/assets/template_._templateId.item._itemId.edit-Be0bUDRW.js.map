{"version":3,"file":"template_._templateId.item._itemId.edit-Be0bUDRW.js","sources":["../../../app/routes/_withNav+/_withSideBar+/_manage+/template_.$templateId.item.$itemId.edit.tsx"],"sourcesContent":["import ErrorReport from '@components/ui/ErrorReport';\nimport { Input, Form, Label } from '@components/ui';\nimport { Modal } from '@components/ui/modals';\nimport { RTEProvider } from '@components/ui/RichText/Editor';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useLoaderData, useParams } from '@remix-run/react';\nimport { requireUser } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport type { editTemplateItemLoader} from './.server/template.queries';\nimport { updateTemplateItem } from './.server/template.queries';\n\nexport { editTemplateItemLoader as loader } from './.server/template.queries';\n\nexport const action = async ({\n  request,\n  params,\n}: ActionFunctionArgs) => {\n  const { templateId } = params;\n  if (!templateId) throw json({ error: 'No checklist id.' });\n\n  const itemEditSchema = z.object({\n    id: z.string().min(1),\n    name: z.string().optional(),\n    description: z.string(),\n    requiredRole: z.string().min(1),\n    forHasDependents: z.union([\n      z.literal('on').transform(() => true),\n      z.literal(undefined).transform(() => false),\n    ]),\n    forDormResidents: z.union([\n      z.literal('on').transform(() => true),\n      z.literal(undefined).transform(() => false),\n    ]),\n    forHasEFMP: z.union([\n      z.literal('on').transform(() => true),\n      z.literal(undefined).transform(() => false),\n    ]),\n  });\n\n  try {\n    await requireUser(request, { permissions: Attribute.TEMPLATES_READWRITE });\n    const {\n      id,\n      name,\n      description,\n      requiredRole: requiredRoleId,\n      forHasDependents,\n      forHasEFMP,\n      forDormResidents,\n    } = itemEditSchema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n\n    await updateTemplateItem(id, {\n      name,\n      description,\n      requiredRoleId,\n      forHasDependents,\n      forHasEFMP,\n      forDormResidents,\n    });\n  } catch (err) {\n    console.error(err);\n    if (err instanceof AuthorizationError) {\n      return jsonWithError(\n        { status: 'error', error: 'Authorization Error.' },\n        'User is not authorized.'\n      );\n    }\n    if (err instanceof ZodError) {\n      err.issues.forEach((issue) =>\n        console.error(\n          `There was an error validating on item update!\\n${issue.path} - ${issue.message}`\n        )\n      );\n      return jsonWithError(\n        {\n          status: 'error',\n          error: {\n            message: 'There was an error editing the item.',\n            items: err.issues,\n          },\n        },\n        'There was an error.'\n      );\n    }\n\n    return jsonWithError(\n      {\n        status: 'error',\n        error: 'There was an error editing the item.',\n      },\n      'There was an error.'\n    );\n  }\n\n  return redirectWithSuccess(`/template/${templateId}`, 'Item saved!');\n};\n\nconst EditTemplateItem = () => {\n  const { templateId, itemId } = useParams();\n  const { item, roles } = useLoaderData<typeof editTemplateItemLoader>();\n\n  return (\n    <Modal>\n      <RTEProvider>\n        <Form method=\"post\">\n          <Input.Hidden name=\"templateId\" value={templateId} />\n          <Input.Hidden name=\"id\" value={itemId} />\n          <Modal.Body>\n            <Modal.Title>Create New Item</Modal.Title>\n            <Form.Row>\n              {item.reference && <p>{item.reference.name}</p>}\n              {!item.reference && (<>\n                <Label htmlFor=\"name\">Name</Label>\n                <Input.Text name=\"name\" defaultValue={item.name} /></>\n              )}\n            </Form.Row>\n            <Form.Row>\n              <Label htmlFor=\"description\">Description</Label>\n              <Input.RichText content={item.description} limit={1000} name=\"description\"></Input.RichText>\n            </Form.Row>\n            <Form.Row>\n              <Label>Role Required</Label>\n              <Input.Select\n                name=\"requiredRole\"\n                defaultValue={item.requiredRoleId}\n                options={roles}\n                valueKey=\"uuid\" />\n            </Form.Row>\n            <Form.Row>\n              <Label.Heading>Questions</Label.Heading>\n              <Input.CheckboxGroup>\n                <Input.Checkbox\n                  label=\"For Members that are Dorm Residents\"\n                  defaultChecked={item.forDormResidents ?? false}\n                  name=\"forDormResidents\"/>\n                <Input.Checkbox\n                  label=\"For Members with Dependents\"\n                  defaultChecked={item.forHasDependents ?? false}\n                  name=\"forHasDependents\"/>\n                <Input.Checkbox\n                  label=\"For Members with Dependents that qualify for EFMP\"\n                  defaultChecked={item.forHasEFMP ?? false}\n                  name=\"forHasEFMP\"/>\n              </Input.CheckboxGroup>\n            </Form.Row>\n          </Modal.Body>\n          <Modal.Buttons link={`/template/${templateId}`} value=\"edit\">\n          Save\n          </Modal.Buttons>\n        </Form>\n      </RTEProvider>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default EditTemplateItem;"],"names":["EditTemplateItem","templateId","itemId","useParams","item","roles","useLoaderData","Modal","children","jsx","RTEProvider","jsxs","Form","method","Input","Hidden","name","value","Body","Title","Row","reference","Fragment","Label","htmlFor","Text","defaultValue","RichText","content","description","limit","Select","requiredRoleId","options","valueKey","Heading","CheckboxGroup","Checkbox","label","defaultChecked","forDormResidents","forHasDependents","forHasEFMP","Buttons","link","ErrorBoundary","ErrorReport"],"mappings":"g5BAuGMA,MAAAA,EAAmBA,IAAM,CAC7B,KAAM,CAAEC,WAAAA,EAAYC,OAAAA,CAAO,EAAIC,EAAU,EACnC,CAAEC,KAAAA,EAAMC,MAAAA,CAAM,EAAIC,EAA6C,EAErE,aACGC,EACC,CAAAC,SAAAC,EAAA,IAACC,GACCF,SAACG,EAAA,KAAAC,EAAA,CAAKC,OAAO,OACXL,SAAA,CAAAC,EAAAA,IAACK,EAAMC,OAAN,CAAaC,KAAK,aAAaC,MAAOhB,EAAY,QAClDa,EAAMC,OAAN,CAAaC,KAAK,KAAKC,MAAOf,EAAQ,EACvCS,EAAAA,KAACJ,EAAMW,KAAN,CACCV,SAAA,CAACC,EAAAA,IAAAF,EAAMY,MAAN,CAAYX,SAAe,kBAAA,EAC5BG,EAAAA,KAACC,EAAKQ,IAAL,CACEZ,SAAA,CAAAJ,EAAKiB,WAAaZ,EAAAA,IAAC,IAAG,CAAAD,SAAAJ,EAAKiB,UAAUL,IAAK,CAAA,EAC1C,CAACZ,EAAKiB,WACLV,EAAAA,KAAAW,EAAAA,SAAA,CAAAd,SAAA,CAACC,EAAA,IAAAc,EAAA,CAAMC,QAAQ,OAAOhB,SAAI,OAAA,EAC1BC,EAAAA,IAACK,EAAMW,KAAN,CAAWT,KAAK,OAAOU,aAActB,EAAKY,IAAM,CAAA,CAAA,CAAE,CAAA,CAAA,EAEvD,EACAL,EAAAA,KAACC,EAAKQ,IAAL,CACCZ,SAAA,CAACC,EAAA,IAAAc,EAAA,CAAMC,QAAQ,cAAchB,SAAW,cAAA,EACxCC,EAAAA,IAACK,EAAMa,SAAN,CAAeC,QAASxB,EAAKyB,YAAaC,MAAO,IAAMd,KAAK,aAAc,CAAA,CAAA,EAC7E,EACAL,EAAAA,KAACC,EAAKQ,IAAL,CACCZ,SAAA,CAAAC,EAAA,IAACc,GAAMf,SAAa,gBAAA,EACpBC,EAAAA,IAACK,EAAMiB,OAAN,CACCf,KAAK,eACLU,aAActB,EAAK4B,eACnBC,QAAS5B,EACT6B,SAAS,MAAA,CAAO,CAAA,EACpB,EACAvB,EAAAA,KAACC,EAAKQ,IAAL,CACCZ,SAAA,CAACC,EAAAA,IAAAc,EAAMY,QAAN,CAAc3B,SAAS,YAAA,EACxBG,EAAAA,KAACG,EAAMsB,cAAN,CACC5B,SAAA,CAAAC,EAAAA,IAACK,EAAMuB,SAAN,CACCC,MAAM,sCACNC,eAAgBnC,EAAKoC,kBAAoB,GACzCxB,KAAK,mBAAkB,EACzBP,EAAAA,IAACK,EAAMuB,SAAN,CACCC,MAAM,8BACNC,eAAgBnC,EAAKqC,kBAAoB,GACzCzB,KAAK,mBAAkB,EACzBP,EAAAA,IAACK,EAAMuB,SAAN,CACCC,MAAM,oDACNC,eAAgBnC,EAAKsC,YAAc,GACnC1B,KAAK,YAAA,CAAY,CAAA,CACrB,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EACAP,EAAAA,IAACF,EAAMoC,QAAN,CAAcC,KAAM,aAAa3C,CAAU,GAAIgB,MAAM,OAAOT,SAE7D,MAAA,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,EACaqC,EAAgBC"}