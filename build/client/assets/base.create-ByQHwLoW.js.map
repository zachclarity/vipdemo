{"version":3,"file":"base.create-ByQHwLoW.js","sources":["../../../app/routes/_withNav+/_withSideBar+/_manage+/base.create.tsx"],"sourcesContent":["import ErrorReport from '@components/ui/ErrorReport';\nimport { Form, Input, Label } from '@components/ui';\nimport { TextInput } from '@components/ui/Input';\nimport { Modal } from '@components/ui/modals';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs } from '@remix-run/node';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { createBase } from './.server/base.queries';\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  await requireUser(request);\n  const updateSchema = z.object({\n    name: z.string(),\n    abbreviation: z.string(),\n  });\n\n  try {\n    const {id: userId } = await requireUserAsObject(request, {\n      options: { redirectOnFailure: false },\n      permissions: Attribute.BASES_READWRITE,\n    });\n\n    const formData = await request.formData();\n    const { name, abbreviation } = updateSchema.parse(Object.fromEntries(formData.entries()));\n\n    const updatedAt = new Date(Date.now());\n    const createdAt = updatedAt;\n    await createBase({\n      userId,\n      name,\n      abbreviation,\n      isWing: false,\n      isBase: true,\n      updatedBy: userId,\n      updatedAt,\n      createdAt,\n      createdBy: userId,\n    });\n    return redirectWithSuccess('/base', 'Base saved.');\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      if (e instanceof ZodError) {\n        return jsonWithError(\n          { status: 'error', message: 'validation error', errors: e.errors },\n          'There was an error adding the base.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', message: e.message },\n        'There was an error adding the base.'\n      );\n    }\n  }\n};\n\nconst EditBase = () => (\n  <Modal>\n    <Form method=\"post\">\n      <Modal.Body>\n        <Modal.Title>Add a new Base</Modal.Title>\n        <Form.Row>\n          <Label htmlFor=\"name\">Name:</Label>\n          <Input.Text\n            name=\"name\" />\n          <span className=\"text-gray-500 text-sm\">ex: Travis AFB</span>\n        </Form.Row>\n        <Form.Row>\n          <Label htmlFor=\"abbreviation\">Abbreviation:</Label>\n          <Input.Text\n            name=\"abbreviation\" />\n          <span className=\"text-gray-500 text-sm\">ex: TAFB</span>\n        </Form.Row>\n      </Modal.Body>\n      <Modal.Buttons link=\"/base\">Add</Modal.Buttons>\n    </Form>\n  </Modal>\n);\nexport const ErrorBoundary = ErrorReport;\nexport default EditBase;\n"],"names":["EditBase","jsx","Modal","children","jsxs","Form","method","Body","Title","Row","Label","htmlFor","Input","Text","name","className","Buttons","link","ErrorBoundary","ErrorReport"],"mappings":"s3BAkEMA,MAAAA,EAAWA,IACfC,EAAA,IAACC,GACCC,SAACC,EAAA,KAAAC,EAAA,CAAKC,OAAO,OACXH,SAAA,CAACC,EAAAA,KAAAF,EAAMK,KAAN,CACCJ,SAAA,CAACF,EAAAA,IAAAC,EAAMM,MAAN,CAAYL,SAAc,iBAAA,EAC3BC,EAAAA,KAACC,EAAKI,IAAL,CACCN,SAAA,CAACF,EAAA,IAAAS,EAAA,CAAMC,QAAQ,OAAOR,SAAK,QAAA,EAC3BF,EAAAA,IAACW,EAAMC,KAAN,CACCC,KAAK,MAAA,CAAO,EACbb,EAAA,IAAA,OAAA,CAAKc,UAAU,wBAAwBZ,SAAc,gBAAA,CAAA,CAAA,EACxD,EACAC,EAAAA,KAACC,EAAKI,IAAL,CACCN,SAAA,CAACF,EAAA,IAAAS,EAAA,CAAMC,QAAQ,eAAeR,SAAa,gBAAA,EAC3CF,EAAAA,IAACW,EAAMC,KAAN,CACCC,KAAK,cAAA,CAAe,EACrBb,EAAA,IAAA,OAAA,CAAKc,UAAU,wBAAwBZ,SAAQ,UAAA,CAAA,CAAA,CAClD,CAAA,CAAA,EACF,QACCD,EAAMc,QAAN,CAAcC,KAAK,QAAQd,SAAG,KAAA,CAAA,CAAA,CACjC,CAAA,CACF,CAAA,EAEWe,EAAgBC"}