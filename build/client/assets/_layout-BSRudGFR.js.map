{"version":3,"file":"_layout-BSRudGFR.js","sources":["../../../app/components/Checklist/Slideover/ToggleCompleteButton.tsx","../../../app/components/Checklist/Slideover/Buttons.tsx","../../../app/routes/_withNav+/_noSideBar+/checklist.$itemId+/_layout.tsx"],"sourcesContent":["import { useFetcher } from '@remix-run/react';\n\ntype ToggleButtonTypeOptions = {\n  text: string;\n  styles: string;\n  formValue: string;\n};\n\ntype ToggleButtonType = {\n  complete: ToggleButtonTypeOptions;\n  incomplete: ToggleButtonTypeOptions;\n  ready: ToggleButtonTypeOptions;\n  notReady: ToggleButtonTypeOptions;\n};\n\nexport function ToggleButton({\n  type,\n  itemId,\n  loggedInUser,\n}: {\n  type: keyof ToggleButtonType;\n  itemId: string;\n  loggedInUser: string;\n}) {\n  const fetcher = useFetcher();\n\n  const baseClasses =\n    'inline-flex disabled:cursor-not-allowed flex-1 justify-center items-center rounded-md px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2';\n\n  const redButtonClasses = `${baseClasses} disabled:bg-red-400 bg-red-600 hover:bg-red-500 focus-visible:outline-red-600`;\n  const greenButtonClasses = `${baseClasses} disabled:bg-green-300 bg-green-600 hover:bg-green-500 focus-visible:outline-green-600`;\n\n  const types = {\n    complete: {\n      text: 'Mark Complete',\n      styles: greenButtonClasses,\n      formValue: 'update',\n    },\n    incomplete: {\n      text: 'Unsign',\n      styles: redButtonClasses,\n      formValue: 'incomplete',\n    },\n    ready: {\n      text: 'Mark Ready',\n      styles: greenButtonClasses,\n      formValue: 'markready',\n    },\n    notReady: {\n      text: 'Mark Not Ready',\n      styles: redButtonClasses,\n      formValue: 'notready',\n    },\n  };\n\n  return (\n    <fetcher.Form\n      method=\"POST\"\n      className=\"text-white text-center flex-1 inline-flex\"\n      action=\"/checklist\">\n      <input type=\"hidden\" value={itemId} name=\"itemId\" />\n      <input type=\"hidden\" value={loggedInUser} name=\"userId\" />\n      <button\n        type=\"submit\"\n        name=\"_action\"\n        value={types[type].formValue}\n        disabled={fetcher.state !== 'idle'}\n        className={`${baseClasses} ${types[type].styles}`}>\n        {fetcher.state === 'idle' ? types[type].text : 'Processing...'}\n      </button>\n    </fetcher.Form>\n  );\n}\n","import { Link, useLocation } from '@remix-run/react';\nimport { ToggleButton } from '@components/Checklist/Slideover/ToggleCompleteButton';\nimport { ChecklistItemStatus } from '@prisma/client';\n\nexport function DetailsCommentsButton() {\n  const location = useLocation();\n\n  let text = 'View Messages';\n  let link = 'comments';\n  if (location.pathname.endsWith('comments')) {\n    text = 'Back to Details';\n    link = '.';\n  }\n\n  return (\n    <Link\n      className=\"flex-1 inline-flex justify-center shadow-[0px_6px_8px_-3px_rgba(0,0,0,0.3)] transition-all items-center rounded-md border-0 border-primary-500 hover:border-primary-600 bg-primary-600 px-3.5 py-2.5 text-sm font-semibold text-white hover:bg-primary-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600  \"\n      to={link}>\n      {text}\n    </Link>\n  );\n}\n\nexport function ToggleReadyButton({\n  status,\n  itemId,\n  loggedInUser,\n}: {\n  status: ChecklistItemStatus;\n  itemId: string;\n  loggedInUser: string;\n}) {\n  if (status === ChecklistItemStatus.WaitingApproval)\n    return (\n      <ToggleButton\n        type=\"notReady\"\n        itemId={itemId}\n        loggedInUser={loggedInUser}/>\n    );\n\n  if (\n    status === ChecklistItemStatus.WaitingMember ||\n    status === ChecklistItemStatus.Denied\n  )\n    return (\n      <ToggleButton type=\"ready\" itemId={itemId} loggedInUser={loggedInUser} />\n    );\n\n  return null;\n}\n\nexport function ToggleCompleteButton({\n  status,\n  itemId,\n  loggedInUser,\n}: {\n  status: ChecklistItemStatus;\n  itemId: string;\n  loggedInUser: string;\n}) {\n  if (status === ChecklistItemStatus.Completed)\n    return (\n      <ToggleButton\n        type=\"incomplete\"\n        itemId={itemId}\n        loggedInUser={loggedInUser}/>\n    );\n\n  if (status === ChecklistItemStatus.WaitingMember)\n    return (\n      <ToggleButton\n        type=\"complete\"\n        itemId={itemId}\n        loggedInUser={loggedInUser}/>\n    );\n\n  return null;\n}\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { SolidCheckmark, DatabaseUpdatedIcon, XMarkIcon } from '@components/ui/Icons';\nimport { Dialog, DialogTitle } from '@headlessui/react';\nimport { CalendarDaysIcon } from '@heroicons/react/24/solid';\nimport { ChatBubbleBottomCenterTextIcon } from '@heroicons/react/24/outline';\nimport { useChecklistLayoutData } from '@lib/hooks/useMatchesData';\nimport { Link, Outlet, useNavigate } from '@remix-run/react';\nimport type { LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Models } from '@lib/models.server';\nimport { requireUserAsObject } from '@services/user.server';\nimport { Status } from './status';\nimport {\n  DetailsCommentsButton, ToggleCompleteButton,\n  ToggleReadyButton,\n} from '@components/Checklist/Slideover/Buttons';\nimport { ChecklistItemStatus } from '@prisma/client';\n\nexport async function loader({ request, params }: LoaderFunctionArgs) {\n  const { currentOrg, id: loggedInUser } = await requireUserAsObject(request);\n  const { itemId } = params;\n\n  if (!itemId) throw new Error('item id is required.');\n\n  const [item, comments] = await Models.checklistItem.getWithComments(itemId, {\n    internalOnly: false,\n    orgId: currentOrg.uuid,\n  });\n\n  if (!item) throw new Error('item not found');\n\n  return json({ item, comments, loggedInUser }, {\n    headers: {\n      'X-Frame-Options': 'SAMEORIGIN',\n    },\n  });\n}\n\nexport default function ChecklistSlideOutLayout() {\n  const navigate = useNavigate();\n  const { item, comments, loggedInUser } = useChecklistLayoutData();\n\n  const itemCompletedByMember = (itemRequiredRole: string) =>\n    itemRequiredRole === 'USER';\n  const notCompletedByMember = (itemRequiredRole: string) =>\n    itemRequiredRole !== 'USER';\n\n  const dueDate = new Date(item?.createdAt);\n  dueDate.setDate(dueDate.getDate() + 30);\n\n  const closeModal = () => {\n    navigate('..');\n  };\n\n  const unread = (comments: { readBy: string[] }[]) => {\n    let total = 0;\n    for (const item of comments) {\n      if (!item.readBy.includes(loggedInUser)) total++;\n    }\n    return total;\n  };\n\n  return (\n    <>\n      <Dialog\n        as=\"div\"\n        id=\"slideover\"\n        className=\"fixed inset-0\"\n        open={true}\n        onClose={closeModal}>\n        <div className=\"flex justify-end min-h-screen\">\n          <div\n            className=\"fixed inset-0 bg-black opacity-30\"\n            onClick={closeModal}/>\n          <div className=\"z-50 bg-white shadow-lg min-h-screen h-screen w-full md:w-5/12 grid grid-cols-1 grid-rows-[auto_minmax(14rem,1fr)] overflow-y-scroll\">\n            <div\n              className={`grid gap-y-2 grid-cols-2 grid-rows-[2rem_2rem_0.25rem_${\n                item.isComplete ? '4rem' : '2rem'\n              }_0.25rem]`}>\n              <div className=\"flex col-span-2 row-span-1 py-5 pl-3 pr-5 justify-between items-center bg-gradient-to-r from-blue-200 to-blue-100 border-b border-b-blue-500\">\n                <DialogTitle className=\"font-bold mb-1 text-2xl pl-2\">\n                  {item.templateItem.reference?.name ?? item.templateItem.name}\n                </DialogTitle>\n                <XMarkIcon\n                  className=\"w-10 h-10 hover:cursor-pointer\"\n                  onClick={ closeModal }/>\n              </div>\n              <div className=\"col-span-2 mx-5\">\n                <div className=\"col-span-2 flex my-3 flex-wrap gap-x-5\">\n                  <DetailsCommentsButton />\n                  {notCompletedByMember(\n                    item.templateItem.requiredRole.abbreviation\n                  ) && (\n                    <ToggleReadyButton\n                      status={item.status}\n                      itemId={item.id}\n                      loggedInUser={loggedInUser}/>\n                  )}\n                  {itemCompletedByMember(\n                    item.templateItem.requiredRole.abbreviation\n                  ) && (\n                    <ToggleCompleteButton\n                      status={item.status}\n                      itemId={item.id}\n                      loggedInUser={loggedInUser}/>\n                  )}\n                </div>\n              </div>\n              <div className=\"col-span-2\">\n                <hr className=\"h-px bg-zinc-100\" />\n              </div>\n              <div className=\"col-span-2 text-lg mx-5 my-2\">\n                <div className=\"flex gap-4 items-center justify-between\">\n                  <h4 className=\"font-bold text-xl\">Status</h4>\n                </div>\n                <div className=\"mt-2\">\n                  <Status status={item.status} isSlideOver></Status>\n                </div>\n                {item.isComplete &&\n                  notCompletedByMember(\n                    item.templateItem.requiredRole.abbreviation\n                  ) && (\n                  <div className=\"flex mt-2 mx-3\">\n                      Approved By:\n                    <p className=\"pl-4 font-semibold text-md place-content-center\">\n                      {item.completedBy?.name}\n                    </p>\n                  </div>\n                )}\n                <div className=\"text-sm text-zinc-600 mx-3 mt-4\">\n                  <div className=\"flex gap-5 justify-between\">\n                    <div className=\"inline-flex items-center\">\n                      {item.status === ChecklistItemStatus.Completed && (\n                        <SolidCheckmark className=\"size-6 text-green-500 mr-1\" />\n                      )}\n                      {!item.isComplete && !item.dateCompleted && (\n                        <CalendarDaysIcon className=\"size-6 mr-2\" />\n                      )}\n                      {new Date(item.dateCompleted ?? dueDate).toDateString()}\n                    </div>\n                    <Link\n                      className=\"inline-flex items-center gap-1.5 hover:bg-zinc-300 hover:rounded-lg p-1\"\n                      to={`/checklist/${item.id}/comments`}>\n                      <ChatBubbleBottomCenterTextIcon className=\"size-6\" />\n                      {comments && (\n                        <>\n                          {comments.length}\n                          {unread(comments) > 0 && (\n                            <span className=\"relative flex size-2\">\n                              <span className=\"animate-[ping_1s_ease-in-out_5] absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75\"></span>\n                              <span className=\"relative inline-flex rounded-full size-2 bg-red-500\"></span>\n                            </span>\n                          )}\n                        </>\n                      )}\n                      {!comments && '0'}\n                    </Link>\n                    <div className=\"inline-flex gap-1 ml-3\">\n                      <DatabaseUpdatedIcon className=\"size-6\" />\n                      {new Date(item.updatedAt).toDateString()}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-span-2\">\n                <hr className=\"h-px bg-zinc-100\" />\n              </div>\n              {notCompletedByMember(\n                item.templateItem.requiredRole.abbreviation\n              ) && (\n                <>\n                  <div className=\"col-span-2 mx-5\">\n                    <h4 className=\"text-xl font-bold\">\n                      {item.templateItem.requiredRole.name}\n                    </h4>\n                    <dl className=\"grid grid-cols-1 my-4 gap-y-3\">\n                      <div className=\"flex justify-between\">\n                        <dt>Email</dt>\n                        <dd>\n                          <a\n                            href={`mailto:${item.templateItem.requiredRole.orgRoles[0].contactEmail}`}\n                            className=\"underline underline-offset-2\">\n                            {\n                              item.templateItem.requiredRole.orgRoles[0]\n                                .contactEmail\n                            }\n                          </a>\n                        </dd>\n                      </div>\n                      <hr className=\"h-px bg-zinc-100\" />\n                      <div className=\"flex justify-between\">\n                        <dt>Phone</dt>\n                        <dd>\n                          {\n                            item.templateItem.requiredRole.orgRoles[0]\n                              .contactPhone\n                          }\n                        </dd>\n                      </div>\n                    </dl>\n                  </div>\n                  <div className=\"col-span-2\">\n                    <hr className=\"h-px bg-zinc-100\" />\n                  </div>\n                </>\n              )}\n            </div>\n            <Outlet context={{ item, comments, loggedInUser }} />\n            {/** This Outlet will show either the description from the index.tsx file or the Comments and TextBox from comments.tsx */}\n          </div>\n        </div>\n      </Dialog>\n    </>\n  );\n}\n\nexport const ErrorBoundary = ErrorReport;\n"],"names":["ToggleButton","type","itemId","loggedInUser","fetcher","useFetcher","baseClasses","redButtonClasses","greenButtonClasses","types","jsxs","jsx","DetailsCommentsButton","location","useLocation","text","link","Link","ToggleReadyButton","status","ChecklistItemStatus","ToggleCompleteButton","ChecklistSlideOutLayout","navigate","useNavigate","item","comments","useChecklistLayoutData","itemCompletedByMember","itemRequiredRole","notCompletedByMember","dueDate","Date","createdAt","setDate","getDate","closeModal","unread","total","readBy","includes","Fragment","children","Dialog","as","id","className","open","onClose","onClick","isComplete","DialogTitle","templateItem","reference","name","XMarkIcon","requiredRole","abbreviation","Status","isSlideOver","completedBy","Completed","SolidCheckmark","dateCompleted","CalendarDaysIcon","toDateString","to","ChatBubbleBottomCenterTextIcon","length","DatabaseUpdatedIcon","updatedAt","href","orgRoles","contactEmail","contactPhone","Outlet","context","ErrorBoundary","ErrorReport"],"mappings":"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"}