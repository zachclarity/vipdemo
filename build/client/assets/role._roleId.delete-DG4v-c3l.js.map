{"version":3,"file":"role._roleId.delete-DG4v-c3l.js","sources":["../../../app/routes/_withNav+/_withSideBar+/_manage+/role.$roleId.delete.tsx"],"sourcesContent":["import ErrorReport from '@components/ui/ErrorReport';\nimport { Checkbox, InputRow, TextInput, TextLabel } from '@components/ui/Input';\nimport { Modal } from '@components/ui/modals';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Form, useLoaderData } from '@remix-run/react';\nimport { requireUser } from '@services/user.server';\nimport React from 'react';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { deleteRole, getOrgRole } from './.server/role.queries';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  await requireUser(request, {\n    permissions: Attribute.ORGROLES_READWRITEDELETE,\n  });\n\n  const { roleId } = params;\n  if (!roleId) throw json({ status: 'error', error: 'roleId is required.' });\n  const orgRole = await getOrgRole(roleId);\n  return json({ orgRole });\n};\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const roleDelSchema = z.object({\n    roleId: z.string().min(3),\n  });\n  const orgId = new URL(request.url).searchParams.get('org');\n  try {\n    await requireUser(request, {\n      options: { redirectOnFailure: false },\n      permissions: Attribute.ORGROLES_READWRITEDELETE,\n    });\n    const { roleId } = roleDelSchema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n    await deleteRole(roleId);\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      if (e instanceof ZodError) {\n        return jsonWithError(\n          { status: 'error', message: 'validation error', errors: e.errors },\n          'There was an error deleting the role.'\n        );\n      }\n      return jsonWithError(\n        {\n          status: 'error',\n          message:\n            process.env.NODE_ENV === 'development'\n              ? 'This role is required.'\n              : 'There was an error.',\n        },\n        'There was an error deleting the role.'\n      );\n    }\n  }\n\n  return redirectWithSuccess(\n    `/role${orgId ? `?org=${orgId}` : ''}`,\n    'Role Deleted!'\n  );\n}\n\nconst DeleteOrgRoleDefaultPage = () => {\n  const data = useLoaderData<typeof loader>();\n\n  return (\n    <Modal>\n      <Form method=\"POST\">\n        <div className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4 mb-5\">\n          <Modal.Title>Remove Organization Role:</Modal.Title>\n          <input type=\"hidden\" name=\"roleId\" value={data.orgRole?.uuid} />\n          <InputRow>\n            <p>\n              Please enter\n              <code className=\"bg-zinc-300 p-1 m-1 rounded-lg py-1\">\n                {data.orgRole?.role.name}\n              </code>\n              below to confirm the deletion.\n            </p>\n          </InputRow>\n          <InputRow>\n            <TextLabel htmlFor=\"orgname\">Selected Role:</TextLabel>\n            <TextInput\n              id=\"orgname\"\n              pattern={data.orgRole?.role.name}\n              required/>\n          </InputRow>\n\n          <InputRow>\n            <Checkbox\n              id=\"helper-checkbox\"\n              name=\"helper-checkbox\"\n              aria-describedby=\"helper-checkbox-text\"\n              label=\"Confirm Role Deletion\"\n              required/>\n          </InputRow>\n        </div>\n        <Modal.Buttons link=\"..\" value=\"delete\">\n          Delete\n        </Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default DeleteOrgRoleDefaultPage;\n"],"names":["DeleteOrgRoleDefaultPage","data","useLoaderData","jsx","Modal","children","jsxs","Form","method","className","Title","type","name","value","orgRole","uuid","InputRow","role","TextLabel","htmlFor","TextInput","id","pattern","required","Checkbox","label","Buttons","link","ErrorBoundary","ErrorReport"],"mappings":"+0BA0EMA,MAAAA,EAA2BA,IAAM,WACrC,MAAMC,EAAOC,EAA6B,EAE1C,OACGC,EAAAA,IAAAC,EAAA,CACCC,SAACC,EAAA,KAAAC,EAAA,CAAKC,OAAO,OACXH,SAAA,CAACC,EAAA,KAAA,MAAA,CAAIG,UAAU,8CACbJ,SAAA,CAACF,EAAAA,IAAAC,EAAMM,MAAN,CAAYL,SAAyB,2BAAA,CAAA,EACtCF,EAAA,IAAC,SAAMQ,KAAK,SAASC,KAAK,SAASC,OAAOZ,EAAAA,EAAKa,UAALb,YAAAA,EAAcc,IAAM,CAAA,EAC9DZ,EAAA,IAACa,EACC,CAAAX,SAAAC,EAAA,KAAC,IAAE,CAAAD,SAAA,CAAA,qBAEA,OAAK,CAAAI,UAAU,sCACbJ,UAAKJ,EAAAA,EAAAa,UAAAb,YAAAA,EAASgB,KAAKL,IACtB,CAAA,EAAO,gCAAA,CAET,CAAA,CACF,CAAA,SACCI,EACC,CAAAX,SAAA,CAACF,EAAA,IAAAe,EAAA,CAAUC,QAAQ,UAAUd,SAAc,gBAAA,CAAA,EAC3CF,EAAA,IAACiB,EAAA,CACCC,GAAG,UACHC,SAASrB,EAAAA,EAAKa,UAALb,YAAAA,EAAcgB,KAAKL,KAC5BW,SAAQ,EAAA,CAAA,CAAA,CACZ,CAAA,QAECP,EACC,CAAAX,SAAAF,EAAA,IAACqB,EAAA,CACCH,GAAG,kBACHT,KAAK,kBACL,mBAAiB,uBACjBa,MAAM,wBACNF,SAAQ,EACZ,CAAA,CAAA,CAAA,CAAA,EACF,EACApB,EAAAA,IAACC,EAAMsB,QAAN,CAAcC,KAAK,KAAKd,MAAM,SAASR,SAExC,QAAA,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,EACauB,EAAgBC"}