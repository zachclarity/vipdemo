{"version":3,"file":"base._baseId.add-gJA2YpHq.js","sources":["../../../app/routes/_withNav+/_withSideBar+/_manage+/base.$baseId.add.tsx"],"sourcesContent":["import ErrorReport from '@components/ui/ErrorReport';\nimport { Modal } from '@components/ui/modals';\nimport { Form, Input } from '@components/ui';\nimport { Attribute } from '@lib/utils';\nimport {\n  type ActionFunctionArgs,\n  json,\n  type LoaderFunctionArgs,\n} from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z from 'zod';\nimport { getBase } from './.server/base.queries';\nimport { createOrg } from './.server/org.queries';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  await requireUser(request, { permissions: Attribute.BASES_READ });\n  if (!params.baseId) throw new Error('baseId is required.');\n  return json({ base: await getBase(params.baseId) });\n};\n\nexport const action = async ({ request, params }: ActionFunctionArgs) => {\n  try {\n    const { id: loggedInUserId } = await requireUserAsObject(request, { permissions: Attribute.BASES_READWRITE });\n\n    if ( !params.baseId )\n      return jsonWithError(\n        { status: 'error', error: 'baseId is requried.' },\n        'There was an error.'\n      );\n    const paramsRegEx = new RegExp( params.baseId );\n\n    const addSchema = z.object( {\n      _action: z.string().regex( /add/ ),\n      baseId: z.string().regex( paramsRegEx ),\n      name: z.string(),\n      abbreviation: z.string(),\n      userId: z.string(),\n    } );\n\n    const { baseId, name, abbreviation, userId} = addSchema.parse( {\n      userId: loggedInUserId,\n      ...Object.fromEntries( await request.formData() ),\n    } );\n\n    \n    await createOrg( { baseId, name, abbreviation, userId, isWing: true , isBase: false, createdAt: new Date(Date.now()), createdBy: userId, updatedAt: new Date(Date.now()), updatedBy: userId} );\n\n    return redirectWithSuccess( `/base`, 'Organization Created.' );\n  } catch (e) {\n    console.error(e);\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', error: e.message },\n        'There was an error.'\n      );\n    }\n  }\n};\n\nconst AddOrgToBase = () => {\n  const { base } = useLoaderData<typeof loader>();\n\n  return (\n    <Modal>\n      <Form method=\"POST\">\n        <Modal.Body>\n          <Input.Hidden name=\"baseId\" value={base.uuid} />\n          <Modal.Title>New Wing at {base.name}</Modal.Title>\n          <div className=\"mb-3\">\n            <label\n              htmlFor=\"name\"\n              className=\"mb-2 block font-medium text-gray-700\">\n              Name:\n            </label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              className=\"mt-1 h-10 w-full rounded border bg-gray-50 px-4 text-slate-950\"/>\n            <span className=\"text-sm\">ex: 60th Air Mobility Wing</span>\n          </div>\n          <div className=\"mb-3\">\n            <label\n              htmlFor=\"abbreviation\"\n              className=\"mb-2 block font-medium text-gray-700\">\n              Abbreviation:\n            </label>\n            <input\n              type=\"text\"\n              id=\"abbreviation\"\n              name=\"abbreviation\"\n              className=\"mt-1 h-10 w-full rounded border bg-gray-50 px-4 text-slate-950\"/>\n            <span className=\"text-sm\">ex: 60AMW</span>\n          </div>\n        </Modal.Body>\n        <Modal.Buttons link=\"/base\" value=\"add\">Add</Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default AddOrgToBase;\n"],"names":["AddOrgToBase","base","useLoaderData","jsx","Modal","children","jsxs","Form","method","Body","Input","Hidden","name","value","uuid","Title","className","htmlFor","type","id","Buttons","link","ErrorBoundary","ErrorReport"],"mappings":"01BAoEMA,MAAAA,EAAeA,IAAM,CACnB,KAAA,CAAEC,KAAAA,CAAK,EAAIC,EAA6B,EAE9C,OACGC,EAAAA,IAAAC,EAAA,CACCC,SAACC,EAAA,KAAAC,EAAA,CAAKC,OAAO,OACXH,SAAA,CAACC,EAAAA,KAAAF,EAAMK,KAAN,CACCJ,SAAA,CAAAF,EAAAA,IAACO,EAAMC,OAAN,CAAaC,KAAK,SAASC,MAAOZ,EAAKa,KAAM,EAC9CR,EAAAA,KAACF,EAAMW,MAAN,CAAYV,SAAA,CAAA,eAAaJ,EAAKW,IAAA,CAAK,CAAA,EACpCN,EAAA,KAAC,MAAI,CAAAU,UAAU,OACbX,SAAA,CAAAF,EAAA,IAAC,QAAA,CACCc,QAAQ,OACRD,UAAU,uCAAuCX,SAAA,OAAA,CAEnD,EACAF,EAAA,IAAC,QAAA,CACCe,KAAK,OACLC,GAAG,OACHP,KAAK,OACLI,UAAU,gEAAA,CAAgE,EAC3Eb,EAAA,IAAA,OAAA,CAAKa,UAAU,UAAUX,SAA0B,4BAAA,CAAA,CAAA,CACtD,CAAA,EACAC,EAAA,KAAC,MAAI,CAAAU,UAAU,OACbX,SAAA,CAAAF,EAAA,IAAC,QAAA,CACCc,QAAQ,eACRD,UAAU,uCAAuCX,SAAA,eAAA,CAEnD,EACAF,EAAA,IAAC,QAAA,CACCe,KAAK,OACLC,GAAG,eACHP,KAAK,eACLI,UAAU,gEAAA,CAAgE,EAC3Eb,EAAA,IAAA,OAAA,CAAKa,UAAU,UAAUX,SAAS,WAAA,CAAA,CAAA,CACrC,CAAA,CAAA,EACF,EACAF,EAAAA,IAACC,EAAMgB,QAAN,CAAcC,KAAK,QAAQR,MAAM,MAAMR,SAAG,KAAA,CAAA,CAAA,CAC7C,CAAA,CACF,CAAA,CAEJ,EAEaiB,EAAgBC"}