{"version":3,"file":"_userId.move.start-DUna5svn.js","sources":["../../../app/routes/_withNav+/_withSideBar+/_manage+/user+/$userId.move.start.tsx"],"sourcesContent":["/*\n This page starts movement actions for users.\n Show a form that displays\n - the moving user's name\n - the moving user's current org\n and has inputs for\n - Where the user is going, if known\n - type of move (default to type searchQuery)\n\n Once confirmed\n - remove the user from their current org and populate the next org if known and previous org\n\n */\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { UserMoveModal } from '@components/ui/modals';\nimport { Attribute } from '@lib/utils';\nimport { handleActionError } from '@lib/utils/utils.server';\nimport { MoveType } from '@prisma/client';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { requireUser } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { getOrgsByBase } from '../.server/org.queries';\nimport { getUser, startMemberMove } from './.server/user.queries';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  await requireUser(request, { permissions: Attribute.MOVES_READWRITE });\n  const typeParam = new URL(request.url).searchParams.get('type');\n  // if (!typeParam) throw new Error('type is required');\n\n  const { userId } = params;\n  if (!userId) throw new Error('user id required');\n\n  const user = await getUser(userId);\n\n  let orgs = [];\n  if (!user.currentOrg || !user.currentOrg.base) {\n    throw new Error('Current organization not found.');\n  } else {\n    // if (typeParam === 'PCA') {\n    //   // get orgs by base\n    //   orgs = await context.organization.getAllAtBase(user.currentOrg.baseId);\n    // } else if (typeParam === 'PCS') {\n    //   // get orgs at other bases\n    //   // TODO: Group by base\n    //   orgs = await context.organization.getAllNotAtBase(user.currentOrg.baseId);\n    // } else {\n    //   throw new Error('Incorrect type');\n    // }\n\n    orgs = await getOrgsByBase(user.currentOrg.base.uuid);\n  }\n\n  return json({ user, filteredOrgs: orgs });\n};\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  const actionSchema = z.object({\n    moveType: z.nativeEnum(MoveType),\n    nextOrg: z.string().nullable(),\n    currentOrgId: z.string(),\n    userId: z.string(),\n  });\n\n  try {\n    await requireUser(request, { permissions: Attribute.MOVES_READWRITE });\n\n    let {\n      moveType,\n      nextOrg,\n      userId,\n      currentOrgId: previousOrg,\n    } = actionSchema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n\n    if (nextOrg === '') nextOrg = null;\n\n    await startMemberMove(userId, { moveType, nextOrg, previousOrg });\n\n    return redirectWithSuccess('/user', 'Move Started!');\n  } catch (e) {\n    return handleActionError(e, 'There was an error starting the move.');\n  }\n};\n\nexport default function StartUserMove() {\n  return (\n    <UserMoveModal\n      variant=\"start\"\n      cancelUrl={'/user'}/>\n  );\n}\n\nexport const ErrorBoundary = ErrorReport;\n"],"names":["StartUserMove","jsx","UserMoveModal","variant","cancelUrl","ErrorBoundary","ErrorReport"],"mappings":"05BAwFA,SAAwBA,GAAgB,CAEpC,OAAAC,EAAAA,IAACC,EAAA,CACCC,QAAQ,QACRC,UAAW,OAAA,CAAQ,CAEzB,CAEO,MAAMC,EAAgBC"}