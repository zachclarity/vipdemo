{"version":3,"file":"template_._templateId.edit-BO4yu1es.js","sources":["../../../app/routes/_withNav+/_withSideBar+/_manage+/template_.$templateId.edit.tsx"],"sourcesContent":["import ErrorReport from '@components/ui/ErrorReport';\nimport {\n  Select,\n} from '@components/ui/Input';\nimport { Input, Form, Label } from '@components/ui';\nimport { Modal } from '@components/ui/modals';\nimport { RTEProvider } from '@components/ui/RichText/Editor';\nimport { ChecklistType } from '@lib/constants';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useLoaderData, useParams } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { getOrgDescendants } from './.server/org.queries';\nimport { getTemplateWithOrg, updateTemplate } from './.server/template.queries';\nimport { useManageLayoutData } from '@lib/hooks/useMatchesData';\n\nexport const loader = async ({ params, request }: LoaderFunctionArgs) => {\n  const { currentOrg: org } = await requireUserAsObject(request, {\n    permissions: Attribute.TEMPLATES_READWRITE,\n  });\n\n  const { templateId } = params;\n\n  if (!templateId)\n    throw json({ status: 'error', error: 'ID is required' }, { status: 400 });\n\n  const template = await getTemplateWithOrg(templateId);\n\n  if (!template) throw json({ error: 'no checklist found.' }, { status: 404 });\n\n  const childOrgs = await getOrgDescendants(org.uuid);\n\n  return json({ template, childOrgs });\n};\n\nexport const action = async ({\n  request,\n  params,\n}: ActionFunctionArgs) => {\n  const { templateId } = params;\n  if (!templateId) return json({ status: 'error', error: 'No checklist id.' });\n\n  const checklistEditSchema = z.object({\n    id: z.string().min(1),\n    name: z.string().min(1),\n    description: z.string().min(1),\n    redirectOrg: z.string().optional(),\n    type: z.nativeEnum(ChecklistType),\n    // owningOrgId: z.string().optional(),\n  });\n\n  try {\n    await requireUser(request, {\n      options: {\n        redirectOnFailure: false,\n      },\n      permissions: Attribute.TEMPLATES_READWRITE,\n    });\n    const formData = await request.formData();\n    const { id, name, description, type, redirectOrg } = \n      checklistEditSchema.parse({\n        id: formData.get('templateId'),\n        name: formData.get('name'),\n        description: formData.get('description'),\n        type: formData.get('checklistType'),\n        redirectOrg: formData.get('redirectOrg'),\n        // owningOrgId: formData.get('owningOrg'),\n      });\n\n    await updateTemplate(id, {\n      type,\n      description,\n      name,\n      // owningOrganizationId: owningOrgId,\n    });\n\n    return redirectWithSuccess(`..?org=${redirectOrg}`, 'Template saved!');\n  } catch (err) {\n    console.error(err);\n    if (err instanceof AuthorizationError) {\n      return jsonWithError(\n        { status: 'error', error: 'Authorization Error.' },\n        'User is not authorized.'\n      );\n    }\n    if (err instanceof ZodError) {\n      err.issues.forEach((issue) =>\n        console.error(\n          `There was an error validating on Template creation!\\n${issue.path} - ${issue.message}`\n        )\n      );\n      return jsonWithError({\n        status: 'error',\n        error: {\n          message: 'There was an error adding the template.',\n          items: err.issues,\n        },\n      }, 'There was an error adding the template!');\n    }\n\n    return jsonWithError({ status: 'error', error: 'There was an error adding the template.' }, 'There was an error adding the template!');\n  }\n};\n\nconst EditTemplate = () => {\n  const { templateId } = useParams();\n  const { template, childOrgs } = useLoaderData<typeof loader>();\n  const { orgBeingViewed } = useManageLayoutData();\n\n  //Gross hardcode\n  const checklistTypes = [\n    { id: ChecklistType.PCS, name: 'PCS' },\n    { id: ChecklistType.PCA, name: 'PCA' },\n    { id: ChecklistType.SQ, name: 'SQ'},\n  ];\n\n  return (\n    <Modal>\n      <RTEProvider>\n        <Form method=\"post\">\n          <Input.Hidden name=\"redirectOrg\" value={orgBeingViewed.uuid} />\n          <Input.Hidden name=\"templateId\" value={templateId} />\n          <Modal.Body>\n            <Modal.Title>Edit Template</Modal.Title>\n            <Form.Row>\n              <Label htmlFor=\"name\">Name</Label>\n              <Input.Text name=\"name\" defaultValue={template.name}></Input.Text>\n            </Form.Row>\n            <Form.Row>\n              <Label htmlFor=\"checklistType\">Checklist Type</Label>\n              <Select\n                name=\"checklistType\"\n                defaultValue={template.type}\n                options={checklistTypes} />\n            </Form.Row>\n            <Form.Row>\n              <Label htmlFor=\"description\">Description</Label>\n              <Input.RichText content={template.description} name=\"description\"></Input.RichText>\n            </Form.Row>\n            {/* <Form.Row>\n              <Label htmlFor=\"owningOrg\">Owning Organization</Label>\n              <Select\n                name=\"owningOrg\"\n                defaultValue={\n                  childOrgs.find(\n                    (org: { id: string }) =>\n                      org.id === template.organizationId\n                  )?.id\n                }\n                options={childOrgs} />\n            </Form.Row> */}\n          </Modal.Body>\n          <Modal.Buttons\n            link={`/template/${templateId}?org=${template.owningOrganization.id}`}\n            value=\"edit\">\n          Save\n          </Modal.Buttons>\n        </Form>\n      </RTEProvider>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default EditTemplate;\n"],"names":["EditTemplate","templateId","useParams","template","childOrgs","useLoaderData","orgBeingViewed","useManageLayoutData","checklistTypes","id","ChecklistType","PCS","name","PCA","SQ","Modal","children","jsx","RTEProvider","jsxs","Form","method","Input","Hidden","value","uuid","Body","Title","Row","Label","htmlFor","Text","defaultValue","Select","type","options","RichText","content","description","Buttons","link","owningOrganization","ErrorBoundary","ErrorReport"],"mappings":"whCA4GMA,MAAAA,EAAeA,IAAM,CACnB,KAAA,CAAEC,WAAAA,CAAW,EAAIC,EAAU,EAC3B,CAAEC,SAAAA,EAAUC,UAAAA,CAAU,EAAIC,EAA6B,EACvD,CAAEC,eAAAA,CAAe,EAAIC,EAAoB,EAGzCC,EAAiB,CACrB,CAAEC,GAAIC,EAAcC,IAAKC,KAAM,KAAM,EACrC,CAAEH,GAAIC,EAAcG,IAAKD,KAAM,KAAM,EACrC,CAAEH,GAAIC,EAAcI,GAAIF,KAAM,IAAI,CAAA,EAGpC,aACGG,EACC,CAAAC,SAAAC,EAAA,IAACC,GACCF,SAACG,EAAA,KAAAC,EAAA,CAAKC,OAAO,OACXL,SAAA,CAAAC,EAAAA,IAACK,EAAMC,OAAN,CAAaX,KAAK,cAAcY,MAAOlB,EAAemB,KAAM,QAC5DH,EAAMC,OAAN,CAAaX,KAAK,aAAaY,MAAOvB,EAAY,EACnDkB,EAAAA,KAACJ,EAAMW,KAAN,CACCV,SAAA,CAACC,EAAAA,IAAAF,EAAMY,MAAN,CAAYX,SAAa,gBAAA,EAC1BG,EAAAA,KAACC,EAAKQ,IAAL,CACCZ,SAAA,CAACC,EAAA,IAAAY,EAAA,CAAMC,QAAQ,OAAOd,SAAI,OAAA,EAC1BC,EAAAA,IAACK,EAAMS,KAAN,CAAWnB,KAAK,OAAOoB,aAAc7B,EAASS,IAAM,CAAA,CAAA,EACvD,EACAO,EAAAA,KAACC,EAAKQ,IAAL,CACCZ,SAAA,CAACC,EAAA,IAAAY,EAAA,CAAMC,QAAQ,gBAAgBd,SAAc,gBAAA,CAAA,EAC7CC,EAAA,IAACgB,EAAA,CACCrB,KAAK,gBACLoB,aAAc7B,EAAS+B,KACvBC,QAAS3B,CAAA,CAAgB,CAAA,EAC7B,EACAW,EAAAA,KAACC,EAAKQ,IAAL,CACCZ,SAAA,CAACC,EAAA,IAAAY,EAAA,CAAMC,QAAQ,cAAcd,SAAW,cAAA,EACxCC,EAAAA,IAACK,EAAMc,SAAN,CAAeC,QAASlC,EAASmC,YAAa1B,KAAK,aAAc,CAAA,CAAA,CACpE,CAAA,CAAA,EAaF,EACAK,EAAAA,IAACF,EAAMwB,QAAN,CACCC,KAAM,aAAavC,CAAU,QAAQE,EAASsC,mBAAmBhC,EAAE,GACnEe,MAAM,OAAOR,SAAA,MAAA,CAEf,CAAA,CACF,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,EACa0B,EAAgBC"}