{"version":3,"file":"base._baseId.edit-E0eLVFNV.js","sources":["../../../app/routes/_withNav+/_withSideBar+/_manage+/base.$baseId.edit.tsx"],"sourcesContent":["import ErrorReport from '@components/ui/ErrorReport';\nimport { Form, Input, Label } from '@components/ui';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useLoaderData, useParams } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { getBase, updateBase } from './.server/base.queries';\nimport { Modal } from '@components/ui/modals';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  await requireUser(request, {permissions: Attribute.BASES_READWRITE });\n  if (!params.baseId) throw new Error('Base ID is required.');\n  return json({ base: await getBase(params.baseId) });\n};\n\nexport const action = async ({\n  request,\n  params,\n}: ActionFunctionArgs) => {\n  const createSchema = z.object({\n    id: z.string(),\n    name: z.string(),\n  });\n\n  try {\n    const { id: userId } = await requireUserAsObject(request, { options: {redirectOnFailure: false}, permissions: Attribute.BASES_READWRITE });\n\n    const formData = await request.formData();\n    const { id, name } = createSchema.parse(\n      Object.fromEntries(formData.entries())\n    );\n\n    if (id !== params.baseId) throw new Error('ids do not match.');\n\n    const updatedAt = new Date(Date.now());\n\n    await updateBase(id, { name, updatedBy: userId, updatedAt });\n    return redirectWithSuccess('/base', 'Base saved.');\n  } catch (e) {\n    console.error(e);\n    if (e instanceof Error) {\n      if (e instanceof ZodError) {\n        return jsonWithError({\n          status: 'error',\n          message: 'validation error',\n          errors: e.errors,\n        }, 'There were validation errors.');\n      }\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      return jsonWithError({ status: 'error', message: e.message }, 'There was an error.');\n    }\n  }\n};\n\nconst EditBase = () => {\n  const { baseId } = useParams();\n  const { base } = useLoaderData<typeof loader>();\n\n  return (\n    <Modal>\n      <Form method=\"post\">\n        <Input.Hidden name=\"id\" value={baseId} />\n        <Modal.Body>\n          <Modal.Title>Edit Base</Modal.Title>\n          <Form.Row>\n            <Label htmlFor=\"name\">Name</Label>\n            <Input.Text\n              name=\"name\"\n              defaultValue={base.name} />\n          </Form.Row>\n        </Modal.Body>\n        <Modal.Buttons link=\"/base\">Save</Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default EditBase;\n"],"names":["EditBase","baseId","useParams","base","useLoaderData","jsx","Modal","children","jsxs","Form","method","Input","Hidden","name","value","Body","Title","Row","Label","htmlFor","Text","defaultValue","Buttons","link","ErrorBoundary","ErrorReport"],"mappings":"y4BA+DMA,MAAAA,EAAWA,IAAM,CACf,KAAA,CAAEC,OAAAA,CAAO,EAAIC,EAAU,EACvB,CAAEC,KAAAA,CAAK,EAAIC,EAA6B,EAE9C,OACGC,EAAAA,IAAAC,EAAA,CACCC,SAACC,EAAA,KAAAC,EAAA,CAAKC,OAAO,OACXH,SAAA,CAAAF,EAAAA,IAACM,EAAMC,OAAN,CAAaC,KAAK,KAAKC,MAAOb,EAAQ,EACvCO,EAAAA,KAACF,EAAMS,KAAN,CACCR,SAAA,CAACF,EAAAA,IAAAC,EAAMU,MAAN,CAAYT,SAAS,YAAA,EACtBC,EAAAA,KAACC,EAAKQ,IAAL,CACCV,SAAA,CAACF,EAAA,IAAAa,EAAA,CAAMC,QAAQ,OAAOZ,SAAI,OAAA,EAC1BF,EAAAA,IAACM,EAAMS,KAAN,CACCP,KAAK,OACLQ,aAAclB,EAAKU,IAAA,CAAM,CAAA,CAC7B,CAAA,CAAA,EACF,QACCP,EAAMgB,QAAN,CAAcC,KAAK,QAAQhB,SAAI,MAAA,CAAA,CAAA,CAClC,CAAA,CACF,CAAA,CAEJ,EAEaiB,EAAgBC"}