{"version":3,"file":"org_._orgId.inbound-DrPbYkol.js","sources":["../../../app/routes/_withNav+/_withSideBar+/_manage+/org_.$orgId.inbound.tsx"],"sourcesContent":["import { AcceptButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport PageHeader from '@components/ui/PageHeader';\nimport { Attribute } from '@lib/utils';\nimport { handleActionError } from '@lib/utils/utils.server';\nimport { MoveType } from '@prisma/client';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useFetcher, useLoaderData } from '@remix-run/react';\nimport { requireUserAsObject } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, jsonWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport {\n  acceptMemberMove,\n  getInboundMembers,\n  getOrgBeingViewed,\n  getOrgWithTemplates,\n} from './.server/org.queries';\nimport { assign } from './.server/template.queries';\nimport { Models } from '@lib/models.server';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  const { currentOrg } = await requireUserAsObject(request, {\n    permissions: Attribute.MOVES_READ,\n  });\n\n  const { orgId } = params;\n  if (!orgId) throw new Error('org id is required.');\n  const inbound = await getInboundMembers(orgId);\n\n  const { orgBeingViewed } = await getOrgBeingViewed({\n    defaultOrgId: currentOrg.uuid,\n    searchParams: new URL(request.url).searchParams,\n    params,\n  });\n\n  return json({\n    inbound,\n    orgBeingViewed,\n  });\n};\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  const assignSchema = z.object({\n    userId: z.string(),\n    currentOrg: z.string(),\n    previousOrgId: z.string(),\n    moveType: z.nativeEnum(MoveType),\n    _action: z.string().regex(/cssAccept/),\n  });\n\n  try {\n    const { id: loggedInUserId } = await requireUserAsObject(request, {\n      permissions: Attribute.MOVES_READWRITE,\n      options: { redirectOnFailure: false },\n    });\n    const {\n      _action: action,\n      userId,\n      currentOrg,\n      previousOrgId,\n      moveType,\n    } = assignSchema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n    if (action === 'cssAccept') {\n      // TODO: This needs to grab the first \"moveType\" available\n      const org = await getOrgWithTemplates(currentOrg, moveType);\n      // await acceptMemberMove(userId, currentOrg, previousOrgId);\n      if (!org.templates[0].id)\n        return jsonWithError(\n          {\n            status: 'error',\n            message: `No templates found for ${moveType} type within ${org.name}.`,\n          },\n          'There was an error accepting the move.'\n        );\n\n      await assign({\n        templateId: org.templates[0].id,\n        userId: userId as string,\n        assignedById: loggedInUserId,\n      });\n\n      await acceptMemberMove(userId, currentOrg, previousOrgId);\n\n      return jsonWithSuccess(\n        { status: 'success' },\n        `Member assigned ${moveType} checklist!`\n      );\n    }\n  } catch (e) {\n    return handleActionError(e, 'There was an error accepting the move.');\n  }\n};\n\nconst InboundMembers = () => {\n  const { inbound, orgBeingViewed } = useLoaderData<typeof loader>();\n\n  const acceptFetcher = useFetcher();\n  // TODO: Filter by PCS and / or PCA\n\n  return (\n    <>\n      <PageHeader\n        org={orgBeingViewed}\n        pageTitle=\"Inbound Members\"\n        navigateTo=\"inbound\"/>\n      {inbound.length > 0 ? (\n        <table className=\"text-left table-auto w-full border-neutral-300 border-1\">\n          <thead>\n            <tr className=\"border-b border-black\">\n              <th className=\"text-left pl-3\">Name</th>\n              <th>Type</th>\n              <th>Previous Organization</th>\n              <th>Last Updated</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {inbound\n              .sort((a, b) => a.name.localeCompare(b.name))\n              .map((user) => {\n                const updatedAt = new Date(user.updatedAt).toDateString();\n                return (\n                  <tr\n                    key={user.id}\n                    className=\"table-row border-b even:bg-zinc-50\">\n                    <td className=\"pl-3 py-4\">{user.name}</td>\n                    <td>{user.moveType}</td>\n                    <td>{user.previousOrg?.name}</td>\n                    <td>{updatedAt}</td>\n                    <td className=\"text-center\">\n                      <acceptFetcher.Form method=\"post\">\n                        <input type=\"hidden\" value={user.id} name=\"userId\" />\n                        <input\n                          type=\"hidden\"\n                          value={user.moveType ?? ''}\n                          name=\"moveType\"/>\n                        <input\n                          type=\"hidden\"\n                          value={orgBeingViewed.uuid}\n                          name=\"currentOrg\"/>\n                        {/* TODO: Actually assign the checklist onSubmit */}\n                        <input\n                          type=\"hidden\"\n                          name=\"previousOrgId\"\n                          value={user.previousOrg?.uuid ?? ''}/>\n                        <AcceptButton\n                          type=\"submit\"\n                          name=\"_action\"\n                          value=\"cssAccept\">\n                          Accept Move\n                        </AcceptButton>\n                      </acceptFetcher.Form>\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </table>\n      ) : (\n        `No members to show.`\n      )}\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default InboundMembers;\n"],"names":["InboundMembers","inbound","orgBeingViewed","useLoaderData","acceptFetcher","useFetcher","jsxs","Fragment","children","jsx","PageHeader","org","pageTitle","navigateTo","length","className","sort","a","b","name","localeCompare","map","user","updatedAt","Date","toDateString","moveType","previousOrg","Form","method","type","value","id","uuid","AcceptButton","ErrorBoundary","ErrorReport"],"mappings":"03BAiGMA,MAAAA,EAAiBA,IAAM,CAC3B,KAAM,CAAEC,QAAAA,EAASC,eAAAA,CAAe,EAAIC,EAA6B,EAE3DC,EAAgBC,EAAW,EAGjC,OAEIC,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SAAA,CAAAC,EAAA,IAACC,EAAA,CACCC,IAAKT,EACLU,UAAU,kBACVC,WAAW,SAAS,CAAA,EACrBZ,EAAQa,OAAS,EACfR,EAAAA,KAAA,QAAA,CAAMS,UAAU,0DACfP,SAAA,CAAAC,EAAA,IAAC,QACC,CAAAD,SAAAF,EAAA,KAAC,KAAG,CAAAS,UAAU,wBACZP,SAAA,CAACC,EAAA,IAAA,KAAA,CAAGM,UAAU,iBAAiBP,SAAI,MAAA,CAAA,EACnCC,EAAA,IAAC,MAAGD,SAAI,MAAA,CAAA,EACRC,EAAA,IAAC,MAAGD,SAAqB,uBAAA,CAAA,EACzBC,EAAA,IAAC,MAAGD,SAAY,eAAA,QACf,KAAG,EAAA,CAAA,CACN,CAAA,CACF,CAAA,QACC,QACE,CAAAA,SAAAP,EACEe,KAAK,CAACC,EAAGC,IAAMD,EAAEE,KAAKC,cAAcF,EAAEC,IAAI,CAAC,EAC3CE,IAAKC,GAAS,SACb,MAAMC,EAAY,IAAIC,KAAKF,EAAKC,SAAS,EAAEE,aAAa,EAEtD,OAAAnB,EAAAA,KAAC,KAAA,CAECS,UAAU,qCACVP,SAAA,CAAAC,EAAA,IAAC,KAAG,CAAAM,UAAU,YAAaP,SAAAc,EAAKH,IAAK,CAAA,EACrCV,EAAA,IAAC,KAAI,CAAAD,SAAAc,EAAKI,QAAS,CAAA,EAClBjB,EAAA,IAAA,KAAA,CAAID,UAAKc,EAAAA,EAAAK,cAAAL,YAAAA,EAAaH,IAAK,CAAA,EAC5BV,EAAA,IAAC,MAAID,SAAUe,CAAA,CAAA,EACfd,EAAA,IAAC,MAAGM,UAAU,cACZP,gBAACJ,EAAcwB,KAAd,CAAmBC,OAAO,OACzBrB,SAAA,CAAAC,EAAA,IAAC,SAAMqB,KAAK,SAASC,MAAOT,EAAKU,GAAIb,KAAK,QAAS,CAAA,EACnDV,EAAA,IAAC,QAAA,CACCqB,KAAK,SACLC,MAAOT,EAAKI,UAAY,GACxBP,KAAK,UAAA,CAAU,EACjBV,EAAA,IAAC,QAAA,CACCqB,KAAK,SACLC,MAAO7B,EAAe+B,KACtBd,KAAK,YAAA,CAAY,EAEnBV,EAAA,IAAC,QAAA,CACCqB,KAAK,SACLX,KAAK,gBACLY,QAAOT,EAAAA,EAAKK,cAALL,YAAAA,EAAkBW,OAAQ,EAAA,CAAG,EACtCxB,EAAA,IAACyB,EAAA,CACCJ,KAAK,SACLX,KAAK,UACLY,MAAM,YAAYvB,SAAA,aAAA,CAEpB,CAAA,CACF,CAAA,CACF,CAAA,CAAA,CAAA,EA7BKc,EAAKU,EA8BZ,CAEH,CAAA,CACL,CAAA,CAAA,EACF,EAEA,qBAAA,CAEJ,CAAA,CAEJ,EAEaG,EAAgBC"}