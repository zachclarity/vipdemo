{"version":3,"file":"template.create-xj1xIQwY.js","sources":["../../../app/routes/_withNav+/_withSideBar+/_manage+/template.create.tsx"],"sourcesContent":["import ErrorReport from '@components/ui/ErrorReport';\nimport { Input, Form, Label } from '@components/ui';\nimport { Modal } from '@components/ui/modals';\nimport { RTEProvider } from '@components/ui/RichText/Editor';\nimport { ChecklistType } from '@lib/constants';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunction, ActionFunctionArgs } from '@remix-run/node';\nimport { useSearchParams  } from '@remix-run/react';\nimport { requireUser } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { createTemplate } from './.server/template.queries';\nimport { useManageTemplateData } from '@lib/hooks/useMatchesData';\n\nexport const action: ActionFunction = async ({\n  request,\n}: ActionFunctionArgs) => {\n  const createSchema = z.object({\n    name: z.string().min(1),\n    description: z.string({ required_error: 'Description is required' }).min(1),\n    type: z.nativeEnum(ChecklistType),\n    orgId: z.string(),\n  });\n\n  try {\n    await requireUser(request, {\n      options: { redirectOnFailure: false },\n      permissions: Attribute.TEMPLATES_READWRITEDELETE,\n    });\n    const formData = Object.fromEntries((await request.formData()).entries());\n    const { name, description, type, orgId } = createSchema.parse({\n      name: formData.name,\n      description: formData.description,\n      type: formData['checklistType'],\n      orgId: formData.orgId,\n    });\n\n    //console.log('--------------', description)\n\n    await createTemplate({\n      name,\n      description,\n      type,\n      owningOrganizationId: orgId,\n    });\n\n    return redirectWithSuccess(\n      `/template${orgId ? `?org=${orgId}` : ''}`,\n      'Template Added!'\n    );\n  } catch (err) {\n    if (err instanceof AuthorizationError) {\n      return jsonWithError(\n        { status: 'error', error: 'Authorization Error.' },\n        'User is not authorized.'\n      );\n    }\n    if (err instanceof ZodError) {\n      err.issues.forEach((issue) =>\n        console.error(\n          `There was an error validating on Template creation!\\n${issue.path} - ${issue.message}`\n        )\n      );\n    }\n\n    return jsonWithError(\n      {\n        status: 'error',\n        error: 'There was an error adding the template.',\n      },\n      'There was an error adding the template.'\n    );\n  }\n};\n\nconst CreateTemplatePage = () => {\n  // TODO: Add confirm to delete\n  const [searchParams] = useSearchParams();\n  const { orgBeingViewed } = useManageTemplateData();\n  const templatesAvail = orgBeingViewed.templates;\n\n  const orgId = searchParams.get('org');\n  const dropDownData = [\n    { id: 'PCS', name: 'PCS' },\n    { id: 'PCA', name: 'PCA' },\n    { id: 'SQ', name: 'SQ'},\n  ];\n\n  const typesToExclude = new Set(templatesAvail.map(template => template.type));\n\n  const filteredDropDownData = dropDownData.filter(\n    (item) => item.id === 'SQ' || !typesToExclude.has(item.id)\n  );\n\n  return (\n    <Modal>\n      <RTEProvider>\n        <Form method=\"post\">\n          <Input.Hidden value={orgId ?? ''} name=\"orgId\" />\n          <Modal.Body>\n            <Modal.Title>Create Template</Modal.Title>\n            <Form.Row>\n              <Label htmlFor=\"checklistType\">Checklist Type</Label>\n              <Input.Select name=\"checklistType\" options={filteredDropDownData} />\n            </Form.Row>\n            <Form.Row>\n              <Label htmlFor=\"name\">Name</Label>\n              <Input.Text name=\"name\" />\n            </Form.Row>\n            <Form.Row>\n              <Label htmlFor=\"description\">Description</Label>\n              <Input.RichText name=\"description\" />\n            </Form.Row>\n          </Modal.Body>\n          <Modal.Buttons\n            link={`/template${orgId ? `?org=${orgId}` : ''}`}>\n          Save\n          </Modal.Buttons>\n        </Form>\n      </RTEProvider>\n    </Modal>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default CreateTemplatePage;\n"],"names":["CreateTemplatePage","searchParams","useSearchParams","orgBeingViewed","useManageTemplateData","templatesAvail","templates","orgId","get","dropDownData","id","name","typesToExclude","Set","map","template","type","filteredDropDownData","filter","item","has","Modal","children","jsx","RTEProvider","jsxs","Form","method","Input","Hidden","value","Body","Title","Row","Label","htmlFor","Select","options","Text","RichText","Buttons","link","ErrorBoundary","ErrorReport"],"mappings":"07BA4EMA,MAAAA,EAAqBA,IAAM,CAEzB,KAAA,CAACC,CAAY,EAAIC,EAAgB,EACjC,CAAEC,eAAAA,CAAe,EAAIC,EAAsB,EAC3CC,EAAiBF,EAAeG,UAEhCC,EAAQN,EAAaO,IAAI,KAAK,EAC9BC,EAAe,CACnB,CAAEC,GAAI,MAAOC,KAAM,KAAM,EACzB,CAAED,GAAI,MAAOC,KAAM,KAAM,EACzB,CAAED,GAAI,KAAMC,KAAM,IAAI,CAAA,EAGlBC,EAAiB,IAAIC,IAAIR,EAAeS,IAAgBC,GAAAA,EAASC,IAAI,CAAC,EAEtEC,EAAuBR,EAAaS,OACvCC,GAASA,EAAKT,KAAO,MAAQ,CAACE,EAAeQ,IAAID,EAAKT,EAAE,CAC3D,EAEA,aACGW,EACC,CAAAC,SAAAC,EAAA,IAACC,GACCF,SAACG,EAAA,KAAAC,EAAA,CAAKC,OAAO,OACXL,SAAA,CAAAC,EAAAA,IAACK,EAAMC,OAAN,CAAaC,MAAOvB,GAAS,GAAII,KAAK,QAAQ,EAC/Cc,EAAAA,KAACJ,EAAMU,KAAN,CACCT,SAAA,CAACC,EAAAA,IAAAF,EAAMW,MAAN,CAAYV,SAAe,kBAAA,EAC5BG,EAAAA,KAACC,EAAKO,IAAL,CACCX,SAAA,CAACC,EAAA,IAAAW,EAAA,CAAMC,QAAQ,gBAAgBb,SAAc,iBAAA,QAC5CM,EAAMQ,OAAN,CAAazB,KAAK,gBAAgB0B,QAASpB,CAAsB,CAAA,CAAA,EACpE,EACAQ,EAAAA,KAACC,EAAKO,IAAL,CACCX,SAAA,CAACC,EAAA,IAAAW,EAAA,CAAMC,QAAQ,OAAOb,SAAI,OAAA,EACzBC,EAAAA,IAAAK,EAAMU,KAAN,CAAW3B,KAAK,MAAO,CAAA,CAAA,EAC1B,EACAc,EAAAA,KAACC,EAAKO,IAAL,CACCX,SAAA,CAACC,EAAA,IAAAW,EAAA,CAAMC,QAAQ,cAAcb,SAAW,cAAA,EACvCC,EAAAA,IAAAK,EAAMW,SAAN,CAAe5B,KAAK,aAAc,CAAA,CAAA,CACrC,CAAA,CAAA,EACF,EACAY,EAAAA,IAACF,EAAMmB,QAAN,CACCC,KAAM,YAAYlC,EAAQ,QAAQA,CAAK,GAAK,EAAE,GAAIe,SAAA,MAAA,CAEpD,CAAA,CACF,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,EAEaoB,EAAgBC"}