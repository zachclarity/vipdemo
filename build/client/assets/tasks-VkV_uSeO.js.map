{"version":3,"file":"tasks-VkV_uSeO.js","sources":["../../../app/routes/_withNav+/_withSideBar+/tasks.tsx"],"sourcesContent":["import ContainerLayout from '@components/ui/Container';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport SideBarNav from '@components/SideBar';\nimport type { SideBarNavLink } from '@lib/types';\nimport { Attribute } from '@lib/utils';\nimport type { LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Outlet, useLoaderData } from '@remix-run/react';\nimport {\n  getItemCountForAllRoles,\n  getItemCountByUserRole,\n  hasCSSRole,\n  getChecklistItemsByRole,\n} from './.server/tasks.queries';\nimport { requireUserAsObject } from '@services/user.server';\n\nexport const loader = async ({ params, request }: LoaderFunctionArgs) => {\n  const { id, roles: userOrgRoles, currentOrg } = await requireUserAsObject(\n    request,\n    { permissions: Attribute.TASKS_READWRITE }\n  );\n\n  const { orgRoleId: roleId } = params;\n  if (!roleId) throw new Error('roleId is required');\n\n  // const items =\n\n  const orgRole = userOrgRoles.find(orgRole => orgRole.roleId === roleId);\n\n  // if (!orgRole) throw new Error(`could not find orgrole with role id: ${roleId}`);\n\n  // let items;\n  //\n  // if (hasCSSRole(userOrgRoles)) {\n  //   items = getChecklistItemsByRole( roleId, cssOrgId );\n  // } else {\n  //   if (!orgRole) throw new Error(`could not find orgrole with role id: ${roleId}`);\n  //   items = getChecklistItemsByRole( roleId, orgRole?.owningOrgId);\n  // }\n\n  let roles;\n\n  if (hasCSSRole(userOrgRoles)) {\n    const cssOrgId = userOrgRoles.find( orgRole => orgRole.abbreviation === 'CSS' )?.owningOrgId;\n    if ( !cssOrgId ) throw new Error( 'CSS owning org id not found.' );\n    roles = await getItemCountForAllRoles( cssOrgId );\n  }\n  else\n  {\n    if (!orgRole) throw new Error(`could not find orgrole with role id: ${roleId}`);\n    roles = await getItemCountByUserRole( id, orgRole?.owningOrgId );\n  }\n  return json({\n    roleId: params.roleId,\n    roles,\n  }, {\n    headers: {\n      'X-Frame-Options': 'SAMEORIGIN',\n      'Content-Security-Policy': 'frame-ancestors: none',\n    },\n  });\n};\n\n\ntype RoleLinkProps = {\n  info: any & { name: string };\n  notCompleteCount: number;\n  overdueCount: number;\n}\n\nfunction RoleLink({ info, notCompleteCount, overdueCount }: RoleLinkProps) {\n\n  let text = '';\n  if (overdueCount > 0) {\n    if (overdueCount > 99) {\n      text = '99+';\n    } else {\n      text = overdueCount.toString();\n    }\n  } else {\n    if (notCompleteCount > 99) {\n      text = '99+';\n    } else {\n      text = notCompleteCount.toString();\n    }\n  }\n\n  return (\n    <div className=\"flex w-full justify-between\">\n      <span className=\"text-ellipsis overflow-hidden whitespace-nowrap max-w-[calc(100%-3rem)]\">\n        {info.name}\n      </span>\n      {notCompleteCount > 0 && (\n        <span\n          className={`${overdueCount > 0 ? 'bg-red-500' : 'bg-primary-500'} px-2.5 rounded-full text-center text-white`}\n          title=\"Unsigned Tasks\">\n          { text }\n        </span>\n      )}\n    </div>\n  );\n}\n\nconst TasksTabLayout = () => {\n  const { roles } = useLoaderData<typeof loader>();\n\n  let links: SideBarNavLink['links'] = [];\n\n  for (const orgRole of roles) {\n    links.push({\n      text: (\n        <RoleLink\n          info={orgRole}\n          notCompleteCount={orgRole.notCompleteCount ?? 0}\n          overdueCount={orgRole.overdueCount}/>\n      ),\n      href: `/tasks/${orgRole.id}`,\n      urlPattern: orgRole.id,\n      extraClasses: orgRole.overdueCount && orgRole.overdueCount > 0 ? 'font-bold' : undefined,\n    });\n  }\n\n  const sideBarLinks = [\n    {\n      header: 'View Items By Role',\n      links: [...links],\n    },\n  ];\n\n  return (\n    <>\n      <SideBarNav navLinks={sideBarLinks}></SideBarNav>\n      <ContainerLayout>\n        <Outlet />\n      </ContainerLayout>\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default TasksTabLayout;\n"],"names":["RoleLink","info","notCompleteCount","overdueCount","text","toString","jsxs","className","children","jsx","name","title","TasksTabLayout","roles","useLoaderData","links","orgRole","push","href","id","urlPattern","extraClasses","sideBarLinks","header","Fragment","SideBarNav","navLinks","ContainerLayout","Outlet","ErrorBoundary","ErrorReport"],"mappings":"oyBAsEA,SAASA,EAAS,CAAEC,KAAAA,EAAMC,iBAAAA,EAAkBC,aAAAA,CAAa,EAAkB,CAEzE,IAAIC,EAAO,GACX,OAAID,EAAe,EACbA,EAAe,GACVC,EAAA,MAEPA,EAAOD,EAAaE,SAAS,EAG3BH,EAAmB,GACdE,EAAA,MAEPA,EAAOF,EAAiBG,SAAS,EAKnCC,EAAAA,KAAC,MAAI,CAAAC,UAAU,8BACbC,SAAA,CAAAC,EAAA,IAAC,OAAK,CAAAF,UAAU,0EACbC,SAAAP,EAAKS,IACR,CAAA,EACCR,EAAmB,GAClBO,EAAAA,IAAC,OAAA,CACCF,UAAW,GAAGJ,EAAe,EAAI,aAAe,gBAAgB,8CAChEQ,MAAM,iBACJH,SAAAJ,CAAA,CACJ,CAAA,CAEJ,CAAA,CAEJ,CAEMQ,MAAAA,EAAiBA,IAAM,CACrB,KAAA,CAAEC,MAAAA,CAAM,EAAIC,EAA6B,EAE/C,IAAIC,EAAiC,CAAC,EAEtC,UAAWC,KAAWH,EACpBE,EAAME,KAAK,CACTb,KACEK,EAAA,IAACT,EAAA,CACCC,KAAMe,EACNd,iBAAkBc,EAAQd,kBAAoB,EAC9CC,aAAca,EAAQb,YAAA,CAAa,EAEvCe,KAAM,UAAUF,EAAQG,EAAE,GAC1BC,WAAYJ,EAAQG,GACpBE,aAAcL,EAAQb,cAAgBa,EAAQb,aAAe,EAAI,YAAc,MACjF,CAAC,EAGH,MAAMmB,EAAe,CACnB,CACEC,OAAQ,qBACRR,MAAO,CAAC,GAAGA,CAAK,CAClB,CAAA,EAGF,OAEIT,EAAAA,KAAAkB,EAAAA,SAAA,CAAAhB,SAAA,CAACC,EAAA,IAAAgB,EAAA,CAAWC,SAAUJ,CAAc,CAAA,EACnCb,EAAA,IAAAkB,EAAA,CACCnB,SAACC,EAAAA,IAAAmB,EAAA,CAAO,CAAA,CACV,CAAA,CAAA,CACF,CAAA,CAEJ,EAEaC,EAAgBC"}