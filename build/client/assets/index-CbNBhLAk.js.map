{"version":3,"file":"index-CbNBhLAk.js","sources":["../../../app/lib/utils/utils.permissions.ts","../../../app/lib/utils/index.ts"],"sourcesContent":["import type {\n  AttributeKeys,\n  CategoryPermission,\n  RolePermissionsEnum,\n} from '@lib/types';\nimport { isValueInEnum } from '@lib/utils';\n\nexport enum AttributeCategory {\n  ADMIN = 'admin',\n  SUPERADMIN = 'superadmin',\n  CHECKLISTS = 'checklists',\n  MEMBERS = 'members',\n  METRICS = 'metrics',\n  MOVES = 'moves',\n  ORGS = 'orgs',\n  ORGROLES = 'orgroles',\n  ROLES = 'roles',\n  TASKS = 'tasks',\n  TEMPLATES = 'templates',\n  UNITS = 'units',\n  BASES = 'bases',\n}\n\nexport enum Operation {\n  READ = 'READ',\n  WRITE = 'WRITE',\n  DELETE = 'DELETE',\n}\n\nexport function createPermission(\n  category: AttributeCategory,\n  ...attributes: Operation[]\n): CategoryPermission {\n  return {\n    category,\n    attributes: attributes.length === 1 ? attributes[0] : attributes,\n  };\n}\n\nexport function generateAttributes<T extends object>(categoryEnum: T): Record<keyof AttributeKeys, CategoryPermission> {\n  const categories = Object.keys(categoryEnum);\n  let categoryPermissions: Record<string, CategoryPermission> = {};\n  for (const category of categories) {\n    categoryPermissions[`${ category }_READ`] = createPermission(\n      category.toLowerCase() as AttributeCategory,\n      Operation.READ\n    );\n    categoryPermissions[`${ category }_READWRITE`] = createPermission(\n      category.toLowerCase() as AttributeCategory,\n      Operation.READ,\n      Operation.WRITE\n    );\n    categoryPermissions[`${ category }_READWRITEDELETE`] = createPermission(\n      category.toLowerCase() as AttributeCategory,\n      Operation.READ,\n      Operation.WRITE,\n      Operation.DELETE\n    );\n  }\n\n  return categoryPermissions;\n}\n\nexport const Attribute: AttributeKeys = {...generateAttributes(AttributeCategory)} as const;\n\nconst cssPermissions = [\n  Attribute.TASKS_READWRITEDELETE,\n  Attribute.CHECKLISTS_READWRITEDELETE,\n  Attribute.METRICS_READ,\n  Attribute.TEMPLATES_READWRITEDELETE,\n  Attribute.ORGS_READWRITEDELETE,\n  Attribute.MOVES_READWRITEDELETE,\n  Attribute.MEMBERS_READWRITEDELETE,\n  Attribute.ORGROLES_READWRITE,\n];\n\nconst adminPermissions = [...cssPermissions, Attribute.ROLES_READWRITEDELETE, Attribute.ADMIN_READWRITEDELETE];\n\nconst superAdminPermissions = [...adminPermissions, Attribute.SUPERADMIN_READWRITEDELETE];\n\nexport const RolePermissions: RolePermissionsEnum = {\n  APPROVER: [Attribute.TASKS_READWRITEDELETE, Attribute.METRICS_READ],\n  COMMANDER: [Attribute.MEMBERS_READ, Attribute.METRICS_READ],\n  CSS: cssPermissions,\n  ADMIN: adminPermissions,\n  SUPERADMIN: superAdminPermissions,\n} as const;\n\n/**\n * Compares two maps, checking if the userMap contains all the required values specified in the reqdMap for each category.\n *\n * @param userMap - The user map to be compared.\n * @param reqdMap - The map containing required values for each category.\n * @returns {boolean} Returns true if userMap contains all the required values for each category, otherwise false.\n */\nexport function compareMaps(\n  userMap: Map<string, Operation[] | Operation>,\n  reqdMap: Map<string, Operation[] | Operation>\n): boolean {\n  for (const [category, requiredValues] of reqdMap) {\n    if (!userMap.has(category)) {\n      return false;\n    }\n\n    const userValues = userMap.get(category);\n    if (Array.isArray(requiredValues)) {\n      for (const requiredValue of requiredValues) {\n        if (!userValues?.includes(requiredValue)) {\n          return false;\n        }\n      }\n    } else {\n      if(!userValues?.includes(requiredValues))\n        return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Verifies the attributes in the provided userMap to ensure they are valid role attributes.\n * Throws a TypeError if any attribute is not READ, WRITE, or DELETE.\n *\n * @param {Map<AttributeCategory, Operation[]>} userMap - The map containing role categories and their associated attributes.\n * @throws {TypeError} Throws a TypeError if any attribute is not READ, WRITE, or DELETE.\n */\nexport function verifyAttributes(userMap: Map<string, Operation[] | Operation>) {\n  const isOperation = isValueInEnum(Operation);\n  for (const [key, attributes] of userMap) {\n    if (key && attributes) {\n      if (Array.isArray(attributes)) {\n        for (const attribute of attributes) {\n          if (!attribute || !isOperation(attribute)) {\n            // Check if the user category has the requested attribute\n            throw new TypeError(\n              `Role attribute ${attribute} should be READ, WRITE, or DELETE`\n            );\n          }\n        }\n      }\n      else {\n        if (!attributes || !isOperation(attributes)) {\n          // Check if the user category has the requested attribute\n          throw new TypeError(\n            `Role attribute ${attributes} should be READ, WRITE, or DELETE`\n          );\n        }\n      }\n    } else {\n      throw new TypeError(\n        `Role attribute ${attributes} should be READ, WRITE, or DELETE`\n      );\n    }\n  }\n}\n\n/**\n * Verifies that the provided operations are valid Operation types.\n * Throws a TypeError if any operation is invalid.\n *\n * @param operations - The operation(s) to verify.\n * @throws {TypeError} Throws a TypeError if any operation is not a valid Operation type.\n */\nexport function verifyOperations(operations: Operation | Operation[]) {\n  const isOperation = isValueInEnum(Operation);\n  if (Array.isArray(operations)) {\n    for (const op of operations) {\n      if (!op || !isOperation(op)) throw new TypeError(`${op} is not an Operation type.`);\n    }\n  } else if (!operations || !isOperation(operations)) throw new TypeError(`${operations} is not an Operation type.`);\n}\n\n/**\n * Converts an object or array of objects representing category permissions into a Map.\n *\n * @param permObject - The object or array of objects representing category permissions.\n * @returns The map containing category permissions.\n * @throws {TypeError} Throws a TypeError if any category or operation is invalid.\n */\nexport function objectToMap(permObject: CategoryPermission | CategoryPermission[]) {\n  const isRoleCategory = isValueInEnum(AttributeCategory);\n\n  const requiredPermissions = new Map<AttributeCategory, Operation[]>();\n\n  function setMap(\n    category: AttributeCategory,\n    operations: Operation | Operation[]\n  ) {\n    if (!category || !isRoleCategory(category)) throw new TypeError(`${category} is not a valid category.`);\n\n    verifyOperations(operations);\n\n    if (Array.isArray(operations))\n      requiredPermissions.set(category, operations);\n    else requiredPermissions.set(category, [operations]);\n  }\n\n  if (Array.isArray(permObject)) {\n    for (const requiredPerm of permObject) {\n      setMap(requiredPerm.category, requiredPerm.attributes);\n    }\n  } else {\n    setMap(permObject.category, permObject.attributes);\n  }\n\n  return requiredPermissions;\n}\n","import { UserRank, type UserSessionData } from '@lib/constants';\nimport {\n  Attribute,\n  AttributeCategory,\n  compareMaps,\n  objectToMap,\n  Operation,\n  RolePermissions,\n  verifyAttributes,\n} from '@lib/utils/utils.permissions';\n\nimport type { Prisma, Rank } from '@prisma/client';\nimport type { SessionData } from '@remix-run/node';\n\nexport const isInputType = (target: unknown): target is HTMLInputElement =>\n  target instanceof HTMLInputElement;\n\nexport const isSelectType = (target: unknown): target is HTMLSelectElement =>\n  target instanceof HTMLSelectElement;\n\n/**\n * A generic function to determine if a value is in the given enum\n * @param {Record<string, E>} strEnum An enum that has strings as values\n * @returns {(value: (string | string[])) => value is E[] | E}\n */\nexport const isValueInEnum = <E extends string>(\n  strEnum: Record<string, E>\n): ((value: string | string[]) => value is E[] | E) => {\n  if (!strEnum) throw new Error('no enum');\n  const enumValues = Object.values(strEnum) as string[];\n\n  return (value: string | string[]): value is E | E[] => {\n    if (!value) throw new Error('in the callback');\n    if (Array.isArray(value)) return enumValues.includes(value[0]);\n    return enumValues.includes(value);\n  };\n};\n\nexport function isPrismaKnownError(\n  err: unknown\n): err is Prisma.PrismaClientKnownRequestError {\n  return !!(err as Prisma.PrismaClientKnownRequestError).code;\n}\n\nexport {\n  Attribute,\n  RolePermissions,\n  AttributeCategory,\n  Operation,\n  compareMaps,\n  objectToMap,\n  verifyAttributes,\n};\n\n// Verifies obj is of type { roles, permissions, ...user data}\nexport function isUserSessionData(obj: unknown): obj is UserSessionData {\n  return (\n    Array.isArray((obj as UserSessionData).roles) &&\n    (obj as UserSessionData).roles.every(\n      (role: any) => typeof role === 'object' && typeof role.name === 'string'\n    ) && // Check if roles array contains objects with a 'name' property of type string\n    typeof (obj as UserSessionData).permissions === 'string' &&\n    typeof (obj as UserSessionData).email === 'string' &&\n    typeof (obj as UserSessionData).id === 'string'\n  );\n}\n\n// Verifies obj is of type { roles, permissions, user }\nexport function isUserLayoutData(obj: unknown): obj is SessionData {\n  return (\n    Array.isArray((obj as SessionData).roles) &&\n    (obj as SessionData).roles.every(\n      (role: any) => typeof role === 'object' && typeof role.name === 'string'\n    ) && // Check if roles array contains objects with a 'name' property of type string\n    typeof (obj as SessionData).permissions === 'string' &&\n    typeof (obj as SessionData).user.workEmail === 'string' &&\n    typeof (obj as SessionData).user.id === 'string'\n  );\n}\n\nexport enum PasswordError {\n  None,\n  Spaces,\n  Length,\n  Mismatch,\n}\n\nexport function isValidPassword(password: string, comparePassword?: string):  PasswordError[] {\n  const errors = [];\n  if (comparePassword)\n    if (comparePassword !== '' &&\n        comparePassword !== password) errors.push(PasswordError.Mismatch);\n\n  let hasNoSpaces = !/\\s/.test(password);\n  if (!hasNoSpaces) errors.push(PasswordError.Spaces);\n\n  const isLongEnough = password.length >= 10;\n  if (!isLongEnough) errors.push(PasswordError.Length);\n\n  return errors;\n}\n\n// Helper function to get the display name for a rank\nexport const getRankDisplay = (\n  rank: Rank,\n  useAbbreviation: boolean = false\n): string => {\n  return useAbbreviation ? UserRank[rank].abb : UserRank[rank].name;\n};\n"],"names":["AttributeCategory","Operation","createPermission","category","attributes","generateAttributes","categoryEnum","categories","categoryPermissions","Attribute","cssPermissions","adminPermissions","superAdminPermissions","RolePermissions","compareMaps","userMap","reqdMap","requiredValues","userValues","requiredValue","verifyAttributes","isOperation","isValueInEnum","key","attribute","verifyOperations","operations","op","objectToMap","permObject","isRoleCategory","requiredPermissions","setMap","requiredPerm","strEnum","enumValues","value","PasswordError","PasswordError2","isValidPassword","password","comparePassword","errors"],"mappings":"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"}