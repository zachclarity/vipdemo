{"version":3,"file":"org._orgId.edit-CNG5lzZr.js","sources":["../../../app/routes/_withNav+/_withSideBar+/_manage+/org.$orgId.edit.tsx"],"sourcesContent":["import { Breadcrumbs } from '@components/OrgBreadcrumbs';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { Input, InputRow, TextInput, TextLabel } from '@components/ui/Input';\nimport { Modal } from '@components/ui/modals';\nimport { useManageLayoutData } from '@lib/hooks/useMatchesData';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useFetcher, useLoaderData } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport React, { useState } from 'react';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { getAllOrgs, getOrg, moveOrgs, updateOrg } from './.server/org.queries';\nimport { Models } from '@lib/models.server';\nimport useIsAdmin from '@lib/hooks/useIsAdmin';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  const { roles: userRoles } = await requireUserAsObject(request, { permissions: Attribute.ORGS_READWRITE });\n  const { orgId } = params;\n  if (!orgId) throw json({ status: 'error', error: 'orgId is required.' });\n  const org = await getOrg(orgId);\n  const parent = await getAllOrgs();\n  const ancestors = await Models.org.findAncestors(orgId);\n  const ancestorsIds = ancestors.map(org => org.uuid);\n  \n  return json({ org, parent, ancestors: ancestorsIds, userRoles});\n};\n\n// TODO: Add try catch\nexport async function action({ request }: ActionFunctionArgs) {\n  const schema = z.object({\n    orgName: z.string().min(3).max(80),\n    newParent: z.string().optional(),\n    moveOrg: z.preprocess((value) => value === 'on', z.boolean()),\n    isWingLevel: z.preprocess((value) => value === 'on', z.boolean()),\n    orgId: z.string().min(3),\n    abbreviation: z.string(),\n    currentParent: z.string().optional(),\n  });\n  try {\n    const { id: userId } = await requireUserAsObject(request, {\n      permissions: Attribute.ORGS_READWRITE,\n    });\n\n    const { orgId, orgName, abbreviation, newParent, moveOrg, isWingLevel, currentParent } = schema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n    \n    if(currentParent && newParent === currentParent){\n      return jsonWithError(\n        { status: 'error', error: 'Validation Error.' },\n        `Requested to move organization, but didn't change location.`\n      );\n    }\n\n    if (moveOrg) {\n      if (!newParent) return jsonWithError({ status: 'error', error: 'Parent org cannot be blank.'},\n        'Parent org must be selected.'\n      );\n\n      if (newParent === 'DAF') return jsonWithError(\n        { status: 'error', error: 'Parent Org cannot be Department of the Airforce.' },\n        'Parent Org cannot be Department of the Airforce.'\n      );\n\n      await moveOrgs(orgId, newParent);\n    }\n    \n    await updateOrg(orgId, {\n      userId,\n      orgName,\n      abbreviation,\n      isWingLevel,\n    });\n\n    return redirectWithSuccess('/org', 'Organization Saved!');\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      if (e instanceof ZodError) {\n        return jsonWithError(\n          { status: 'error', message: 'validation error', errors: e.errors },\n          'There was an error saving the org.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', message: e.message },\n        'There was an error saving the org.'\n      );\n    }\n  }\n}\n\nconst isNameValid = (val?: string | number | readonly string[] | undefined): boolean => {\n  if (typeof val === 'string') {\n    return val.trim().length > 2;\n  }\n  return false;\n};\n\nconst EditOrgDefaultPage = () => {\n  const { org, ancestors, userRoles} = useLoaderData<typeof loader>();\n  const [moveOrgCheck, setMoveOrgCheck] = useState(false);\n  const [ isWingLevel, setIsWingLevel ] = useState(org.isWingLevel);\n  const { parentNode } = useManageLayoutData();\n  const [newParent, setNewParent] = useState('');\n  const [ orgNameState, setOrgNameState] = useState(org.name); \n  const fetcher = useFetcher();\n\n  const {isAdmin} = useIsAdmin(userRoles);\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setOrgNameState(e.target.value);\n  };\n  \n  return (\n    <Modal>\n      <fetcher.Form onSubmit={(e) => {\n        e.preventDefault();\n        const data = new FormData(e.currentTarget);\n        for (let [key, val ] of data.entries()) {\n          data.set(key, val.toString().trim());\n        }\n        console.log(data);\n        console.log(e.currentTarget);\n        fetcher.submit(data, { method: 'POST'});\n      }}>\n        <div className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4 mb-5\">\n          <Modal.Title>Edit Organization:</Modal.Title>\n          {(!org.isBase && parentNode.uuid !== org.uuid )&& (\n            <>\n              <Input.Checkbox\n                label=\"Relocate Org?\"\n                name=\"moveOrg\"\n                checked={moveOrgCheck}\n                onChange={() => setMoveOrgCheck(!moveOrgCheck)}></Input.Checkbox>\n              {moveOrgCheck && (\n                <>\n                  <InputRow className=\"pb-0\">\n                    <Breadcrumbs tree={parentNode} setNewParent={setNewParent} ancestors={ancestors} orgId={org.uuid}/>\n                    <input type=\"hidden\" value={newParent} name=\"newParent\" />\n                  </InputRow>\n                  <InputRow>\n                    <input\n                      type=\"hidden\"\n                      value={org.parentOrgId ?? ''}\n                      name=\"currentParent\"/>\n                  </InputRow>\n                </>\n              )}\n              {isAdmin && <Input.Checkbox label=\"Is Wing-level Org?\" name=\"isWingLevel\" checked={isWingLevel} onChange={() => setIsWingLevel(!isWingLevel)}></Input.Checkbox>}\n            </>\n          )}\n          <InputRow>\n            <input type=\"hidden\" name=\"orgId\" value={org.uuid}></input>\n            <Input.TextWithValidation id=\"orgName\" name=\"orgName\" label=\"New Name:\" validationFn={isNameValid} value={orgNameState} onChange={handleNameChange} validationMsg=\"Name requires at least 3 characters\"/>\n          </InputRow>\n          <InputRow>\n            <TextLabel htmlFor=\"abbreviation\">Abbreviation:</TextLabel>\n            <TextInput name=\"abbreviation\" defaultValue={org.abbreviation} />\n          </InputRow>\n        </div>\n        <Modal.Buttons link=\"/org\" value=\"edit\">\n          Save\n        </Modal.Buttons>\n      </fetcher.Form>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default EditOrgDefaultPage;\n"],"names":["isNameValid","val","trim","length","EditOrgDefaultPage","org","ancestors","userRoles","useLoaderData","moveOrgCheck","setMoveOrgCheck","useState","isWingLevel","setIsWingLevel","parentNode","useManageLayoutData","newParent","setNewParent","orgNameState","setOrgNameState","name","fetcher","useFetcher","isAdmin","useIsAdmin","handleNameChange","e","target","value","jsx","Modal","children","jsxs","Form","onSubmit","preventDefault","data","FormData","currentTarget","key","entries","set","toString","console","log","submit","method","className","Title","isBase","uuid","Fragment","Input","Checkbox","label","checked","onChange","InputRow","Breadcrumbs","tree","orgId","type","parentOrgId","TextWithValidation","id","validationFn","validationMsg","TextLabel","htmlFor","TextInput","defaultValue","abbreviation","Buttons","link","ErrorBoundary","ErrorReport"],"mappings":"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"}