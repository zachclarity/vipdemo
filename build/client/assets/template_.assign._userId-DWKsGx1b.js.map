{"version":3,"file":"template_.assign._userId-DWKsGx1b.js","sources":["../../../app/routes/_withNav+/_withSideBar+/_manage+/template_.assign.$userId.tsx"],"sourcesContent":["import { LinkButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { Modal } from '@components/ui/modals';\nimport { RolePermissions } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useFetcher, useLoaderData, useSearchParams } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport React from 'react';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, jsonWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport {\n  assign,\n  deleteChecklist,\n  getTemplates,\n} from './.server/template.queries';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  await requireUser(request, { permissions: RolePermissions.SUPERADMIN });\n  const { userId } = params;\n  if (!userId) throw json({ status: 'error', error: 'userId is required.' });\n\n  const { user, templates } = await getTemplates(userId);\n\n  return json({\n    user,\n    templates,\n  });\n};\n\nexport const action = async ({ request, params }: ActionFunctionArgs) => {\n  const checklistCreateSchema = z.object({\n    templateId: z.string().optional(),\n    userId: z.string(),\n    checklistId: z.string().optional(),\n    _action: z.union([z.literal('create'), z.literal('delete')]),\n  });\n\n  try {\n    const { id: loggedInUserId } = await requireUserAsObject(request, {\n      options: { redirectOnFailure: false },\n      permissions: RolePermissions.SUPERADMIN,\n    });\n\n    const { templateId, userId, _action, checklistId } =\n      checklistCreateSchema.parse({\n        ...Object.fromEntries((await request.formData()).entries()),\n        userId: params.userId,\n      });\n\n    if (_action === 'delete') {\n      if (!checklistId)\n        return json({ status: 'error', error: 'checklistId is required.' });\n\n      await deleteChecklist(checklistId, userId);\n\n      return jsonWithSuccess(\n        {\n          status: 'success',\n          message: 'Template unassigned successfully',\n        },\n        'Checklist Unassigned!'\n      );\n    }\n    if (_action === 'create') {\n      if (!templateId)\n        return json({ status: 'error', error: 'templateId is required.' });\n\n      await assign({\n        templateId,\n        userId,\n        assignedById: loggedInUserId,\n      });\n\n      return jsonWithSuccess(\n        {\n          status: 'success',\n          message: 'Checklist assigned successfully',\n        },\n        'Checklist Assigned!'\n      );\n    }\n  } catch (e) {\n    console.error(e);\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      if (e instanceof ZodError) {\n        return jsonWithError(\n          {\n            status: 'error',\n            message: 'There were validation errors.',\n            issues: e.issues,\n          },\n          'There was an error.'\n        );\n      }\n      return jsonWithError(\n        {\n          status: 'error',\n          message: e.message,\n        },\n        'There was an error.'\n      );\n    }\n  }\n};\n\nconst UserAssignChecklist = () => {\n  const { user, templates } = useLoaderData<typeof loader>();\n  const [searchParams] = useSearchParams();\n  const unassignChecklist = useFetcher();\n  const assignChecklist = useFetcher();\n  //\n  // const url = searchParams.get('org') ? `?org=${searchParams.get('org')}` : '';\n\n  return (\n    <Modal>\n      <div className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4 mb-5\">\n        <Modal.Title>{user?.name}</Modal.Title>\n        <h2 className=\"text-lg font-bold border-b border-black pb-1 mb-3\">\n          Available Templates\n        </h2>\n        <ul className=\"max-h-[75vh] overflow-y-auto\">\n          {templates?.map((template) => (\n            <li\n              key={template.id}\n              className=\"flex justify-between items-center hover:bg-gray-500 hover:text-slate-100 px-3 py-2 border-b border-black hover:\">\n              {template.name}\n              <div>\n                {template.assigned && (\n                  <unassignChecklist.Form method=\"post\" className=\"inline\">\n                    <input\n                      type=\"hidden\"\n                      name=\"checklistId\"\n                      value={template.checklistId}/>\n                    <button\n                      type=\"submit\"\n                      name=\"_action\"\n                      value=\"delete\"\n                      className=\"mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-red-300 sm:mt-0 sm:w-auto\">\n                      Unassign\n                    </button>\n                  </unassignChecklist.Form>\n                )}\n                <assignChecklist.Form method=\"post\" className=\"inline ml-4\">\n                  <input type=\"hidden\" name=\"templateId\" value={template.id} />\n                  <button\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"create\"\n                    disabled={template.assigned}\n                    className=\"mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-green-200 sm:mt-0 sm:w-auto disabled:bg-gray-300 disabled:text-slate-500\">\n                    {template.assigned ? 'Assigned' : 'Assign'}\n                  </button>\n                </assignChecklist.Form>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6\">\n        <LinkButton variant=\"green\" to={`/template/assign`}>\n          Done\n        </LinkButton>\n      </div>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default UserAssignChecklist;\n"],"names":["UserAssignChecklist","user","templates","useLoaderData","useSearchParams","unassignChecklist","useFetcher","assignChecklist","Modal","children","jsxs","className","jsx","Title","name","map","template","assigned","Form","method","type","value","checklistId","id","disabled","LinkButton","variant","to","ErrorBoundary","ErrorReport"],"mappings":"4zBAiHMA,MAAAA,EAAsBA,IAAM,CAChC,KAAM,CAAEC,KAAAA,EAAMC,UAAAA,CAAU,EAAIC,EAA6B,EAClCC,EAAgB,EACvC,MAAMC,EAAoBC,EAAW,EAC/BC,EAAkBD,EAAW,EAInC,cACGE,EACC,CAAAC,SAAA,CAACC,EAAA,KAAA,MAAA,CAAIC,UAAU,8CACbF,SAAA,CAAAG,EAAAA,IAACJ,EAAMK,MAAN,CAAaJ,SAAAR,GAAAA,YAAAA,EAAMa,IAAK,CAAA,EACxBF,EAAA,IAAA,KAAA,CAAGD,UAAU,oDAAoDF,SAElE,qBAAA,CAAA,QACC,KAAG,CAAAE,UAAU,+BACXF,SAAWP,GAAAA,YAAAA,EAAAa,IAAKC,GACfN,EAAAA,KAAC,KAAA,CAECC,UAAU,kHACTF,SAAA,CAASO,EAAAF,YACT,MACE,CAAAL,SAAA,CAASO,EAAAC,iBACPZ,EAAkBa,KAAlB,CAAuBC,OAAO,OAAOR,UAAU,SAC9CF,SAAA,CAAAG,EAAA,IAAC,QAAA,CACCQ,KAAK,SACLN,KAAK,cACLO,MAAOL,EAASM,WAAA,CAAY,EAC9BV,EAAA,IAAC,SAAA,CACCQ,KAAK,SACLN,KAAK,UACLO,MAAM,SACNV,UAAU,wLAAwLF,SAAA,UAAA,CAEpM,CAAA,EACF,SAEDF,EAAgBW,KAAhB,CAAqBC,OAAO,OAAOR,UAAU,cAC5CF,SAAA,CAAAG,EAAA,IAAC,SAAMQ,KAAK,SAASN,KAAK,aAAaO,MAAOL,EAASO,EAAI,CAAA,EAC3DX,EAAA,IAAC,SAAA,CACCQ,KAAK,SACLN,KAAK,UACLO,MAAM,SACNG,SAAUR,EAASC,SACnBN,UAAU,uOACTF,SAAAO,EAASC,SAAW,WAAa,QAAA,CACpC,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,EA9BKD,EAASO,EA+BhB,EAEJ,CAAA,CAAA,CACF,CAAA,EACAX,EAAA,IAAC,MAAI,CAAAD,UAAU,2DACbF,SAAAG,EAAA,IAACa,EAAW,CAAAC,QAAQ,QAAQC,GAAI,mBAAoBlB,SAAA,MAEpD,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAEJ,EACamB,EAAgBC"}