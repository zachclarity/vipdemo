{"version":3,"file":"index.js","sources":["../../app/lib/utils/singleton.server.ts","../../app/repositories/base.server.ts","../../app/repositories/checklist.server.ts","../../app/repositories/checklistItem.server.ts","../../app/repositories/metrics.server.ts","../../app/repositories/organization.server.ts","../../app/repositories/organizationRole.server.ts","../../app/repositories/role.server.ts","../../app/repositories/template.server.ts","../../app/repositories/Repository.server.ts","../../app/repositories/templateItem.server.ts","../../app/lib/constants.ts","../../app/lib/utils/utils.server.ts","../../app/repositories/user.server.ts","../../app/services/db.server.ts","../../app/lib/models.server.ts","../../app/services/session.server.ts","../../app/entry.server.tsx","../../app/components/ui/ErrorReport.tsx","../../node_modules/react-toastify/dist/ReactToastify.css?url","../../app/app.css?url","../../app/root.tsx","../../app/routes/_withNav+/index.tsx","../../app/services/auth.server.ts","../../app/services/cookie.server.ts","../../app/routes/_auth+/login.tsx","../../app/components/OrgCombobox/OrgComboboxSearchResults.tsx","../../app/components/OrgCombobox/OrgComboboxOrgTree.tsx","../../app/components/OrgCombobox/OrgCombobox.tsx","../../app/lib/hooks/useGenerateSearchParams.ts","../../app/components/ui/Buttons.tsx","../../app/components/ui/RichText/Editor/BubbleMenuItems.tsx","../../app/components/ui/RichText/Editor/Context.tsx","../../app/components/ui/RichText/Editor/RichTextEditor.tsx","../../app/components/ui/Input.tsx","../../app/components/ui/forms/RegisterForm.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/.server/manage.queries.ts","../../app/lib/utils/utils.permissions.ts","../../app/lib/utils/index.ts","../../app/routes/_withNav+/_withSideBar+/_manage+/.server/org.queries.ts","../../app/services/user.server.ts","../../app/routes/_withNav+/_withSideBar+/_manage+/user+/.server/user.queries.ts","../../app/routes/_auth+/register.queries.server.ts","../../app/routes/_auth+/register.tsx","../../app/routes/_auth+/signout.tsx","../../app/lib/hooks/usePermissions.ts","../../app/components/ui/MainNavBar.tsx","../../app/routes/_withNav+/_withSideBar+/.server/tasks.queries.ts","../../app/routes/_withNav+/_layout.tsx","../../app/components/ui/Container.tsx","../../app/routes/_withNav+/_noSideBar+/_layout.tsx","../../app/components/Checklist/completeChecklists.tsx","../../app/components/ui/Badge.tsx","../../app/components/ui/Icons.tsx","../../app/lib/hooks/usePagination.tsx","../../app/routes/_withNav+/_noSideBar+/checklist.$itemId+/status.tsx","../../app/components/Checklist/ItemCard.tsx","../../app/components/Checklist/View.tsx","../../app/lib/hooks/useMatchesData.ts","../../app/components/Checklist/inProgressChecklists.tsx","../../app/routes/_withNav+/_noSideBar+/.server/checklist.queries.ts","../../app/routes/_withNav+/_noSideBar+/checklist.tsx","../../app/components/Checklist/Slideover/ToggleCompleteButton.tsx","../../app/components/Checklist/Slideover/Buttons.tsx","../../app/routes/_withNav+/_noSideBar+/checklist.$itemId+/_layout.tsx","../../app/lib/hooks/useInView.ts","../../app/components/ui/Message.tsx","../../app/routes/_withNav+/_noSideBar+/checklist.$itemId+/comments.tsx","../../app/components/ui/RichText/Viewer/RichTextViewer.tsx","../../app/routes/_withNav+/_noSideBar+/checklist.$itemId+/index.tsx","../../app/components/Metrics/MetricsTable.tsx","../../app/components/Metrics/MetricsBox.tsx","../../app/components/Metrics/AwaitedMetrics.tsx","../../app/components/ui/Headers.tsx","../../app/components/ui/PageHeader.tsx","../../app/routes/_withNav+/_noSideBar+/.server/metrics.queries.ts","../../app/routes/_withNav+/_noSideBar+/metrics.tsx","../../app/components/ui/forms/Password.tsx","../../app/components/Text/PasswordRecommendation.tsx","../../app/components/ui/forms/ProfileForm.tsx","../../app/routes/_withNav+/_noSideBar+/.server/profile.queries.ts","../../app/routes/_withNav+/_noSideBar+/profile.tsx","../../app/routes/_withNav+/_withSideBar+/_layout.tsx","../../app/components/SideBar/SidebarLink.tsx","../../app/components/SideBar/Nav.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/_layout.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/.server/base.queries.ts","../../app/routes/_withNav+/_withSideBar+/_manage+/base.tsx","../../app/components/ui/Form.tsx","../../app/components/ui/Label.tsx","../../app/components/ui/modals/Modal.tsx","../../app/components/ui/modals/UserMoveModal.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/base.$baseId.add.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/base.$baseId.edit.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/base.create.tsx","../../app/components/OrgTreeView/index.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/org.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/org.$orgId.delete.tsx","../../app/components/OrgBreadcrumbs/context/BreadcrumbContext.tsx","../../app/components/OrgBreadcrumbs/utils/getDisplayName.ts","../../app/components/OrgBreadcrumbs/components/OrganizationSelect.tsx","../../app/components/OrgBreadcrumbs/components/SelectOption.tsx","../../app/components/OrgBreadcrumbs/components/Crumb.tsx","../../app/components/OrgBreadcrumbs/components/Breadcrumbs.tsx","../../app/lib/hooks/useIsAdmin.ts","../../app/routes/_withNav+/_withSideBar+/_manage+/org.$orgId.edit.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/org.create.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/org_.$orgId.completed.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/.server/role.queries.ts","../../app/routes/_withNav+/_withSideBar+/_manage+/.server/template.queries.ts","../../app/routes/_withNav+/_withSideBar+/_manage+/org_.$orgId.inbound.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/org_.$orgId.inprocess.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/org_.$orgId.inprocess_.$checklistId.view.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/org_.$orgId.outbound.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/.server/move.queries.ts","../../app/routes/_withNav+/_withSideBar+/_manage+/org_.$orgId.outbound.$userId.edit.tsx","../../app/components/Controls/SupervisorExport.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/org_.$orgId.supervisors.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/role.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/role.$roleId.delete.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/role.$roleId.edit.tsx","../../app/components/OrgRole/Users/Skeletons.tsx","../../app/components/OrgRoleUserSelect/OrgRoleUserSelect.tsx","../../app/components/OrgRole/Users/AssignUserSelect.tsx","../../app/components/OrgRole/Users/UserList/UserListItem.tsx","../../app/components/OrgRole/Users/UserList/UserList.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/role.$roleId.users.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/role.create.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/role_.custom.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/role_.permissions.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/role_.permissions.$roleId.tsx","../../app/components/ui/table/Table.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/template.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/template.create.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/template_.$templateId.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/template_.$templateId.edit.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/template_.$templateId.item.$itemId.edit.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/template_.$templateId.item.create.tsx","../../app/lib/hooks/useFilteredUsers.ts","../../app/routes/_withNav+/_withSideBar+/_manage+/template_.assign.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/template_.assign.$userId.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/user+/_.$userId.checklist.$checklistId.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/user+/_.create.tsx","../../app/components/ui/ActionMenu.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/user+/_.onboard.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/user+/_.onboard.$userId.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/user+/_.onboard.delete.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/user+/_layout.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/user+/$userId.delete.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/user+/$userId.edit.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/user+/$userId.move.edit.tsx","../../app/routes/_withNav+/_withSideBar+/_manage+/user+/$userId.move.start.tsx","../../app/routes/_withNav+/_withSideBar+/tasks.tsx","../../app/components/Tasks/FilterSortMenus.tsx","../../app/lib/hooks/useFilterAndSort.tsx","../../app/components/Tasks/ChatIcon.tsx","../../app/components/Tasks/TaskItem.tsx","../../app/components/Tasks/TaskList.tsx","../../app/routes/_withNav+/_withSideBar+/tasks.$orgRoleId.tsx","../../app/routes/_withNav+/_withSideBar+/tasks.$orgRoleId.$taskId.comments.tsx","../../app/routes/_withNav+/_withSideBar+/tasks.$orgRoleId.$taskId.deny.tsx","../../app/routes/_withNav+/_withSideBar+/tasks.$orgRoleId.edit.tsx","../../app/routes/_withNav+/_withSideBar+/tasks.index.tsx"],"sourcesContent":["// Since the dev server re-requires the bundle, do some shenanigans to make\n// certain things persist across that ðŸ˜†\n// Borrowed/modified from https://github.com/jenseng/abuse-the-platform/blob/2993a7e846c95ace693ce61626fa072174c8d9c7/app/utils/singleton.ts and\n// https://github.com/remix-run/examples/blob/552edc2cb10fbad48944d9c87faef5d792025cd0/_official-jokes/app/utils/singleton.server.ts#L5\n\nexport const singleton = <Value>(\n  name: string,\n  valueFactory: () => Value\n): Value => {\n  const g = global as any;\n  g.__singletons ??= {};\n  g.__singletons[name] ??= valueFactory();\n  return g.__singletons[name];\n};\n","import type { Base, PrismaClient } from '@prisma/client';\nimport type { BaseCreateDto, BaseUpdateDto } from './dtos';\nimport type { IRepository } from './Repository.server';\n\ninterface IBaseRepository extends IRepository<Base, BaseCreateDto, BaseUpdateDto> {\n  getAllWithOrgs(): Promise<any>;\n  getWithOrgs(id: string): Promise<any>;\n}\n\nexport class BaseRepository implements IBaseRepository {\n  public prisma: PrismaClient;\n\n  constructor(prisma: PrismaClient) {\n    this.prisma = prisma;\n  }\n\n  async getAll() {\n    return this.prisma.base.findMany();\n  }\n\n  async get(id: string) {\n    return this.prisma.base.findFirstOrThrow({\n      where: {\n        id,\n      },\n    });\n  }\n\n  public async getAllWithOrgs() {\n    return this.prisma.organization.findMany({\n      where: {\n        isBase: true,\n      },\n      include: {\n        assignedOrganizations: true,\n      },\n    });\n  }\n\n  public async getWithOrgs(id: string) {\n    return this.prisma.base.findFirstOrThrow({\n      where: {\n        id,\n      },\n      include: {\n        organizations: true,\n      },\n    });\n  }\n\n  async create(data: BaseCreateDto): Promise<string> {\n    return (\n      await this.prisma.base.create({\n        data: {\n          name: data.name,\n          createdAt: data.createdAt,\n          updatedAt: data.updatedAt,\n          createdById: data.createdBy,\n          updatedById: data.updatedBy,\n        },\n        select: {\n          id: true,\n        },\n      })\n    ).id;\n  }\n\n  async update(id: string, data: Partial<BaseUpdateDto>) {\n    await this.prisma.base.update({\n      where: {\n        id,\n      },\n      data: {\n        name: data.name,\n        updatedAt: data.updatedAt,\n        updatedById: data.updatedBy,\n      },\n    });\n  }\n\n  async delete(id: string) {\n    await this.prisma.base.delete({ where: { id } });\n  }\n}\n","/* eslint-disable import/prefer-default-export */\nimport type { ChecklistWithItems } from '@lib/constants';\nimport type {\n  OrganizationWithSubAndMembers,\n  OrgMemberChecklist,\n} from '@lib/types';\nimport {\n  ChecklistStatus,\n  Prisma} from '@prisma/client';\nimport type {\n  ChecklistItemStatus,\n  Checklist,\n  ChecklistItem,\n  PrismaClient,\n} from '@prisma/client';\nimport type { ChecklistDto } from './dtos';\nimport type { IRepository } from './Repository.server';\n\ntype Contact = {\n  phone: string;\n  email: string;\n};\n\ntype Role = {\n  name: string;\n  abbreviation: string;\n  contact: Contact;\n};\n\ntype ItemComment = {\n  id: number;\n  message: string | null;\n  postedById: string | null;\n  postedBy: { name: string } | null;\n  datePosted: string;\n  readBy: string[];\n  isDenied: boolean;\n};\n\ntype ChecklistItemResponse = {\n  id: string;\n  templateItemId: string;\n  name: string;\n  description: string;\n  checklistId: string;\n  userComplete: boolean;\n  isComplete: boolean;\n  isDenied: boolean;\n  dateCompleted: string | null;\n  completedById: string | null;\n  completedBy?: { name: string };\n  updatedById: string | null;\n  createdAt: string;\n  updatedAt: string;\n  forDormResidents: boolean;\n  forHasDependents: boolean;\n  forHasEFMP: boolean;\n  role: Role;\n  comments: ItemComment[];\n  status: ChecklistItemStatus;\n  reference: {\n    name: string | null;\n    description: string | null;\n  };\n};\n\nexport type GetUserChecklistsResponse = Array<{\n  id: string;\n  isComplete: boolean;\n  dateCompleted: string;\n  name: string;\n  description: string;\n  createdAt: string;\n  items: ChecklistItemResponse[];\n}>;\n\ninterface IChecklistRepository\n  extends IRepository<Checklist, ChecklistDto, ChecklistDto> {\n  getAllInUsers(): void;\n\n  getUsers(): void;\n\n  getWithItems(id: string): Promise<any>;\n\n  getUserChecklists(userId: string): Promise<GetUserChecklistsResponse>;\n\n  getByUserAndTemplate(userId: string, templateId: string): Promise<any>;\n\n  getChildOrgChecklists(orgId: string): Promise<OrgMemberChecklist[]>;\n\n  countAll(): Promise<number>;\n}\n\nexport class ChecklistRepository implements IChecklistRepository {\n  public prisma;\n\n  constructor(prismaClient: PrismaClient) {\n    this.prisma = prismaClient;\n  }\n\n  public getAllInUsers() {\n    throw new Error('Method not implemented.');\n  }\n\n  public getUsers() {\n    throw new Error('Method not implemented.');\n  }\n\n  public async getAll(): Promise<Checklist[]> {\n    throw new Error('Method not implemented.');\n  }\n\n  public async getChecklistItems(id: string) {\n    return this.prisma.checklist.findFirstOrThrow({\n      where: { id },\n      include: {\n        user: true,\n        items: {\n          orderBy: {\n            isComplete: 'asc',\n          },\n          include: {\n            templateItem: {\n              include: { requiredRole: true , reference: true},\n            },\n          },\n        },\n      },\n    });\n  }\n  public async getChecklistsCount(templateId: string) {\n    return this.prisma.checklist.count({\n      where: {\n        templateId: templateId,\n        isComplete: false,\n      },\n    });\n  }\n\n  public async create({\n    templateId,\n    templateItems,\n    assignedById,\n    userId,\n    name,\n  }: ChecklistDto): Promise<string> {\n    const userItems = templateItems.map((item) => ({\n      updatedAt: new Date(Date.now()),\n      templateItemId: item.uuid,\n    }));\n\n    return (\n      await this.prisma.checklist.create({\n        data: {\n          userId,\n          updatedAt: new Date(Date.now()),\n          assignedById,\n          name,\n          templateId,\n          items: {\n            createMany: {\n              data: userItems,\n            },\n          },\n        },\n        select: {\n          id: true,\n        },\n      })\n    ).id;\n  }\n\n  public async update(id: string, data: ChecklistDto): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  // @ts-ignore\n  public async delete(id: string, userId: string): Promise<void> {\n    const items = await this.prisma.checklistItem.findMany({\n      where: {\n        checklistId: id,\n      },\n    });\n\n    const deleteChecklist = this.prisma.checklist.delete({\n      where: {\n        id,\n      },\n    });\n\n    const updateUser = this.prisma.userProfile.update({\n      where: { id: userId },\n      data: {\n        moveType: null,\n        updatedAt: new Date(Date.now()),\n      },\n    });\n\n    if (items.length > 0) {\n      const deleteItems = this.prisma.checklistItem.deleteMany({\n        where: {\n          id: {\n            in: items.map((item: ChecklistItem) => item.id),\n          },\n        },\n      });\n\n      await this.prisma.$transaction([\n        deleteItems,\n        deleteChecklist,\n        updateUser,\n      ]);\n      return;\n    }\n\n    await this.prisma.$transaction([deleteChecklist, updateUser]);\n  }\n\n  public async getWithItems(id: string) {\n    return this.prisma.checklist.findFirstOrThrow({\n      where: { id },\n      include: {\n        items: true,\n      },\n    });\n  }\n\n  public async getUserChecklists(userId: string) {\n    // Need to finish migration to new many to many org -> roles w/ orgsroles table\n    const newQuery = Prisma.sql`\n        WITH checklist_items AS (SELECT ci.id                                     AS ci_id,\n                                        ci.\"templateItemId\"                       AS ci_template_item_id,\n                                        ci.\"checklistId\"                          AS checklist_id,\n                                        ci.\"userComplete\"                         AS ci_user_complete,\n                                        ci.\"isComplete\"                           AS ci_is_complete,\n                                        ci.\"dateCompleted\"                        AS ci_date_completed,\n                                        ci.\"completedById\"                        AS ci_completed_by_id,\n                                        ci.\"updatedById\"                          AS ci_updated_by_id,\n                                        ci.\"createdAt\"                            AS ci_created_at,\n                                        ci.\"updatedAt\"                            AS ci_updated_at,\n                                        ci.\"isDenied\" AS ci_is_denied,\n                                        ci.\"status\" AS ci_status,\n                                        ti.name                                   AS ti_name,\n                                        tiRef.name                                AS tiRef_name,\n                                        tiRef.description                         AS tiRef_desc,\n                                        ti.description                            AS ti_description,\n                                        ti.\"forDormResidents\"                     AS ti_dorm,\n                                        ti.\"forHasDependents\"                     AS ti_depend,\n                                        ti.\"forHasEFMP\"                           AS ti_efmp,\n                                        r.name                                    AS r_name,\n                                        r.abbreviation                            AS r_abbrev,\n                                        osrs.\"contactEmail\"                       AS role_email,\n                                        osrs.\"contactPhone\"                       AS role_phone,\n                                        (SELECT json_agg(\n                                                        json_build_object(\n                                                                'id', cic.id,\n                                                                'postedById', cic.\"postedById\",\n                                                                'message', cic.message,\n                                                                'datePosted', cast(cic.\"datePosted\" AS varchar) || 'Z',\n                                                                'checklistItemId', cic.\"checklistItemId\",\n                                                                'internal', cic.internal,\n                                                                'postedBy', json_build_object(\n                                                                        'name', cic.name\n                                                                            ),\n                                                                'readBy', cic.\"readBy\"\n                                                        )\n                                                )\n                                         FROM (SELECT cic.id,\n                                                      cic.\"postedById\",\n                                                      cic.message,\n                                                      cic.\"datePosted\",\n                                                      cic.\"checklistItemId\",\n                                                      cic.internal,\n                                                      cic.\"readBy\",\n                                                      profile.name\n                                               FROM \"ChecklistItemComments\" cic\n                                                        LEFT JOIN \"UserProfile\" profile ON cic.\"postedById\" = profile.id\n                                               WHERE cic.internal = false\n                                                 AND cic.\"checklistItemId\" = ci.id\n                                               ORDER BY cic.\"datePosted\") AS cic) AS comments\n                                 FROM \"ChecklistItem\" AS ci\n                                          JOIN \"Checklist\" c on c.id = ci.\"checklistId\"\n                                          JOIN \"Template\" t ON t.id = c.\"templateId\"\n                                          JOIN \"UserProfile\" u ON c.\"userId\" = u.id\n                                          JOIN \"TemplateItem\" ti ON ci.\"templateItemId\" = ti.uuid\n                                          LEFT JOIN \"TemplateItem\" tiRef ON tiRef.uuid = ti.\"referenceId\"\n                                          JOIN \"Role\" r ON ti.\"requiredRoleId\" = r.uuid\n                                          JOIN \"OrganizationsRoles\" osrs\n                                               ON CASE WHEN r.level = 'UNIT' THEN osrs.\"organizationId\" = t.\"organizationId\" AND osrs.\"roleId\" = r.uuid ELSE osrs.\"roleId\" = r.uuid END\n                                 WHERE u.id = ${ userId }\n                                 GROUP BY ci.id, ci.\"templateItemId\", ci.\"checklistId\", ci.\"userComplete\",\n                                          ci.\"isComplete\", ci.\"dateCompleted\", ci.\"completedById\", ci.\"updatedById\",\n                                          ci.\"createdAt\", ci.\"updatedAt\", tiref.name, tiRef_desc, ti.name,\n                                          ti.description, ti.\"forDormResidents\", ti.\"forHasDependents\", ti.\"forHasEFMP\",\n                                          r.name, r.abbreviation, osrs.\"contactEmail\", osrs.\"contactPhone\")\n        SELECT c.id              AS id,\n               c.\"isComplete\"    AS \"isComplete\",\n               c.\"dateCompleted\" AS \"dateCompleted\",\n               c.\"createdAt\"     AS \"createdAt\",\n               t.\"name\"          AS name,\n               t.\"description\"   AS description,\n               json_agg(\n                       json_build_object(\n                               'id', ci_id,\n                               'templateItemId', ci_template_item_id,\n                               'name', ti_name,\n                               'reference', json_build_object(\n                                       'name', tiRef_name,\n                                       'description', tiRef_desc\n                                            ),\n                               'description', ti_description,\n                               'isDenied', ci_is_denied,\n                               'status', ci_status,\n                               'checklistId', checklist_id,\n                               'userComplete', ci_user_complete,\n                               'isComplete', ci_is_complete,\n                               'dateCompleted', ci_date_completed,\n                               'completedById', ci_completed_by_id,\n                               'updatedById', ci_updated_by_id,\n                               'createdAt', ci_created_at,\n                               'updatedAt', ci_updated_at,\n                               'forDormResidents', ti_dorm,\n                               'forHasDependents', ti_depend,\n                               'forHasEFMP', ti_efmp,\n                               'role',\n                               json_build_object(\n                                       'name', r_name,\n                                       'abbreviation', r_abbrev,\n                                       'contact',\n                                       json_build_object(\n                                               'phone', role_phone,\n                                               'email', role_email\n                                       )\n                               ),\n                               'comments', comments\n                       )\n               )                 AS items\n        FROM \"Checklist\" c\n                 JOIN\n             checklist_items ci ON c.id = ci.checklist_id\n                 JOIN\n             \"Template\" t ON t.id = c.\"templateId\"\n        GROUP BY c.id, c.\"isComplete\", c.\"dateCompleted\", c.\"createdAt\", t.\"name\", t.\"description\";\n    `;\n\n    return this.prisma.$queryRaw<GetUserChecklistsResponse>(newQuery);\n  }\n\n  public async getAllChecklists(): Promise<Checklist[]> {\n    return this.prisma.checklist.findMany();\n  }\n\n  public async getByUserAndTemplate(userId: string, templateId: string) {\n    return this.prisma.checklist.findFirstOrThrow({\n      where: {\n        userId,\n        templateId,\n      },\n      include: {\n        items: true,\n      },\n    });\n  }\n\n  /**\n   * Retrieves checklists for a given organization and its sub-organizations.\n   *\n   * @async\n   * @function getChildOrgChecklists\n   * @param {string} orgId - The ID of the organization to retrieve checklists for.\n   * @returns {Promise<OrganizationWithSubAndMembers['currentMembers'][0]['checklists'][]>} A Promise that resolves to an array of checklists with items and user information.\n   * @throws {Error} If there is an error while fetching the checklists.\n   *\n   * @example\n   * const orgId = \"yourOrgId\";\n   * try {\n   *   const checklists = await getChildOrgChecklists(orgId);\n   *   console.log(checklists);\n   * } catch (error) {\n   *   console.error(`Error fetching checklists: ${error.message}`);\n   * }\n   */\n  public async getChildOrgChecklists(\n    orgId: string\n  ): Promise<OrgMemberChecklist[]> {\n    const topOrg: OrganizationWithSubAndMembers | null =\n      await this.prisma.organization.findFirst({\n        where: { uuid: orgId },\n        select: {\n          subOrgs: {\n            select: {\n              uuid: true,\n            },\n          },\n          currentMembers: {\n            include: {\n              checklists: {\n                include: {\n                  user: {\n                    select: {\n                      id: true,\n                      workEmail: true,\n                      name: true,\n                      rank: true,\n                      currentOrg: {\n                        select: {\n                          id: true,\n                          name: true,\n                          abbreviation: true,\n                        },\n                      },\n                    },\n                  },\n                  items: {\n                    include: {\n                      comments: {\n                        include: {\n                          postedBy: true,\n                        },\n                      },\n                      templateItem: {\n                        include: {\n                          template: true,\n                          requiredRole: true,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      });\n\n    let checklists: OrgMemberChecklist[] = [];\n\n    if (topOrg) {\n      for (const user of topOrg.currentMembers) {\n        if (user.checklists.length > 0) checklists.push(user.checklists);\n      }\n\n      for (const subOrg of topOrg.subOrgs) {\n        const result = await this.getChildOrgChecklists(subOrg.uuid);\n        checklists.push(...result);\n      }\n    }\n\n    return checklists;\n  }\n\n  public async countAll() {\n    return this.prisma.checklist.count({\n      where: { isComplete: false },\n    });\n  }\n\n  public async pause(\n    checklistId: string,\n    userId: string\n  ): Promise<void> {\n\n    await this.prisma.checklist.update({\n      where: { id: checklistId },\n      data: {\n        status: ChecklistStatus.Paused,\n        updatedById: userId,\n        pausedDate: new Date(Date.now()),\n        updatedAt: new Date(Date.now()),\n      },\n    });\n  }\n\n  public async resume(\n    checklistId: string,\n    userId: string\n  ): Promise<void> {\n\n    await this.prisma.checklist.update({\n      where: { id: checklistId },\n      data: {\n        status: ChecklistStatus.InProgress,\n        updatedById: userId,\n        archivedDate: null,\n        isDeleted: false,\n        pausedDate: null,\n        updatedAt: new Date(Date.now()),\n      },\n    });\n  }\n\n  public async archive(\n    checklistId: string,\n    userId: string\n  ): Promise<void> {\n\n    await this.prisma.checklist.update({\n      where: { id: checklistId },\n      data: {\n        status: ChecklistStatus.Archived,\n        updatedById: userId,\n        archivedDate: new Date(Date.now()),\n        updatedAt: new Date(Date.now()),\n      },\n    });\n  }\n\n}\n","import {\n  ChecklistItemStatus,\n  type ChecklistItem,\n  type PrismaClient,\n} from '@prisma/client';\nimport type { ChecklistItemDto } from './dtos';\nimport type { IRepository } from './Repository.server';\n\nexport interface IChecklistItemRepository\n  extends IRepository<ChecklistItem, ChecklistItemDto, ChecklistItemDto> {\n  markComplete(itemId: string, userId: string): Promise<void>;\n\n  markIncomplete(itemId: string, userId: string): Promise<void>;\n\n  getAllItemTimes(): Promise<any>;\n\n  getAllInUsers(): Promise<any>;\n\n  getCompletedCount(): Promise<any>;\n}\n\nexport class ChecklistItemRepository implements IChecklistItemRepository {\n  public prisma: PrismaClient;\n\n  constructor(prisma: PrismaClient) {\n    this.prisma = prisma;\n  }\n\n  public async getAll(): Promise<ChecklistItem[]> {\n    return this.prisma.checklistItem.findMany();\n  }\n\n  public get(id: string): Promise<ChecklistItem> {\n    throw new Error('Method not implemented.');\n  }\n\n  public create(data: ChecklistItemDto): Promise<string> {\n    throw new Error('Method not implemented.');\n  }\n\n  public update(id: string, data: ChecklistItemDto): Promise<never> {\n    throw new Error('Method not implemented.');\n  }\n\n  public delete(id: string): Promise<never> {\n    throw new Error('Method not implemented.');\n  }\n\n  public async getWithComments(\n    id: string,\n    options?: { internalOnly: boolean; orgId: string }\n  ) {\n    const where = options?.internalOnly\n      ? {\n        id,\n        comments: {\n          some: {\n            internal: true,\n          },\n        },\n      }\n      : { id };\n\n    const itemQuery = this.prisma.checklistItem.findFirstOrThrow({\n      where: {\n        id,\n      },\n      include: {\n        completedBy: true,\n        // isDenied: true,\n        templateItem: {\n          include: {\n            requiredRole: {\n              include: {\n                orgRoles: {\n                  where: {\n                    organizationId: options?.orgId,\n                  },\n                },\n              },\n            },\n            reference: true,\n          },\n        },\n        checklist: {\n          include: {\n            user: true,\n          },\n        },\n      },\n    });\n\n    const commentsQuery = this.prisma.checklistItemComments.findMany({\n      where: {\n        checklistItemId: id,\n        internal: options?.internalOnly ?? false,\n      },\n      select: {\n        id: true,\n        postedBy: true,\n        readBy: true,\n        internal: true,\n        checklistItemId: true,\n        datePosted: true,\n        message: true,\n        postedById: true,\n      },\n      orderBy: {\n        datePosted: 'asc',\n      },\n    });\n\n    const transactions: [typeof itemQuery, typeof commentsQuery] = [\n      itemQuery,\n      commentsQuery,\n    ];\n\n    return this.prisma.$transaction(transactions);\n  }\n\n  public async markComplete(\n    itemId: string,\n    userId: string,\n    completedById?: string\n  ): Promise<void> {\n    const item = await this.prisma.checklistItem.update({\n      where: {\n        id: itemId,\n      },\n      data: {\n        completedById: completedById ?? userId,\n        isComplete: true,\n        dateCompleted: new Date(Date.now()),\n        updatedAt: new Date(Date.now()),\n        status: ChecklistItemStatus.Completed,\n      },\n      select: {\n        completedById: true,\n        checklist: {\n          select: {\n            id: true,\n            userId: true,\n            _count: {\n              select: {\n                items: {\n                  where: {\n                    isComplete: false,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n\n    // All checklist items are complete, update the checklist and user move\n    if (item.checklist._count.items === 0) {\n      const checklistUpdate = this.prisma.checklist.update({\n        where: { id: item.checklist.id },\n        data: {\n          isComplete: true,\n          dateCompleted: new Date(Date.now()),\n          updatedAt: new Date(Date.now()),\n        },\n      });\n\n      const userUpdate = this.prisma.userProfile.update({\n        where: { id: item.checklist.userId },\n        data: {\n          moveType: null,\n          nextOrgId: null,\n          updatedAt: new Date(Date.now()),\n        },\n      });\n\n      await this.prisma.$transaction([checklistUpdate, userUpdate]);\n    }\n  }\n\n  public async markIncomplete(\n    itemId: string,\n    userId: string,\n    updatedById?: string\n  ): Promise<void> {\n    const updatedBy = updatedById\n      ? {\n        connect: {\n          id: updatedById,\n        },\n      }\n      : undefined;\n\n    await this.prisma.checklistItem.update({\n      where: {\n        id: itemId,\n      },\n      data: {\n        updatedBy,\n        completedBy: {\n          disconnect: true,\n        },\n        isComplete: false,\n        dateCompleted: null,\n        updatedAt: new Date(Date.now()),\n        status: ChecklistItemStatus.WaitingMember,\n      },\n      select: {\n        checklist: {\n          select: {\n            id: true,\n            _count: {\n              select: {\n                items: {\n                  where: {\n                    isComplete: true,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n\n    // if ( item.checklist._count.items === 0 ) {\n    //   const checklistUpdate = ChecklistRepository.complete( item.checklist.id );\n\n    //   const userUpdate = UserRepository.completeMove( userId );\n\n    //   await this.prisma.$transaction( [ checklistUpdate, userUpdate ] );\n    // }\n  }\n\n  public async getAllItemTimes() {\n    return this.prisma.checklistItem.findMany({\n      select: {\n        createdAt: true,\n        updatedAt: true,\n        dateCompleted: true,\n      },\n    });\n  }\n\n  public async sendMessage(\n    itemId: string,\n    postedById: string,\n    message: string,\n    internal: boolean\n  ): Promise<void> {\n    await this.prisma.checklistItemComments.create({\n      data: {\n        checklistItemId: itemId,\n        postedById: postedById,\n        message: message,\n        datePosted: new Date(Date.now()),\n        internal,\n        readBy: [postedById],\n      },\n    });\n  }\n\n  public async markRead(\n    commentId: number[],\n    postedById: string\n  ): Promise<void> {\n    await this.prisma.checklistItemComments.updateMany({\n      where: {\n        id: {\n          in: commentId,\n        },\n      },\n      data: {\n        readBy: {\n          push: postedById,\n        },\n      },\n    });\n\n    // await this.prisma.checklistItemComments.update({\n    //   where: {\n    //     id: commentId,\n    //   },\n    //   data: {\n    //     readBy: {\n    //       push: postedById,\n    //     },\n    //   },\n    // });\n  }\n\n  public async sendUserMessage(\n    itemId: string,\n    postedById: string,\n    message: string\n  ): Promise<void> {\n    await this.prisma.checklistItemComments.create({\n      data: {\n        checklistItemId: itemId,\n        postedById: postedById,\n        message: message,\n        datePosted: new Date(Date.now()),\n        readBy: { set: [postedById] },\n      },\n    });\n  }\n\n  public async denyTaskWithMessage(\n    itemId: string,\n    postedById: string,\n    message: string\n  ): Promise<void> {\n    const commentCreation = this.prisma.checklistItemComments.create({\n      data: {\n        checklistItemId: itemId,\n        postedById: postedById,\n        message: message === '' ? 'Item Denied' : message,\n        datePosted: new Date(Date.now()),\n        readBy: [postedById],\n      },\n    });\n\n    const changeUserComplete = this.prisma.checklistItem.update({\n      where: {\n        id: itemId,\n      },\n      data: {\n        userComplete: false,\n        isDenied: true,\n        updatedAt: new Date(Date.now()),\n        status: ChecklistItemStatus.Denied,\n      },\n    });\n\n    await this.prisma.$transaction([commentCreation, changeUserComplete]);\n  }\n\n  public async getTaskFromId(taskId: string) {\n    return this.prisma.checklistItem.findFirst({\n      // select: {},\n      where: {\n        id: taskId,\n      },\n      include: {\n        templateItem: true,\n      },\n    });\n  }\n\n  public async userApprovalRequest(itemId: string): Promise<void> {\n    await this.prisma.checklistItem.update({\n      where: {\n        id: itemId,\n      },\n      data: {\n        userComplete: true,\n        updatedAt: new Date(Date.now()),\n        userCompleteDate: new Date(Date.now()),\n        isDenied: false,\n        status: ChecklistItemStatus.WaitingApproval,\n      },\n      select: {\n        checklist: {\n          select: {\n            id: true,\n            _count: {\n              select: {\n                items: {\n                  where: {\n                    userComplete: false,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n\n  public async userApprovalRequestUnMark(itemId: string): Promise<void> {\n    await this.prisma.checklistItem.update({\n      where: {\n        id: itemId,\n      },\n      data: {\n        userComplete: false,\n        updatedAt: new Date(Date.now()),\n        status: ChecklistItemStatus.WaitingMember,\n      },\n      select: {\n        checklist: {\n          select: {\n            id: true,\n            _count: {\n              select: {\n                items: {\n                  where: {\n                    userComplete: true,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n\n  public async getAllInUsers() {\n    return this.prisma.checklist.findMany({\n      where: {\n        isComplete: false,\n      },\n      distinct: ['userId'],\n      select: {\n        userId: true,\n        user: {\n          select: {\n            name: true,\n          },\n        },\n      },\n    });\n  }\n\n  public async getCompletedCount() {\n    return this.prisma.checklistItem.count({\n      select: {\n        _all: true,\n      },\n      where: {\n        isComplete: {\n          equals: true,\n        },\n      },\n    });\n  }\n}\n","import type { PrismaClient } from '@prisma/client';\nimport { composeEventHandlers } from '@remix-run/react/dist/components';\ninterface UserStringsResult {\n  checklists: number;\n  newUsers: number;\n  inprocessing: number;\n  allUsers: number;\n  onTimeChecklist: number;\n  activeTasks: number;\n  lateChecklist: number;\n  overStandardChecklist: number;\n  completedItems: number;\n  rating: string;\n}\n\ninterface OrgStringsResult {\n  checklists: number;\n  newUsers: number;\n  inprocessing: number;\n  allUsers: number;\n  onTimeChecklist: number;\n  activeTasks: number;\n  lateChecklist: number;\n  overStandardChecklist: number;\n  completedItems: number;\n}\nexport class MetricsRepository {\n  public prisma: PrismaClient;\n  public orgId: string = '';\n  public includeChildren = false;\n\n  constructor(prismaClient: PrismaClient) {\n    this.prisma = prismaClient;\n  }\n\n  setOrgId(id: string) {\n    this.orgId = id;\n  }\n\n  setIncludeChildren(flag: boolean) {\n    this.includeChildren = flag;\n  }\n\n  private calculateAverage(averageMillis: number): {\n    days: number;\n    hours: number;\n    minutes: number;\n  } {\n    const days = Math.floor(averageMillis / 86400000);\n    const hours = Math.floor((averageMillis % 86400000) / 3600000);\n    const minutes = Math.floor((averageMillis % 3600000) / 60000);\n\n    return { days, hours, minutes };\n  }\n\n  private async getRecursiveOrgs(\n    orgId = this.orgId,\n    singleFunc: (uuid: string) => Promise<number>\n  ) {\n    const parent = await this.prisma.organization.findFirstOrThrow({\n      where: {\n        uuid: orgId,\n      },\n      include: {\n        children: true,\n      },\n    });\n\n    let result = await singleFunc(parent.uuid);\n    if (parent.children) {\n      for (const org of parent.children) {\n        result += await this.getRecursiveOrgs(org.uuid, singleFunc);\n      }\n    }\n\n    return result;\n  }\n  private async getRecursiveOrgStrings(\n    orgId = this.orgId,\n    singleFunc: (id: string) => Promise<OrgStringsResult>\n  ) {\n    const parent = await this.prisma.organization.findFirstOrThrow({\n      where: {\n        uuid: orgId,\n      },\n      include: {\n        children: true,\n      },\n    });\n\n    let result: OrgStringsResult = await singleFunc(parent.uuid);\n\n    if (parent.children) {\n      for (const org of parent.children) {\n        const childResult: OrgStringsResult = await this.getRecursiveOrgStrings(\n          org.uuid,\n          singleFunc\n        );\n\n        (Object.keys(childResult) as Array<keyof OrgStringsResult>).forEach(\n          (key) => {\n            if (\n              typeof result[key] === 'number' &&\n              typeof childResult[key] === 'number'\n            ) {\n              result[key] += childResult[key];\n            }\n          }\n        );\n      }\n    }\n    return {\n      ...result,\n    };\n  }\n\n  private async getRecursiveOrgsTotal(\n    orgId = this.orgId,\n    singleFunc: (\n      uuid: string,\n    ) => Promise<{ days: number; hours: number; minutes: number }>\n  ): Promise<{ days: number; hours: number; minutes: number }> {\n    const parent = await this.prisma.organization.findFirstOrThrow({\n      where: {\n        uuid: orgId,\n      },\n      include: {\n        children: true,\n      },\n    });\n\n    const result = await singleFunc(parent.uuid);\n\n    let totalTime = {\n      days: result.days,\n      hours: result.hours,\n      minutes: result.minutes,\n    };\n\n    if (parent.children && parent.children.length > 0) {\n      for (const childOrg of parent.children) {\n        const childResult = await this.getRecursiveOrgsTotal(\n          childOrg.uuid,\n          singleFunc\n        );\n\n        totalTime.days += childResult.days;\n        totalTime.hours += childResult.hours;\n        totalTime.minutes += childResult.minutes;\n      }\n    }\n\n    totalTime.hours += Math.floor(totalTime.minutes / 60);\n    totalTime.minutes = totalTime.minutes % 60;\n    totalTime.days += Math.floor(totalTime.hours / 24);\n    totalTime.hours = totalTime.hours % 24;\n\n    return totalTime;\n  }\n  private async getRecursiveOrgsAverage(\n    orgId = this.orgId,\n    singleFunc: (\n      id: string,\n    ) => Promise<{ totalMillis: number; taskCount: number }>\n  ): Promise<{ totalMillis: number; taskCount: number }> {\n    const parent = await this.prisma.organization.findFirstOrThrow({\n      where: { uuid: orgId },\n      include: { children: true },\n    });\n\n    const result = await singleFunc(parent.uuid);\n    let totalMillis = result.totalMillis;\n    let taskCount = result.taskCount;\n\n    if (parent.children && parent.children.length > 0) {\n      for (const childOrg of parent.children) {\n        const childResult = await this.getRecursiveOrgsAverage(\n          childOrg.uuid,\n          singleFunc\n        );\n        totalMillis += childResult.totalMillis;\n        taskCount += childResult.taskCount;\n      }\n    }\n\n    return {\n      totalMillis,\n      taskCount,\n    };\n  }\n  private async getRecursiveSquadronRating(\n    orgId: string,\n    singleFunc: (\n      uuid: string,\n    ) => Promise<{ totalItems: number; completedItems: number }>\n  ): Promise<{ totalItems: number; completedItems: number }> {\n    const parent = await this.prisma.organization.findFirstOrThrow({\n      where: { uuid: orgId },\n      include: { children: true },\n    });\n\n    const result = await singleFunc(parent.uuid);\n    let totalItems = result.totalItems;\n    let completedItems = result.completedItems;\n\n    if (parent.children && parent.children.length > 0) {\n      for (const childOrg of parent.children) {\n        const childResult = await this.getRecursiveSquadronRating(\n          childOrg.uuid,\n          singleFunc\n        );\n        totalItems += childResult.totalItems;\n        completedItems += childResult.completedItems;\n      }\n    }\n\n    return {\n      totalItems,\n      completedItems,\n    };\n  }\n  private async getRecursiveDaysToCompletion(\n    orgId: string\n  ): Promise<{\n    totalItems: number;\n    completedItems: number;\n    completionTime: number;\n  }> {\n    const orgData = await this.getSingleOrgDaysToCompletion(orgId);\n    let { totalItems, completedItems, completionTime } = orgData;\n\n    const childOrgs = await this.prisma.organization.findMany({\n      where: { parentOrgId: orgId },\n      select: { uuid: true },\n    });\n\n    for (const childOrg of childOrgs) {\n      const childData = await this.getRecursiveDaysToCompletion(childOrg.uuid);\n      totalItems += childData.totalItems;\n      completedItems += childData.completedItems;\n      completionTime += childData.completionTime;\n    }\n\n    return { totalItems, completedItems, completionTime: completionTime };\n  }\n\n  async getTotalUserStrings(): Promise<UserStringsResult> {\n    const { activeTasks, completedItems, ...results } = this.includeChildren\n      ? await this.getMultiOrgTotalUserStrings()\n      : await this.getSingleOrgTotalUserStrings();\n\n    const rating = `${(completedItems > 0 && activeTasks > 0 ? (activeTasks / completedItems) * 100 : 0).toFixed(2)}%`;\n\n\n    return { rating, activeTasks, completedItems, ...results };\n  }\n  private async getMultiOrgTotalUserStrings(\n    orgId = this.orgId\n  ): Promise<OrgStringsResult> {\n    return this.getRecursiveOrgStrings(\n      orgId,\n      this.getSingleOrgTotalUserStrings.bind(this)\n    );\n  }\n  private async getSingleOrgTotalUserStrings(\n    orgId = this.orgId\n  ): Promise<OrgStringsResult> {\n    const sevenDaysAgo = new Date();\n    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    const overStandard = new Date();\n    overStandard.setDate(overStandard.getDate() - 60);\n\n    const allUsers = this.prisma.userProfile.findMany({\n      where: {\n        currentOrgId: orgId,\n      },\n      select: {\n        createdAt: true,\n      },\n    });\n    const checklists = this.prisma.checklist.count({\n      where: {\n        isComplete: false,\n        dateCompleted: null,\n        user: {\n          currentOrgId: orgId,\n        },\n      },\n    });\n    const activeTasks = this.prisma.checklistItem.count({\n      where: {\n        isComplete: false,\n        dateCompleted: null,\n        checklist: {\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n      },\n    });\n    const onTimeChecklist = this.prisma.checklist.count({\n      where: {\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n        user: {\n          currentOrgId: orgId,\n        },\n      },\n    });\n    const lateChecklist = this.prisma.checklist.count({\n      where: {\n        createdAt: {\n          lt: thirtyDaysAgo,\n        },\n        user: {\n          currentOrgId: orgId,\n        },\n      },\n    });\n    const overStandardChecklist = this.prisma.checklist.count({\n      where: {\n        createdAt: {\n          lt: overStandard,\n        },\n        user: {\n          currentOrgId: orgId,\n        },\n      },\n    });\n    const inprocessing = this.prisma.checklist.count({\n      where: {\n        isComplete: false,\n        dateCompleted: null,\n        user: {\n          currentOrgId: orgId,\n        },\n      },\n    });\n    const completedItems = this.prisma.checklistItem.count({\n      where: {\n        isComplete: true,\n        checklist: {\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n      },\n    });\n    // const newUsers = allUsers.filter(user => user.createdAt >= sevenDaysAgo);\n\n    const [\n      allUsersResult,\n      checklistsCount,\n      activeTasksCount,\n      onTimeChecklistCount,\n      lateChecklistCount,\n      overStandardChecklistCount,\n      inprocessingCount,\n      completedItemCount,\n    ] = await this.prisma.$transaction([\n      allUsers,\n      checklists,\n      activeTasks,\n      onTimeChecklist,\n      lateChecklist,\n      overStandardChecklist,\n      inprocessing,\n      completedItems,\n    ]);\n\n    return {\n      allUsers: allUsersResult.length,\n      checklists: checklistsCount,\n      activeTasks: activeTasksCount,\n      onTimeChecklist: onTimeChecklistCount,\n      lateChecklist: lateChecklistCount,\n      overStandardChecklist: overStandardChecklistCount,\n      newUsers: allUsersResult.filter((user) => user.createdAt >= sevenDaysAgo)\n        .length,\n      inprocessing: inprocessingCount,\n      completedItems: completedItemCount,\n    };\n  }\n\n  public async getCompletedChecklists() {\n    return this.includeChildren\n      ? this.getMultiOrgCompletedChecklists()\n      : this.getSingleOrgCompletedChecklists();\n  }\n  private async getMultiOrgCompletedChecklists(orgId = this.orgId) {\n    return this.getRecursiveOrgs(\n      orgId,\n      this.getSingleOrgCompletedChecklists.bind(this)\n    );\n  }\n  private async getSingleOrgCompletedChecklists(orgId = this.orgId) {\n    return this.prisma.checklist.count({\n      where: {\n        isComplete: true,\n        dateCompleted: {\n          not: null,\n        },\n        user: {\n          currentOrgId: orgId,\n        },\n      },\n    });\n  }\n\n  public async getCompletedTasks() {\n    return this.includeChildren\n      ? this.getMultiOrgCompletedTasks()\n      : this.getSingleOrgCompletedTasks();\n  }\n  private async getMultiOrgCompletedTasks(orgId = this.orgId) {\n    return this.getRecursiveOrgs(\n      orgId,\n      this.getSingleOrgCompletedTasks.bind(this)\n    );\n  }\n  private async getSingleOrgCompletedTasks(orgId = this.orgId) {\n    return this.prisma.checklistItem.count({\n      where: {\n        isComplete: true,\n        dateCompleted: {\n          not: null,\n        },\n        checklist: {\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n      },\n    });\n  }\n\n  public async getAllChecklists() {\n    return this.includeChildren\n      ? this.getMultiOrgAllChecklists()\n      : this.getSingleOrgAllChecklists();\n  }\n  private async getMultiOrgAllChecklists(orgId = this.orgId) {\n    return this.getRecursiveOrgs(\n      orgId,\n      this.getSingleOrgAllChecklists.bind(this)\n    );\n  }\n  private async getSingleOrgAllChecklists(orgId = this.orgId) {\n    return this.prisma.checklist.count({\n      where: {\n        isComplete: false,\n        isDeleted: false,\n        user: {\n          currentOrgId: orgId,\n        },\n      },\n    });\n  }\n\n  public async getAllTemplates() {\n    return this.includeChildren\n      ? this.getMultiOrgAllTemplates()\n      : this.getSingleOrgAllTemplates();\n  }\n  private async getMultiOrgAllTemplates(orgId = this.orgId) {\n    return this.getRecursiveOrgs(\n      orgId,\n      this.getSingleOrgAllTemplates.bind(this)\n    );\n  }\n  private async getSingleOrgAllTemplates(orgId = this.orgId) {\n    return this.prisma.template.count({\n      where: {\n        organizationId: orgId,\n      },\n    });\n  }\n\n  public async getAllRoles() {\n    return this.includeChildren\n      ? this.getMultiOrgAllRoles()\n      : this.getSingleOrgAllRoles();\n  }\n  private async getMultiOrgAllRoles(orgId = this.orgId) {\n    return this.getRecursiveOrgs(orgId, this.getSingleOrgAllRoles.bind(this));\n  }\n  private async getSingleOrgAllRoles(orgId = this.orgId) {\n    return this.prisma.organizationsRoles.count({\n      where: {\n        organizationId: orgId,\n      },\n    });\n  }\n\n  public async getInprocessedMembers() {\n    return this.includeChildren\n      ? this.getMultiOrgInprocessedMembers()\n      : this.getSingleOrgInprocessedMembers();\n  }\n  private async getMultiOrgInprocessedMembers(orgId = this.orgId) {\n    return this.getRecursiveOrgs(\n      orgId,\n      this.getSingleOrgInprocessedMembers.bind(this)\n    );\n  }\n  private async getSingleOrgInprocessedMembers(orgId = this.orgId) {\n    return this.prisma.checklist\n      .groupBy({\n        by: ['userId'],\n        where: {\n          isComplete: true,\n          dateCompleted: {\n            not: null,\n          },\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n        _count: {\n          _all: true,\n        },\n      })\n      .then((groups) => groups.length);\n  }\n\n  public async getInprocessingMembers() {\n    return this.includeChildren\n      ? this.getMultiOrgInprocessingMembers()\n      : this.getSingleOrgInprocessingMembers();\n  }\n  private async getMultiOrgInprocessingMembers(orgId = this.orgId) {\n    return this.getRecursiveOrgs(\n      orgId,\n      this.getSingleOrgInprocessingMembers.bind(this)\n    );\n  }\n  private async getSingleOrgInprocessingMembers(orgId = this.orgId) {\n    return this.prisma.checklist\n      .groupBy({\n        by: ['userId'],\n        where: {\n          isComplete: false,\n          isDeleted: false,\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n        _count: {\n          _all: true,\n        },\n      })\n      .then((groups) => groups.length);\n  }\n\n  public async getTotalInprocessingTime() {\n    return this.includeChildren\n      ? this.getMultiOrgTotalInprocessingTime()\n      : this.getSingleOrgTotalInprocessingTime();\n  }\n  private async getMultiOrgTotalInprocessingTime(orgId = this.orgId) {\n    return this.getRecursiveOrgsTotal(\n      orgId,\n      this.getSingleOrgTotalInprocessingTime.bind(this)\n    );\n  }\n  private async getSingleOrgTotalInprocessingTime(orgId = this.orgId) {\n    const checklists = await this.prisma.checklist.findMany({\n      where: {\n        isDeleted: false,\n        dateCompleted: { not: null },\n        user: {\n          currentOrgId: orgId,\n        },\n      },\n      select: {\n        createdAt: true,\n        dateCompleted: true,\n      },\n    });\n\n    if (checklists.length === 0) {\n      return {\n        days: 0,\n        hours: 0,\n        minutes: 0,\n      };\n    }\n\n    const totalProcessingTime = checklists.reduce((total, checklist) => {\n      const startTime = new Date(checklist.createdAt).getTime();\n      const endTime = new Date(checklist.dateCompleted!).getTime();\n\n      const processingTime = endTime - startTime;\n      return total + processingTime;\n    }, 0);\n\n    const totalProcessingDays = Math.floor(\n      totalProcessingTime / (1000 * 60 * 60 * 24)\n    );\n    const totalProcessingHours = Math.floor(\n      (totalProcessingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n    );\n    const totalProcessingMinutes = Math.floor(\n      (totalProcessingTime % (1000 * 60 * 60)) / (1000 * 60)\n    );\n\n    return {\n      days: totalProcessingDays,\n      hours: totalProcessingHours,\n      minutes: totalProcessingMinutes,\n    };\n  }\n\n  public async getAllChecklistItems() {\n    return this.includeChildren\n      ? this.getMultiOrgAllChecklistItems()\n      : this.getSingleOrgAllChecklistItems();\n  }\n  private async getMultiOrgAllChecklistItems(orgId = this.orgId) {\n    return this.getRecursiveOrgs(\n      orgId,\n      this.getSingleOrgAllChecklistItems.bind(this)\n    );\n  }\n  private async getSingleOrgAllChecklistItems(orgId = this.orgId) {\n    return this.prisma.checklistItem.count({\n      where: {\n        isComplete: false,\n        isDeleted: false,\n        checklist: {\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n      },\n    });\n  }\n\n  public async getAverageTaskTime(): Promise<{\n    days: number;\n    hours: number;\n    minutes: number;\n  }> {\n    return this.includeChildren\n      ? this.getMultiOrgAverageTaskTime()\n      : this.getSingleOrgAverageTaskTime(this.orgId).then((result) => {\n        const averageMillis = result.totalMillis / result.taskCount;\n\n        const averageDays = Math.floor(averageMillis / 86400000);\n        const averageHours = Math.floor((averageMillis % 86400000) / 3600000);\n        const averageMinutes = Math.floor((averageMillis % 3600000) / 60000);\n\n        return {\n          days: !isNaN(averageDays) ? averageDays : 0,\n          hours: !isNaN(averageHours) ? averageHours : 0,\n          minutes: !isNaN(averageMinutes) ? averageMinutes : 0,\n        };\n      });\n  }\n  private async getMultiOrgAverageTaskTime(\n    orgId = this.orgId\n  ): Promise<{ days: number; hours: number; minutes: number }> {\n    const { totalMillis, taskCount } = await this.getRecursiveOrgsAverage(\n      orgId,\n      this.getSingleOrgAverageTaskTime.bind(this)\n    );\n\n    if (taskCount === 0) {\n      return { days: 0, hours: 0, minutes: 0 };\n    }\n\n    const averageMillis = totalMillis / taskCount;\n\n    return this.calculateAverage(averageMillis);\n  }\n  private async getSingleOrgAverageTaskTime(\n    orgId = this.orgId\n  ): Promise<{ totalMillis: number; taskCount: number }> {\n    const completedTasks = await this.prisma.checklistItem.findMany({\n      where: {\n        isComplete: true,\n        dateCompleted: {},\n        checklist: {\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n      },\n      select: {\n        createdAt: true,\n        dateCompleted: true,\n      },\n    });\n\n    if (completedTasks.length === 0) {\n      return { totalMillis: 0, taskCount: 0 };\n    }\n\n    const totalCompletionTime = completedTasks.reduce((total, task) => {\n      if (task.dateCompleted) {\n        const completionTime =\n          new Date(task.dateCompleted).getTime() -\n          new Date(task.createdAt).getTime();\n        return total + completionTime;\n      }\n      return total;\n    }, 0);\n\n    return {\n      totalMillis: totalCompletionTime,\n      taskCount: completedTasks.length,\n    };\n  }\n\n  public async getAverageUserEngagement(): Promise<{\n    days: number;\n    hours: number;\n    minutes: number;\n  }> {\n    return this.includeChildren\n      ? this.getMultiOrgAverageUserEngagement()\n      : this.getSingleOrgAverageUserEngagement(this.orgId).then((result) => {\n        const averageMillis = result.totalMillis / result.taskCount;\n\n        const averageDays = Math.floor(averageMillis / 86400000);\n        const averageHours = Math.floor((averageMillis % 86400000) / 3600000);\n        const averageMinutes = Math.floor((averageMillis % 3600000) / 60000);\n\n        return {\n          days: !isNaN(averageDays) ? averageDays : 0,\n          hours: !isNaN(averageHours) ? averageHours : 0,\n          minutes: !isNaN(averageMinutes) ? averageMinutes : 0,\n        };\n      });\n  }\n  private async getMultiOrgAverageUserEngagement(\n    orgId = this.orgId\n  ): Promise<{ days: number; hours: number; minutes: number }> {\n    const { totalMillis, taskCount } = await this.getRecursiveOrgsAverage(\n      orgId,\n      this.getSingleOrgAverageUserEngagement.bind(this)\n    );\n\n    if (taskCount === 0) {\n      return { days: 0, hours: 0, minutes: 0 };\n    }\n\n    const averageMillis = totalMillis / taskCount;\n\n    return this.calculateAverage(averageMillis);\n  }\n  private async getSingleOrgAverageUserEngagement(\n    orgId = this.orgId\n  ): Promise<{ totalMillis: number; taskCount: number }> {\n    const completedTasks = await this.prisma.checklistItem.findMany({\n      where: {\n        userComplete: true,\n        userCompleteDate: {\n          not: null,\n        },\n        checklist: {\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n      },\n      select: {\n        createdAt: true,\n        userCompleteDate: true,\n      },\n    });\n\n    const validTasks = completedTasks.filter(\n      (task) => task.createdAt != null && task.userCompleteDate != null\n    );\n\n    if (validTasks.length === 0) {\n      return { totalMillis: 0, taskCount: 0 };\n    }\n\n    const totalEngagementTime = validTasks.reduce((total, task) => {\n      const createdAt = task.createdAt ? new Date(task.createdAt).getTime() : 0;\n      const userCompleteDate = task.userCompleteDate\n        ? new Date(task.userCompleteDate).getTime()\n        : 0;\n      const engagementTime = userCompleteDate - createdAt;\n      return total + engagementTime;\n    }, 0);\n\n    return {\n      totalMillis: totalEngagementTime,\n      taskCount: validTasks.length,\n    };\n  }\n\n  public async getAverageAdminEngagement(): Promise<{\n    days: number;\n    hours: number;\n    minutes: number;\n  }> {\n    return this.includeChildren\n      ? this.getMultiOrgAverageAdminEngagement()\n      : this.getSingleOrgAverageAdminEngagement(this.orgId).then((result) => {\n        const averageMillis = result.totalMillis / result.taskCount;\n\n        const averageDays = Math.floor(averageMillis / 86400000);\n        const averageHours = Math.floor((averageMillis % 86400000) / 3600000);\n        const averageMinutes = Math.floor((averageMillis % 3600000) / 60000);\n\n        return {\n          days: !isNaN(averageDays) ? averageDays : 0,\n          hours: !isNaN(averageHours) ? averageHours : 0,\n          minutes: !isNaN(averageMinutes) ? averageMinutes : 0,\n        };\n      });\n  }\n  private async getMultiOrgAverageAdminEngagement(\n    orgId = this.orgId\n  ): Promise<{ days: number; hours: number; minutes: number }> {\n    const { totalMillis, taskCount } = await this.getRecursiveOrgsAverage(\n      orgId,\n      this.getSingleOrgAverageAdminEngagement.bind(this)\n    );\n\n    if (taskCount === 0) {\n      return { days: 0, hours: 0, minutes: 0 };\n    }\n\n    const averageMillis = totalMillis / taskCount;\n\n    return this.calculateAverage(averageMillis);\n  }\n  private async getSingleOrgAverageAdminEngagement(\n    orgId = this.orgId\n  ): Promise<{ totalMillis: number; taskCount: number }> {\n    const completedTasks = await this.prisma.checklistItem.findMany({\n      where: {\n        isComplete: true,\n        dateCompleted: {\n          not: null,\n        },\n        checklist: {\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n      },\n      select: {\n        createdAt: true,\n        dateCompleted: true,\n      },\n    });\n\n    const validTasks = completedTasks.filter(\n      (task) => task.createdAt != null && task.dateCompleted != null\n    );\n\n    if (validTasks.length === 0) {\n      return { totalMillis: 0, taskCount: 0 };\n    }\n\n    const totalEngagementTime = validTasks.reduce((total, task) => {\n      const createdAt = task.createdAt ? new Date(task.createdAt).getTime() : 0;\n      const dateCompleted = task.dateCompleted\n        ? new Date(task.dateCompleted).getTime()\n        : 0;\n      const engagementTime = dateCompleted - createdAt;\n      return total + engagementTime;\n    }, 0);\n\n    return {\n      totalMillis: totalEngagementTime,\n      taskCount: validTasks.length,\n    };\n  }\n\n  public async getAverageChecklistTime(): Promise<{\n    days: number;\n    hours: number;\n    minutes: number;\n  }> {\n    return this.includeChildren\n      ? this.getMultiOrgAverageChecklistTime()\n      : this.getSingleOrgAverageChecklistTime(this.orgId).then((result) => {\n        const averageMillis = result.totalMillis / result.taskCount;\n\n        const averageDays = Math.floor(averageMillis / 86400000);\n        const averageHours = Math.floor((averageMillis % 86400000) / 3600000);\n        const averageMinutes = Math.floor((averageMillis % 3600000) / 60000);\n\n        return {\n          days: !isNaN(averageDays) ? averageDays : 0,\n          hours: !isNaN(averageHours) ? averageHours : 0,\n          minutes: !isNaN(averageMinutes) ? averageMinutes : 0,\n        };\n      });\n  }\n  private async getMultiOrgAverageChecklistTime(\n    orgId = this.orgId\n  ): Promise<{ days: number; hours: number; minutes: number }> {\n    const { totalMillis, taskCount } = await this.getRecursiveOrgsAverage(\n      orgId,\n      this.getSingleOrgAverageChecklistTime.bind(this)\n    );\n\n    if (taskCount === 0) {\n      return { days: 0, hours: 0, minutes: 0 };\n    }\n\n    const averageMillis = totalMillis / taskCount;\n\n    return this.calculateAverage(averageMillis);\n  }\n  private async getSingleOrgAverageChecklistTime(\n    orgId = this.orgId\n  ): Promise<{ totalMillis: number; taskCount: number }> {\n    const completedChecklists = await this.prisma.checklist.findMany({\n      where: {\n        isComplete: true,\n        dateCompleted: {\n          not: null,\n        },\n        user: {\n          currentOrgId: orgId,\n        },\n      },\n      select: {\n        createdAt: true,\n        dateCompleted: true,\n      },\n    });\n\n    if (completedChecklists.length === 0) {\n      return { totalMillis: 0, taskCount: 0 };\n    }\n\n    const totalCompletionTime = completedChecklists.reduce(\n      (total, checklist) => {\n        if (checklist.dateCompleted) {\n          const completionTime =\n            new Date(checklist.dateCompleted).getTime() -\n            new Date(checklist.createdAt).getTime();\n          return total + completionTime;\n        }\n        return total;\n      },\n      0\n    );\n\n    return {\n      totalMillis: totalCompletionTime,\n      taskCount: completedChecklists.length,\n    };\n  }\n\n  public async getAverageOverdueChecklist(): Promise<{\n    days: number;\n    hours: number;\n    minutes: number;\n  }> {\n    return this.includeChildren\n      ? this.getMultiOrgAverageOverdueChecklistTime(this.orgId)\n      : this.getSingleOrgAverageOverdueChecklistTime(this.orgId).then(\n        (result) => {\n          const averageMillis = result.totalMillis / result.taskCount;\n\n          const averageDays = Math.floor(\n            averageMillis / (1000 * 60 * 60 * 24)\n          ); // 1 day = 86400000 ms\n          const averageHours = Math.floor(\n            (averageMillis % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n          ); // 1 hour = 3600000 ms\n          const averageMinutes = Math.floor(\n            (averageMillis % (1000 * 60 * 60)) / (1000 * 60)\n          ); // 1 minute = 60000 ms\n\n          return {\n            days: !isNaN(averageDays) ? averageDays : 0,\n            hours: !isNaN(averageHours) ? averageHours : 0,\n            minutes: !isNaN(averageMinutes) ? averageMinutes : 0,\n          };\n        }\n      );\n  }\n  private async getMultiOrgAverageOverdueChecklistTime(\n    orgId: string\n  ): Promise<{ days: number; hours: number; minutes: number }> {\n    const { totalMillis, taskCount } = await this.getRecursiveOrgsAverage(\n      orgId,\n      this.getSingleOrgAverageOverdueChecklistTime.bind(this)\n    );\n\n    if (taskCount === 0) {\n      return { days: 0, hours: 0, minutes: 0 };\n    }\n\n    const averageMillis = totalMillis / taskCount;\n\n    const averageDays = Math.floor(averageMillis / (1000 * 60 * 60 * 24));\n    const averageHours = Math.floor(\n      (averageMillis % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n    );\n    const averageMinutes = Math.floor(\n      (averageMillis % (1000 * 60 * 60)) / (1000 * 60)\n    );\n\n    return {\n      days: !isNaN(averageDays) ? averageDays : 0,\n      hours: !isNaN(averageHours) ? averageHours : 0,\n      minutes: !isNaN(averageMinutes) ? averageMinutes : 0,\n    };\n  }\n  private async getSingleOrgAverageOverdueChecklistTime(\n    orgId: string\n  ): Promise<{ totalMillis: number; taskCount: number }> {\n    const milisecondConversion = 30 * 24 * 60 * 60 * 1000;\n\n    const overdueChecklists = await this.prisma.checklist.findMany({\n      where: {\n        isComplete: true,\n        dateCompleted: {\n          not: null,\n        },\n        user: {\n          currentOrgId: orgId,\n        },\n      },\n      select: {\n        createdAt: true,\n        dateCompleted: true,\n      },\n    });\n\n    const overdueDurations = overdueChecklists\n      .map((checklist) => {\n        if (checklist.dateCompleted) {\n          const completionTime =\n            new Date(checklist.dateCompleted).getTime() -\n            new Date(checklist.createdAt).getTime();\n          const overdueTime = completionTime - milisecondConversion;\n          return overdueTime > 0 ? overdueTime : null;\n        }\n        return null;\n      })\n      .filter((overdueTime) => overdueTime !== null);\n\n    if (overdueDurations.length === 0) {\n      return { totalMillis: 0, taskCount: 0 };\n    }\n\n    const totalOverdueTime = overdueDurations.reduce(\n      (total, overdueTime) => total + (overdueTime || 0),\n      0\n    );\n\n    return {\n      totalMillis: totalOverdueTime,\n      taskCount: overdueDurations.length,\n    };\n  }\n\n  public async getMostCompletedItems(): Promise<any[]> {\n    const allTasks = this.includeChildren\n      ? await this.getMultiOrgMostCompletedItems(this.orgId)\n      : await this.getSingleOrgMostCompletedItems(this.orgId);\n    return this.getMostCompletedItemsProcess(allTasks);\n  }\n  private async getMultiOrgMostCompletedItems(orgId: string): Promise<any[]> {\n    const tasks = await this.getSingleOrgMostCompletedItems(orgId);\n\n    const childOrgs = await this.prisma.organization.findMany({\n      where: { parentOrgId: orgId },\n      select: { uuid: true },\n    });\n\n    for (const childOrg of childOrgs) {\n      const childTasks = await this.getMultiOrgMostCompletedItems(\n        childOrg.uuid\n      );\n      tasks.push(...childTasks);\n    }\n\n    return tasks;\n  }\n  private async getSingleOrgMostCompletedItems(orgId: string): Promise<any[]> {\n    return this.prisma.checklistItem.findMany({\n      where: {\n        isComplete: true,\n        dateCompleted: {\n          not: null,\n        },\n        checklist: {\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n      },\n      select: {\n        templateItemId: true,\n        createdAt: true,\n        dateCompleted: true,\n      },\n    });\n  }\n  private async getMostCompletedItemsProcess(allTasks: any[]): Promise<any[]> {\n    const taskMap = new Map<\n      string,\n      { totalCompletionTime: number; count: number }\n    >();\n\n    allTasks.forEach((task) => {\n      const completionTimeMs =\n        new Date(task.dateCompleted!).getTime() -\n        new Date(task.createdAt).getTime();\n\n      if (taskMap.has(task.templateItemId)) {\n        const existing = taskMap.get(task.templateItemId)!;\n        existing.totalCompletionTime += completionTimeMs;\n        existing.count += 1;\n      } else {\n        taskMap.set(task.templateItemId, {\n          totalCompletionTime: completionTimeMs,\n          count: 1,\n        });\n      }\n    });\n\n    const tasksWithAverageTime = Array.from(taskMap.entries()).map(\n      ([templateItemId, { totalCompletionTime, count }]) => {\n        const averageCompletionTimeMs = totalCompletionTime / count;\n\n        const days = Math.floor(\n          averageCompletionTimeMs / (1000 * 60 * 60 * 24)\n        );\n        const hours = Math.floor(\n          (averageCompletionTimeMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n        );\n        const minutes = Math.floor(\n          (averageCompletionTimeMs % (1000 * 60 * 60)) / (1000 * 60)\n        );\n        const seconds = Math.floor(\n          (averageCompletionTimeMs % (1000 * 60)) / 1000\n        );\n        const milliseconds = Math.floor(averageCompletionTimeMs % 1000);\n\n        return {\n          templateItemId,\n          averageCompletionTime: {\n            days,\n            hours,\n            minutes,\n            seconds,\n            milliseconds,\n            totalMilliseconds: averageCompletionTimeMs,\n          },\n        };\n      }\n    );\n\n    const templateIds = tasksWithAverageTime.map((task) => task.templateItemId);\n    const templates = await this.prisma.templateItem.findMany({\n      where: {\n        uuid: {\n          in: templateIds,\n        },\n      },\n      select: {\n        uuid: true,\n        name: true,\n      },\n    });\n\n    const templateMap = new Map(\n      templates.map((template) => [template.uuid, template.name])\n    );\n\n    const sortedTasks = tasksWithAverageTime\n      .sort(\n        (a, b) =>\n          a.averageCompletionTime.totalMilliseconds -\n          b.averageCompletionTime.totalMilliseconds\n      )\n      .slice(0, 6);\n\n    const itemsWithNames = sortedTasks.map((task) => ({\n      templateId: task.templateItemId,\n      templateName: templateMap.get(task.templateItemId) || 'Unknown',\n      averageCompletionTime: task.averageCompletionTime,\n    }));\n\n    return itemsWithNames;\n  }\n\n  public async getLeastCompletedItems(): Promise<any[]> {\n    const allTasks = this.includeChildren\n      ? await this.getMultiOrgLeastCompletedItems(this.orgId)\n      : await this.getSingleOrgLeastCompletedItems(this.orgId);\n    return this.getLeastCompletedItemsProcess(allTasks);\n  }\n  private async getMultiOrgLeastCompletedItems(orgId: string): Promise<any[]> {\n    const tasks = await this.getSingleOrgLeastCompletedItems(orgId);\n\n    const childOrgs = await this.prisma.organization.findMany({\n      where: { parentOrgId: orgId },\n      select: { uuid: true },\n    });\n\n    for (const childOrg of childOrgs) {\n      const childTasks = await this.getMultiOrgLeastCompletedItems(\n        childOrg.uuid\n      );\n      tasks.push(...childTasks);\n    }\n\n    return tasks;\n  }\n  private async getSingleOrgLeastCompletedItems(orgId: string): Promise<any[]> {\n    return this.prisma.checklistItem.findMany({\n      where: {\n        isComplete: true,\n        dateCompleted: {\n          not: null,\n        },\n        checklist: {\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n      },\n      select: {\n        templateItemId: true,\n        createdAt: true,\n        dateCompleted: true,\n      },\n    });\n  }\n  private async getLeastCompletedItemsProcess(allTasks: any[]): Promise<any[]> {\n    const taskMap = new Map<\n      string,\n      { totalCompletionTime: number; count: number }\n    >();\n\n    allTasks.forEach((task) => {\n      const completionTimeMs =\n        new Date(task.dateCompleted!).getTime() -\n        new Date(task.createdAt).getTime();\n\n      if (taskMap.has(task.templateItemId)) {\n        const existing = taskMap.get(task.templateItemId)!;\n        existing.totalCompletionTime += completionTimeMs;\n        existing.count += 1;\n      } else {\n        taskMap.set(task.templateItemId, {\n          totalCompletionTime: completionTimeMs,\n          count: 1,\n        });\n      }\n    });\n\n    const tasksWithAverageTime = Array.from(taskMap.entries()).map(\n      ([templateItemId, { totalCompletionTime, count }]) => {\n        const averageCompletionTimeMs = totalCompletionTime / count;\n\n        const days = Math.floor(\n          averageCompletionTimeMs / (1000 * 60 * 60 * 24)\n        );\n        const hours = Math.floor(\n          (averageCompletionTimeMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n        );\n        const minutes = Math.floor(\n          (averageCompletionTimeMs % (1000 * 60 * 60)) / (1000 * 60)\n        );\n        const seconds = Math.floor(\n          (averageCompletionTimeMs % (1000 * 60)) / 1000\n        );\n        const milliseconds = Math.floor(averageCompletionTimeMs % 1000);\n\n        return {\n          templateItemId,\n          averageCompletionTime: {\n            days,\n            hours,\n            minutes,\n            seconds,\n            milliseconds,\n            totalMilliseconds: averageCompletionTimeMs,\n          },\n        };\n      }\n    );\n\n    const templateIds = tasksWithAverageTime.map((task) => task.templateItemId);\n    const templates = await this.prisma.templateItem.findMany({\n      where: {\n        uuid: {\n          in: templateIds,\n        },\n      },\n      select: {\n        uuid: true,\n        name: true,\n      },\n    });\n\n    const templateMap = new Map(\n      templates.map((template) => [template.uuid, template.name])\n    );\n    const sortedTasks = tasksWithAverageTime\n      .sort(\n        (a, b) =>\n          b.averageCompletionTime.totalMilliseconds -\n          a.averageCompletionTime.totalMilliseconds\n      )\n      .slice(0, 6);\n\n    const itemsWithNames = sortedTasks.map((task) => ({\n      templateId: task.templateItemId,\n      templateName: templateMap.get(task.templateItemId) || 'Unknown',\n      averageCompletionTime: task.averageCompletionTime,\n    }));\n\n    return itemsWithNames;\n  }\n\n  public async getSquadronRating() {\n    return this.includeChildren\n      ? this.getMultiOrgSquadronRating(this.orgId)\n      : this.getSingleOrgSquadronRating(this.orgId).then((result) => {\n        const completionPercentage =\n            result.totalItems > 0\n              ? (result.completedItems / result.totalItems) * 100\n              : 0;\n        return completionPercentage.toFixed(2);\n      });\n  }\n  private async getMultiOrgSquadronRating(orgId: string) {\n    const { totalItems, completedItems } =\n      await this.getRecursiveSquadronRating(\n        orgId,\n        this.getSingleOrgSquadronRating.bind(this)\n      );\n\n    const completionPercentage =\n      totalItems > 0 ? (completedItems / totalItems) * 100 : 0;\n    return completionPercentage.toFixed(2);\n  }\n  private async getSingleOrgSquadronRating(orgId: string) {\n    const totalItems = await this.prisma.checklistItem.count({\n      where: {\n        checklist: {\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n      },\n    });\n\n    const completedItems = await this.prisma.checklistItem.count({\n      where: {\n        isComplete: true,\n        checklist: {\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n      },\n    });\n\n    return {\n      totalItems,\n      completedItems,\n    };\n  }\n\n  public async getDaysToCompletion(): Promise<string> {\n    if (this.includeChildren) {\n      return this.getMultiOrgDaysToCompletion(this.orgId);\n    } else {\n      const { totalItems, completedItems, completionTime } =\n        await this.getSingleOrgDaysToCompletion(this.orgId);\n\n      const remainingItems = totalItems - completedItems;\n      const averageCompletionTimeMs =\n        completedItems > 0 ? completionTime / completedItems : 0;\n      const averageCompletionTimeDays =\n        averageCompletionTimeMs / (1000 * 60 * 60 * 24);\n      const daysToCompletion = averageCompletionTimeDays * remainingItems;\n\n      return daysToCompletion.toFixed(2);\n    }\n  }\n  private async getMultiOrgDaysToCompletion(orgId: string): Promise<string> {\n    const { totalItems, completedItems, completionTime } =\n      await this.getRecursiveDaysToCompletion(orgId);\n\n    const remainingItems = totalItems - completedItems;\n    const averageCompletionTimeMs =\n      completedItems > 0 ? completionTime / completedItems : 0;\n    const averageCompletionTimeDays =\n      averageCompletionTimeMs / (1000 * 60 * 60 * 24);\n    const daysToCompletion = averageCompletionTimeDays * remainingItems;\n\n    return daysToCompletion.toFixed(2);\n  }\n  private async getSingleOrgDaysToCompletion(\n    orgId: string\n  ): Promise<{\n    totalItems: number;\n    completedItems: number;\n    completionTime: number;\n  }> {\n    const totalItems = await this.prisma.checklistItem.count({\n      where: {\n        checklist: {\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n      },\n    });\n\n    const completedItems = await this.prisma.checklistItem.count({\n      where: {\n        isComplete: true,\n        checklist: {\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n      },\n    });\n\n    const allCompletedTasks = await this.prisma.checklistItem.findMany({\n      where: {\n        isComplete: true,\n        checklist: {\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n      },\n      select: {\n        createdAt: true,\n        dateCompleted: true,\n      },\n    });\n\n    const completionTime = allCompletedTasks.reduce((acc, task) => {\n      const completionTimeMs =\n        new Date(task.dateCompleted!).getTime() -\n        new Date(task.createdAt).getTime();\n      return acc + completionTimeMs;\n    }, 0);\n\n    return {\n      totalItems,\n      completedItems,\n      completionTime,\n    };\n  }\n\n  private async getRecursiveTotalCount(\n    orgId = this.orgId,\n    singleFunc: (id: string) => Promise<{\n      completedTasks: number;\n      totalInprocessingTime: { hours: number; minutes: number; days: number };\n      allRoles: number;\n      inprocessedMembers: number;\n      completedChecklists: number;\n      allTemplates: number;\n    }>\n  ) {\n    const parent = await this.prisma.organization.findFirstOrThrow({\n      where: {\n        uuid: orgId,\n      },\n      include: {\n        children: true,\n      },\n    });\n\n    let result = await singleFunc(parent.uuid);\n\n    if (parent.children) {\n      for (const org of parent.children) {\n        const childResult = await this.getRecursiveTotalCount(\n          org.uuid,\n          singleFunc\n        );\n\n        (\n          Object.keys(childResult) as Array<\n            keyof {\n              completedTasks: number;\n              totalInprocessingTime: {\n                hours: number;\n                minutes: number;\n                days: number;\n              };\n              allRoles: number;\n              inprocessedMembers: number;\n              completedChecklists: number;\n              allTemplates: number;\n            }\n          >\n        ).forEach((key) => {\n          if (\n            typeof result[key] === 'number' &&\n            typeof childResult[key] === 'number'\n          ) {\n            result[key] += childResult[key];\n          }\n        });\n      }\n    }\n    return {\n      ...result,\n    };\n  }\n\n  public async getTotalCounts() {\n    return this.includeChildren\n      ? this.getMultiTotalCounts()\n      : this.getSingleTotalCounts();\n  }\n\n  private async getMultiTotalCounts(orgId = this.orgId) {\n    return this.getRecursiveTotalCount(\n      orgId,\n      this.getSingleTotalCounts.bind(this)\n    );\n  }\n\n  private async getSingleTotalCounts(orgId = this.orgId): Promise<{\n    completedTasks: number;\n    totalInprocessingTime: { hours: number; minutes: number; days: number };\n    allRoles: number;\n    inprocessedMembers: number;\n    completedChecklists: number;\n    allTemplates: number;\n  }> {\n    const getCompletedChecklist = this.prisma.checklist.count({\n      where: {\n        isComplete: true,\n        dateCompleted: {\n          not: null,\n        },\n        user: {\n          currentOrgId: orgId,\n        },\n      },\n    });\n    const getCompletedTasks = this.prisma.checklistItem.count({\n      where: {\n        isComplete: true,\n        dateCompleted: {\n          not: null,\n        },\n        checklist: {\n          user: {\n            currentOrgId: orgId,\n          },\n        },\n      },\n    });\n    const getInprocessedMembers = this.prisma.checklist.count({\n      where: {\n        isComplete: true,\n        dateCompleted: {\n          not: null,\n        },\n        user: {\n          currentOrgId: orgId,\n        },\n      },\n    });\n    const getAllTemplates = this.prisma.template.count({\n      where: {\n        organizationId: orgId,\n      },\n    });\n    const getAllRoles = this.prisma.organizationsRoles.count({\n      where: {\n        organizationId: orgId,\n      },\n    });\n    \n    const [\n      completedChecklists,\n      completedTasks,\n      inprocessedMembers,\n      allTemplates,\n      allRoles,\n    ] = await this.prisma.$transaction([\n      getCompletedChecklist,\n      getCompletedTasks,\n      getInprocessedMembers,\n      getAllTemplates,\n      getAllRoles,\n    ]);\n\n    const totalInprocessingTime =\n      await this.getSingleOrgTotalInprocessingTime(orgId);\n\n    return {\n      completedChecklists,\n      completedTasks,\n      inprocessedMembers,\n      allTemplates,\n      allRoles,\n      totalInprocessingTime,\n    };\n  }\n}\n","import type {\n  ChecklistType,\n  OrgAncestorTree,\n  OrgRoot,\n  OrgWithInboundMembers,\n  OrgWithOutBoundMembers,\n  OrgWithTemplates,\n} from '@lib/constants';\nimport { Models } from '@lib/models.server';\nimport { ChecklistItemStatus, ChecklistStatus, MoveType, Prisma } from '@prisma/client';\nimport type {\n  Organization,\n  PrismaClient,\n  TemplateItem,\n  type Template,\n} from '@prisma/client';\nimport dbServer from '@services/db.server';\nimport type { OrganizationCreateDto, OrganizationUpdateDto } from './dtos';\nimport type { IRepository } from './Repository.server';\n\nexport type OrganizationWithChildren = {\n  uuid: string;\n  name: string;\n  depth: number;\n  abbreviation: string;\n  baseId: string;\n  createdAt: string;\n  createdBy: string;\n  isDeleted: boolean;\n  isBase: boolean;\n  isWingLevel: boolean;\n  parentId: string;\n  parentOrgId: string;\n  updatedAt: string;\n  updatedBy: string;\n  templates: any[];\n  roles: any[];\n  children?: OrganizationWithChildren[];\n};\n\ninterface IOrganizationRepository\n  extends IRepository<\n    Organization,\n    OrganizationCreateDto,\n    OrganizationUpdateDto\n  > {\n  getOutboundMembers(\n    id: string,\n  ): Promise<OrgWithOutBoundMembers['outboundMembers']>;\n\n  getInboundMembers(\n    id: string,\n  ): Promise<OrgWithInboundMembers['inboundMembers']>;\n\n  getInprocessMembers(id: string): Promise<any>;\n\n  getAllWithBase(): Promise<Organization[]>;\n\n  getAllAtBase(id: string): Promise<Organization[]>;\n\n  getAllNotAtBase(id: string): Promise<Organization[]>;\n\n  getAllByMoveType(moveType: MoveType, baseId: string): Promise<Organization[]>;\n\n  getWithTemplates(\n    id: string | null,\n    templateType?: ChecklistType,\n  ): Promise<Organization | null>;\n\n  getTemplatesByMoveType(\n    moveType: MoveType,\n    currentOrgId: string,\n  ): Promise<OrgWithTemplates>;\n\n  findTrees(): Promise<OrgRoot[]>;\n\n  findRoots(): Promise<OrgRoot[]>;\n\n  findDescendants(\n    uuid: string,\n    ignoreRoot: boolean,\n    templateType?: ChecklistType,\n  ): Promise<Array<Organization & { templates?: Template[] }>>;\n\n  findDescendantsTree(id: string): Promise<OrganizationWithChildren | null>;\n\n  countDescendants(id: string): Promise<number>;\n\n  findAncestors(\n    uuid: string,\n    ignoreRoot: boolean,\n    templateType?: ChecklistType,\n  ): Promise<Array<Organization & { templates?: Template[] }>>;\n\n  findAncestorsTree(id: string): Promise<OrgAncestorTree>;\n\n  countAncestors(id: string): Promise<number>;\n}\n\n/**\n * Repository class for handling organization-related operations.\n *\n * @class\n * @extends Repository<Organization, OrganizationCreateInput, OrganizationUpdateInput>\n */\nexport class OrganizationRepository implements IOrganizationRepository {\n  public prisma;\n  constructor(prismaClient: PrismaClient) {\n    this.prisma = prismaClient;\n  }\n\n  /**\n   * Retrieves outbound members for a specific organization.\n   *\n   * @async\n   * @function getOutboundMembers\n   * @param {string} id - The ID of the organization to retrieve outbound members for.\n   * @returns A Promise that resolves to an array of outbound members.\n   * @throws {Error} If there is an error while fetching outbound members.\n   *\n   * @example\n   * const orgId = \"yourOrgId\";\n   * try {\n   *   const outboundMembers = await getOutboundMembers(orgId);\n   *   console.log(outboundMembers);\n   * } catch (error) {\n   *   console.error(`Error fetching outbound members: ${error.message}`);\n   * }\n   */\n  public async getOutboundMembers(uuid: string) {\n    const org = await this.prisma.organization.findFirstOrThrow({\n      where: { uuid },\n      select: {\n        outboundMembers: {\n          where: {\n            isDeleted: false,\n          },\n          select: {\n            id: true,\n            name: true,\n            workEmail: true,\n            personalEmail: true,\n            workPhone: true,\n            personalPhone: true,\n            updatedAt: true,\n            nextOrg: true,\n            previousOrg: true,\n            currentOrg: true,\n            moveType: true,\n            checklists: {\n              where: {\n                isComplete: false,\n              },\n            },\n            supervisor: {\n              where: { isDeleted: false },\n              select: { name: true, workEmail: true },\n            },\n          },\n        },\n      },\n    });\n\n    return org.outboundMembers.filter((user) => user.checklists.length === 0);\n  }\n  /**\n   * Retrieves inbound members for a specific organization.\n   *\n   * @async\n   * @function getInboundMembers\n   * @param {string} id - The ID of the organization to retrieve inbound members for.\n   * @returns A Promise that resolves to an array of inbound members.\n   * @throws {Error} If there is an error while fetching inbound members.\n   *\n   * @example\n   * const orgId = \"yourOrgId\";\n   * try {\n   *   const inboundMembers = await getInboundMembers(orgId);\n   *   console.log(inboundMembers);\n   * } catch (error) {\n   *   console.error(`Error fetching inbound members: ${error.message}`);\n   * }\n   */\n  public async getInboundMembers(uuid: string) {\n    const org = await this.prisma.organization.findFirstOrThrow({\n      where: { uuid },\n      select: {\n        uuid: true,\n        inboundMembers: {\n          where: {\n            isDeleted: false,\n          },\n          select: {\n            id: true,\n            name: true,\n            workEmail: true,\n            personalEmail: true,\n            workPhone: true,\n            personalPhone: true,\n            updatedAt: true,\n            nextOrg: true,\n            previousOrg: true,\n            currentOrg: true,\n            moveType: true,\n            supervisor: { select: { name: true, workEmail: true } },\n            checklists: {\n              where: {\n                isComplete: false,\n                isDeleted: false,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    return org.inboundMembers.filter(\n      (member) => member.checklists.length === 0\n    );\n  }\n\n  /**\n   * Retrieves inprocess members for a specific organization.\n   *\n   * @async\n   * @function getInprocessMembers\n   * @param {string} id - The ID of the organization to retrieve inprocess members for.\n   * @returns A Promise that resolves to an array of inprocess members.\n   * @throws {Error} If there is an error while fetching inprocess members.\n   *\n   * @example\n   * const orgId = \"yourOrgId\";\n   * try {\n   *   const inprocessMembers = await getProcessMembers(orgId);\n   *   console.log(inprocessMembers);\n   * } catch (error) {\n   *   console.error(`Error fetching inprocess members: ${error.message}`);\n   * }\n   */\n  public async getInprocessMembers(uuid: string) {\n    const org = await this.prisma.organization.findFirstOrThrow({\n      where: { uuid },\n      include: {\n        inboundMembers: {\n          where: {\n            isDeleted: false,\n          },\n          include: {\n            supervisor: { select: { name: true, workEmail: true } },\n            checklists: {\n              where: {\n                OR: [{status: ChecklistStatus.InProgress}, {status: ChecklistStatus.Paused}, {status: ChecklistStatus.Locked}],\n                isDeleted: false,\n              },\n              include: {\n                items: true,\n                template: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    const result = org.inboundMembers.filter(\n      (member) => member.checklists.length > 0\n    );\n\n    return result.map((user) => {\n      const { items, template, ...userChecklist } = user.checklists[0];\n\n      return {\n        id: user.id,\n        name: user.name,\n        checklist: {\n          ...userChecklist,\n          type: template.type,\n          count: {\n            totalItems: items.length,\n            completedItems: items.filter((item) => item.isComplete).length,\n          },\n        },\n      };\n    });\n  }\n\n  public async getArchivedMembers(uuid: string) {\n    const org = await this.prisma.organization.findFirstOrThrow({\n      where: { uuid },\n      include: {\n        inboundMembers: {\n          include: {\n            checklists: {\n              where: {\n                status: 'Archived',\n                archivedDate: {\n                  not: null,\n                },\n              },\n              include: {\n                items: true,\n                template: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    const result = org.inboundMembers.filter(\n      (member) => member.checklists.length > 0\n    );\n\n    return result.map((user) => {\n      const totalItems = user.checklists[0].items;\n      return {\n        id: user.id,\n        name: user.name,\n        checklist: {\n          ...user.checklists[0],\n          count: {\n            totalItems: totalItems.length,\n            completedItems: totalItems.filter((item) => item.isComplete).length,\n          },\n        },\n      };\n    });\n  }\n\n  public async getSponsorsByOrg(orgId: string) {\n    const users = await this.prisma.userProfile.findMany({\n      where: { currentOrgId: orgId },\n      select: {\n        id: true,\n        sponsorId: true,\n        name: true,\n        rank: true,\n        workEmail: true,\n      },\n    });\n  \n    return users;\n  } \n\n  public async getSponsors(userId: string) {\n    const users = await this.prisma.userProfile.findMany({\n      where: { sponsorId: userId },\n      select: {\n        id: true,\n        sponsorId: true,\n        name: true,\n        rank: true,\n        workEmail: true,\n      },\n    });\n  \n    return users;\n  }  \n\n  public async getSupervisors(orgId: string) {\n    const users = await this.prisma.userProfile.findMany({\n      where: { currentOrgId: orgId },\n      include: {\n        supervisor: {\n          select: {\n            id: true,\n            name: true,\n            rank: true,\n            workEmail: true,\n          },\n        },\n      },\n    });\n\n    const supervisors = users\n      .map(user => user.supervisor)\n      .filter((supervisor, index, self) => \n        supervisor && self.findIndex(s => s?.id === supervisor.id) === index\n      );\n  \n    return supervisors;\n  }\n\n  public async getSubordinates(orgId: string) {\n    const subordinates = await this.prisma.userProfile.findMany({\n      where: { currentOrgId: orgId },\n      select: {\n        id: true,\n        name: true,\n        rank: true,\n        workEmail: true,\n        supervisorId: true,\n      },\n    });\n  \n    return subordinates;\n  }\n  \n\n  public async getCompletedMembers(uuid: string) {\n    const org = await this.prisma.organization.findFirstOrThrow({\n      where: { uuid },\n      include: {\n        onboardingMembers: {\n          where: {},\n          include: {\n            checklists: {\n              where: {\n                isComplete: true,\n                // isDeleted: false,\n                // status: 'Completed',\n                // dateCompleted: {\n                //   not: null,\n                // },\n              },\n              include: {\n                items: true,\n                template: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    const result = org.onboardingMembers.filter(\n      (member) => member.checklists.length > 0\n    );\n\n    return result.map((user) => {\n      const totalItems = user.checklists[0].items;\n      return {\n        id: user.id,\n        name: user.name,\n        checklist: {\n          ...user.checklists[0],\n          count: {\n            totalItems: totalItems.length,\n            completedItems: totalItems.filter((item) => item.isComplete).length,\n          },\n        },\n      };\n    });\n  }\n\n  public async getCompletedMemberChecklists(uuid: string) {\n    const org = await this.prisma.organization.findFirstOrThrow({\n      where: { uuid },\n      select: {\n        uuid: true,\n        currentMembers: {\n          where: {\n            isDeleted: false,\n          },\n          select: {\n            id: true,\n            name: true,\n            workEmail: true,\n            personalEmail: true,\n            workPhone: true,\n            personalPhone: true,\n            updatedAt: true,\n            nextOrg: true,\n            previousOrg: true,\n            currentOrg: true,\n            moveType: true,\n            supervisor: { select: { name: true, workEmail: true } },\n            checklists: {\n              where: {\n                isComplete: true,\n                isDeleted: false,\n              },\n              select: {\n                id: true,\n                template: {\n                  select: {\n                    id: true,\n                    name: true,\n                    description: true,\n                    type: true,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n\n    return org.currentMembers.filter((member) => member.checklists.length > 0);\n  }\n\n  /**\n   * Retrieves all organizations.\n   *\n   * @async\n   * @function getAll\n   * @returns A Promise that resolves to an array of organizations.\n   * @throws {Error} If there is an error while fetching organizations.\n   *\n   * @example\n   * try {\n   *   const allOrganizations = await getAll();\n   *   console.log(allOrganizations);\n   * } catch (error) {\n   *   console.error(`Error fetching all organizations: ${error.message}`);\n   * }\n   */\n  public async getAll(options?: { excludeDaf?: boolean }) {\n    const where =\n      options && options.excludeDaf\n        ? {\n          name: { not: 'Department of the Air Force' },\n          uuid: { not: 'GLOBAL' },\n        }\n        : {\n          uuid: { not: 'GLOBAL' },\n        };\n    return this.prisma.organization.findMany({\n      where: {\n        isBase: false,\n        ...where,\n      },\n    });\n  }\n\n  /**\n   * Retrieves all organizations with their base information included.\n   *\n   * @async\n   * @function getAllWithBase\n   * @returns A Promise that resolves to an array of organizations with base information included.\n   * @throws {Error} If there is an error while fetching organizations.\n   *\n   * @example\n   * try {\n   *   const organizationsWithBase = await getAllWithBase();\n   *   console.log(organizationsWithBase);\n   * } catch (error) {\n   *   console.error(`Error fetching organizations with base information: ${error.message}`);\n   * }\n   */\n  public async getAllWithBase() {\n    return this.prisma.organization.findMany({\n      include: {\n        base: true,\n      },\n    });\n  }\n\n  /**\n   * Retrieves organizations at a specific base.\n   *\n   * @async\n   * @function getAllAtBase\n   * @param {string} id - The ID of the base to filter organizations by.\n   * @returns A Promise that resolves to an array of organizations at the specified base.\n   * @throws {Error} If there is an error while fetching organizations.\n   *\n   * @example\n   * const baseId = \"yourBaseId\";\n   * try {\n   *   const organizationsAtBase = await getAllAtBase(baseId);\n   *   console.log(organizationsAtBase);\n   * } catch (error) {\n   *   console.error(`Error fetching organizations at base: ${error.message}`);\n   * }\n   */\n  public async getAllAtBase(uuid: string) {\n    return this.prisma.organization.findMany({\n      where: {\n        base: { uuid },\n        name: { not: 'Department of the Air Force' },\n      },\n      include: {\n        base: true,\n      },\n    });\n  }\n\n  /**\n   * Retrieves organizations not at a specific base.\n   *\n   * @async\n   * @function getAllNotAtBase\n   * @param {string} id - The ID of the base to filter organizations by.\n   * @returns A Promise that resolves to an array of organizations not at the specified base.\n   * @throws {Error} If there is an error while fetching organizations.\n   *\n   * @example\n   * const baseId = \"yourBaseId\";\n   * try {\n   *   const organizationsNotAtBase = await getAllNotAtBase(baseId);\n   *   console.log(organizationsNotAtBase);\n   * } catch (error) {\n   *   console.error(`Error fetching organizations not at base: ${error.message}`);\n   * }\n   */\n  public async getAllNotAtBase(uuid: string) {\n    return this.prisma.organization.findMany({\n      where: {\n        NOT: {\n          base: { uuid },\n        },\n      },\n      include: {\n        base: true,\n      },\n    });\n  }\n\n  /**\n   * Retrieves organizations based on the move type and base ID.\n   *\n   * @async\n   * @function getAllByMoveType\n   * @param {MoveType} moveType - The type of move (PCA or PCS).\n   * @param {string} baseId - The ID of the base to filter organizations by.\n   * @returns {Promise<Organization[]>} A Promise that resolves to an array of organizations based on the move type and base ID.\n   * @throws {Error} If there is an error while fetching organizations.\n   *\n   * @example\n   * const moveType = MoveType.PCA;\n   * const baseId = \"yourBaseId\";\n   * try {\n   *   const organizationsByMoveType = await getAllByMoveType(moveType, baseId);\n   *   console.log(organizationsByMoveType);\n   * } catch (error) {\n   *   console.error(`Error fetching organizations by move type: ${error.message}`);\n   * }\n   */\n  public async getAllByMoveType(\n    moveType: MoveType,\n    baseId: string\n  ): Promise<Organization[]> {\n    let orgs;\n\n    // TODO: Find a better way to onboard members since we are only the base using this\n    // if (moveType === MoveType.PCA) {\n    //   // get orgs by base\n    //   orgs = await this.getAllAtBase(baseId);\n    // } else if (moveType === MoveType.PCS) {\n    //   // get orgs at other bases\n    //   orgs = await this.getAllNotAtBase(baseId);\n    // } else {\n    //   throw new Error('Incorrect type');\n    // }\n\n    orgs = await this.getAllAtBase(baseId);\n\n    return orgs;\n  }\n\n  /**\n   * Retrieves an organization by its ID.\n   *\n   * @async\n   * @function get\n   * @param {string} id - The ID of the organization to retrieve.\n   * @returns A Promise that resolves to the organization with the specified ID.\n   * @throws {Error} If there is an error while fetching the organization.\n   *\n   * @example\n   * const orgId = \"yourOrgId\";\n   * try {\n   *   const organization = await get(orgId);\n   *   console.log(organization);\n   * } catch (error) {\n   *   console.error(`Error fetching organization: ${error.message}`);\n   * }\n   */\n  public async get(uuid: string) {\n    return this.prisma.organization.findFirstOrThrow({\n      where: { uuid },\n      include: {\n        base: true,\n      },\n    });\n  }\n\n  /**\n   * Retrieves an organization with its templates based on the template type.\n   *\n   * @async\n   * @function getWithTemplates\n   * @param {string|null} id - The ID of the organization to retrieve templates for.\n   * @param {ChecklistType} [templateType] - The type of checklist templates to include.\n   * @returns A Promise that resolves to the organization with the specified templates.\n   * @throws {Error} If there is an error while fetching the organization or templates.\n   *\n   * @example\n   * const orgId = \"yourOrgId\";\n   * const templateType = ChecklistType.YourTemplateType;\n   * try {\n   *   const organizationWithTemplates = await getWithTemplates(orgId, templateType);\n   *   console.log(organizationWithTemplates);\n   * } catch (error) {\n   *   console.error(`Error fetching organization with templates: ${error.message}`);\n   * }\n   */\n  public async getWithTemplates(\n    uuid: string | null,\n    templateType?: ChecklistType\n  ) {\n    if (!uuid || uuid === '') return null;\n    return this.prisma.organization.findFirst({\n      where: { uuid },\n      include: {\n        templates: {\n          where: { type: templateType, isDeleted: false },\n          orderBy: { name: 'asc' },\n          include: {\n            _count: {\n              select: {\n                userChecklists: {\n                  where: { isComplete: false, isDeleted: false, lockedDate: null, pausedDate: null, archivedDate: null },\n                },\n              },\n            },\n            items: {\n              where: {\n                isDeleted: {\n                  equals: false,\n                },\n              },\n              orderBy: { name: 'asc' },\n              include: {\n                reference: true,\n                requiredRole: true,\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n\n  /**\n   * Retrieves templates based on the move type and current organization ID.\n   *\n   * @async\n   * @function getTemplatesByMoveType\n   * @param {MoveType} moveType - The type of move (PCA or PCS).\n   * @param {string} currentOrgId - The ID of the current organization.\n   * @returns A Promise that resolves to an array of templates based on the move type and current organization ID.\n   * @throws {Error} If there is an error while fetching templates.\n   *\n   * @example\n   * const moveType = MoveType.PCA;\n   * const currentOrgId = \"yourCurrentOrgId\";\n   * try {\n   *   const templatesByMoveType = await getTemplatesByMoveType(moveType, currentOrgId);\n   *   console.log(templatesByMoveType);\n   * } catch (error) {\n   *   console.error(`Error fetching templates by move type: ${error.message}`);\n   * }\n   */\n  public async getTemplatesByMoveType(\n    moveType: MoveType,\n    currentOrgId: string\n  ) {\n    return this.prisma.organization.findFirstOrThrow({\n      where: {\n        uuid: currentOrgId,\n      },\n      include: {\n        templates: {\n          where: {\n            type: moveType,\n          },\n        },\n      },\n    });\n  }\n\n  /**\n   * Creates a new organization.\n   * @param {OrganizationCreateDto} dto - The data transfer object containing organization details.\n   * @returns {Promise<string>} - The ID of the newly created organization.\n   */\n  public async create(dto: OrganizationCreateDto): Promise<string> {\n    const defaultRoles = await this.createDefaultRoles(dto.isWing);\n\n    let baseId;\n\n    let orgId;\n\n    if (dto.isBase) {\n      orgId = await this.createOrganization(\n        {\n          userId: dto.userId,\n          name: dto.name,\n          parentOrgId: 'DAF', //'DAF'\n          abbreviation: dto.abbreviation,\n          isWingLevel: false,\n          isBase: dto.isBase, //true\n          createdAt: new Date(Date.now()),\n          updatedAt: new Date(Date.now()),\n          createdBy: dto.userId,\n          updatedBy: dto.userId,\n        },\n        defaultRoles\n      );\n    } else {\n      if (dto.baseId) {\n        baseId = dto.baseId;\n      } else if (!dto.baseId && dto.parentOrgId) {\n        const parent = await this.get(dto.parentOrgId);\n        console.log('parent: ', parent);\n        baseId = parent.baseId;\n        if (parent.isBase) baseId = parent.uuid;\n        if (!baseId) {\n          throw new Error('Unable to find a base id.');\n        }\n      }\n\n      orgId = await this.createOrganization(\n        {\n          userId: dto.userId,\n          name: dto.name,\n          parentOrgId: dto.baseId ? baseId : dto.parentOrgId,\n          abbreviation: dto.abbreviation ?? '',\n          baseId: baseId as string,\n          isWingLevel: dto.isWing ?? false,\n          isBase: dto.isBase,\n          createdAt: dto.createdAt,\n          createdBy: dto.createdBy,\n          updatedAt: dto.updatedAt,\n          updatedBy: dto.updatedBy,\n        },\n        defaultRoles\n      );\n    }\n\n    await this.createTemplates(dto.name, orgId, dto.isWing);\n\n    return orgId;\n  }\n\n  /**\n   * Creates an array of default roles to be added to an organization.\n   * @param {boolean} isWing - Indicates if the organization is a wing.\n   * @returns {Promise<{contactEmail: string; contactPhone: string; info: { connect: { id: string }}}[]>} - The default roles.\n   */\n  private async createDefaultRoles(isWing: boolean): Promise<\n    {\n      contactEmail: string;\n      contactPhone: string;\n      role: { connect: { uuid: string } };\n    }[]\n  > {\n    const adminRoles = isWing ? ['ADMIN', 'SUPERADMIN'] : [];\n\n    // Assign default roles\n    const defaultRoles = await this.prisma.role.findMany({\n      where: {\n        OR: [\n          { isRequired: true },\n          { abbreviation: { in: ['USER', ...adminRoles] } },\n        ],\n      },\n    });\n\n    const createRoles: Array<{\n      contactEmail: string;\n      contactPhone: string;\n      role: { connect: { uuid: string } };\n    }> = [];\n\n    for (const role of defaultRoles) {\n      createRoles.push({\n        contactPhone: '',\n        contactEmail: '',\n        role: { connect: { uuid: role.uuid } },\n      });\n    }\n\n    return createRoles;\n  }\n\n  /**\n   * Creates a new organization in the database.\n   * @param {{ userId: string; name: string; abbreviation: string; baseId: string; parentOrgId?: string }} dto - The data transfer object containing organization details.\n   * @param {{ contactEmail: string; contactPhone: string; info: { connect: { id: string } } }[]} roles - The default roles for the organization.\n   * @returns {Promise<string>} - The ID of the newly created organization.\n   */\n  private async createOrganization(\n    dto: {\n      userId: string;\n      name: string;\n      abbreviation: string;\n      baseId?: string;\n      parentOrgId?: string;\n      isWingLevel: boolean;\n      isBase: boolean;\n      createdAt: Date;\n      createdBy: string;\n      updatedAt: Date;\n      updatedBy: string;\n    },\n    roles: {\n      contactEmail: string;\n      contactPhone: string;\n      role: { connect: { uuid: string } };\n    }[]\n  ) {\n    const parentId = dto.parentOrgId || 'DAF'; // Default to 'DAF' if no parentOrgId provided\n\n    const orgId = (\n      await this.prisma.organization.create({\n        data: {\n          createdBy: dto.userId,\n          updatedBy: dto.userId,\n          parentOrgId: parentId,\n          createdAt: dto.createdAt,\n          updatedAt: dto.updatedAt,\n          parentId: parentId,\n          name: dto.name,\n          abbreviation: dto.abbreviation ?? '',\n          baseId: dto.baseId,\n          isWingLevel: dto.isWingLevel,\n          isBase: dto.isBase,\n          orgRoles: {\n            create: [...roles],\n          },\n        },\n      })\n    ).uuid;\n\n    await this.createClosureEntry(orgId, parentId);\n\n    return orgId;\n  }\n\n  /**\n   * Creates default PCS / PCA templates for the organization.\n   * @param {string} name - The name of the organization.\n   * @param {string} orgId - The ID of the organization.\n   * @param {boolean} isWing\n   */\n  private async createTemplates(name: string, orgId: string, isWing: boolean) {\n    const [pcsTemplate, _, topLevelItems] = await this.prisma.$transaction([\n      this.prisma.template.create({\n        data: {\n          name: `${name} PCS Checklist`,\n          description: '',\n          organizationId: orgId,\n          type: MoveType.PCS,\n        },\n      }),\n      this.prisma.template.create({\n        data: {\n          name: `${name} PCA Checklist`,\n          description: '',\n          organizationId: orgId,\n          type: MoveType.PCA,\n        },\n      }),\n      this.prisma.templateItem.findMany({\n        where: {\n          isTopLevel: true,\n          template: {\n            organizationId: 'DAF',\n          },\n        },\n      }),\n    ]);\n\n    if (isWing) await this.connectTopLevelItems(topLevelItems, pcsTemplate.id);\n  }\n\n  public async getClosureData(descendantIds: string[]) {\n    const closureData = await this.prisma.organizationClosureTable.findMany({\n      where: {\n        descendantId: {\n          in: descendantIds,\n        },\n      },\n      select: {\n        ancestorId: true,\n        length: true,\n      },\n    });\n    return closureData;\n  }\n\n  /**\n   * Connects top-level items to the template.\n   * @param {TemplateItem[]} items - The template items to connect.\n   * @param {string} templateId - The ID of the template.\n   */\n  private async connectTopLevelItems(\n    items: TemplateItem[],\n    templateId: string\n  ) {\n    let transactions = [];\n\n    for (const item of items) {\n      transactions.push(\n        this.prisma.templateItem.create({\n          data: {\n            templateId,\n            name: `Inherited from ${item.name}`,\n            requiredRoleId: item.requiredRoleId,\n            referenceId: item.uuid,\n            forDormResidents: item.forDormResidents,\n            forHasDependents: item.forHasDependents,\n            forHasEFMP: item.forHasEFMP,\n          },\n        })\n      );\n    }\n\n    await this.prisma.$transaction(transactions);\n  }\n\n  async createRootClosureEntry(newOrgId: string) {\n    await this.prisma.organizationClosureTable.create({\n      data: {\n        ancestorId: newOrgId,\n        descendantId: newOrgId,\n        length: 0,\n      },\n    });\n  }\n\n  createClosureEntryAsync(\n    newOrgId: string,\n    parentOrgId: string,\n    includeChilren = false,\n    currentLength = 0\n  ): Prisma.PrismaPromise<number> {\n    if (includeChilren) {\n      return this.prisma.$executeRaw`\nINSERT INTO \"OrganizationClosureTable\" (\"ancestorId\", \"descendantId\", \"length\")\nSELECT \"ancestorId\", ${newOrgId}, \"length\" + ${currentLength} + 1\nFROM \"OrganizationClosureTable\"\nWHERE \"descendantId\" = ${parentOrgId}\n\n-- ON CONFLICT (\"ancestorId\", \"descendantId\") DO UPDATE \n-- SET \"length\" = EXCLUDED.\"length\";\n      `;\n    } else {\n      return this.prisma.$executeRaw`\nINSERT INTO \"OrganizationClosureTable\" (\"ancestorId\", \"descendantId\", \"length\")\nSELECT \"ancestorId\", ${newOrgId}, \"length\" + 1\nFROM \"OrganizationClosureTable\"\nWHERE \"descendantId\" = ${parentOrgId}\n\nUNION ALL\n\nSELECT ${newOrgId}, ${newOrgId}, 0\n\n-- ON CONFLICT (\"ancestorId\", \"descendantId\") DO UPDATE \n-- SET \"length\" = EXCLUDED.\"length\";\n      `;\n    }\n  }\n\n  async createClosureEntry(\n    newOrgId: string,\n    parentOrgId: string,\n    includeChilren: boolean\n  ) {\n    return this.createClosureEntryAsync(newOrgId, parentOrgId, includeChilren);\n  }\n\n  public async createClosureEntryAtDepth(\n    ancestorId: string,\n    descendantId: string,\n    length: number\n  ) {\n    return this.prisma.$queryRaw`\n        INSERT INTO \"OrganizationClosureTable\" (\"ancestorId\", \"descendantId\", \"length\")\n        VALUES (${ancestorId}, ${descendantId}, ${length});\n    `;\n    // return this.prisma.$executeRaw`\n    //   INSERT INTO \"OrganizationClosureTable\" (\"ancestorId\", \"descendantId\", \"length\")\n    //   SELECT \"ancestorId\", ${ancestorId}, ${length}\n    //   FROM \"OrganizationClosureTable\"\n    //   WHERE \"descendantId\" = ${descendantId}\n\n    //   `;\n  }\n\n  /**\n   * Updates an existing organization.\n   *\n   * @async\n   * @function update\n   * @param {string} id - The ID of the organization to update.\n   * @param {OrganizationUpdateDto} organizationData - Data for updating the organization.\n   * @returns {Promise<void>} A Promise that resolves when the organization is successfully updated.\n   * @throws {Error} If there is an error while updating the organization.\n   *\n   * @example\n   * const orgId = \"yourOrgId\";\n   * const organizationData = {\n   *   userId: \"yourUserId\",\n   *   orgName: \"Updated Organization Name\",\n   *   abbreviation: \"UON\",\n   * };\n   * try {\n   *   await update(orgId, organizationData);\n   *   console.log(`Organization ${orgId} updated successfully`);\n   * } catch (error) {\n   *   console.error(`Error updating organization: ${error.message}`);\n   * }\n   */\n  public async update(\n    uuid: string,\n    { userId, orgName, abbreviation, isWingLevel }: OrganizationUpdateDto\n  ): Promise<void> {\n    await this.prisma.organization.update({\n      where: { uuid },\n      data: {\n        createdBy: userId,\n        updatedBy: userId,\n        name: orgName,\n        abbreviation,\n        isWingLevel,\n      },\n    });\n  }\n\n  public async moveOrg(orgId: string, newParentId: string): Promise<void> {\n    const getBaseFromParentId = await this.prisma.organization.findFirstOrThrow(\n      {\n        where: { uuid: newParentId },\n        select: {\n          baseId: true,\n          uuid: true,\n        },\n      }\n    );\n\n    const moveQuery = await this.prisma.organization.update({\n      where: { uuid: orgId },\n      data: {\n        parentOrgId: newParentId,\n        parentId: newParentId,\n        baseId: getBaseFromParentId.baseId ?? getBaseFromParentId.uuid,\n      },\n      select: {\n        baseId: true,\n      },\n    });\n\n    const childClosure = await this.prisma.organizationClosureTable.findMany({\n      where: {\n        ancestorId: orgId,\n      },\n      select: {\n        descendantId: true,\n        length: true,\n      },\n    });\n\n    const updateChildBaseIds = [];\n\n    for (const child of childClosure) {\n      updateChildBaseIds.push(\n        this.prisma.organization.update({\n          where: { uuid: child.descendantId },\n          data: {\n            baseId: moveQuery.baseId,\n          },\n        })\n      );\n    }\n\n    const removeQuery = [];\n\n    childClosure.forEach(async (node) => {\n      removeQuery.push(\n        this.removeFromClosureTreeAtDepthAsync(node.descendantId, node.length)\n      );\n    });\n\n    const createQuery = [];\n\n    childClosure.forEach(async (node) => {\n      createQuery.push(\n        this.createClosureEntryAsync(\n          node.descendantId,\n          newParentId,\n          true,\n          node.length\n        )\n      );\n    });\n\n    await this.prisma.$transaction([\n      ...updateChildBaseIds,\n      ...removeQuery,\n      ...createQuery,\n    ]); //,  insertQuery, insertChild]);\n  }\n\n  /**\n   * Deletes an organization and its associated roles.\n   *\n   * @async\n   * @function delete\n   * @param {string} id - The ID of the organization to delete.\n   * @returns {Promise<void>} A Promise that resolves when the organization and its roles are successfully deleted.\n   * @throws {Error} If there is an error while deleting the organization.\n   *\n   * @example\n   * const orgId = \"yourOrgId\";\n   * try {\n   *   await delete(orgId);\n   *   console.log(`Organization ${orgId} deleted successfully`);\n   * } catch (error) {\n   *   console.error(`Error deleting organization: ${error.message}`);\n   * }\n   */\n  // TODO: Remove from closure, Disable deleting anything with orgs assigned as children\n  public async delete(id: string): Promise<void> {\n    if ((await this.countDescendants(id)) !== 0)\n      throw new Error(\n        'Can not delete an organization with organizations assigned to it.'\n      );\n\n    const deleteTemplates = this.prisma.template.deleteMany({\n      where: { organizationId: id },\n    });\n\n    const deleteRoles = this.prisma.organizationsRoles.deleteMany({\n      where: { organizationId: id },\n    });\n    const deleteOrg = this.prisma.organization.delete({\n      where: { uuid: id },\n    });\n    const deleteClosure = this.prisma.organizationClosureTable.deleteMany({\n      where: { descendantId: id },\n    });\n\n    await this.prisma.$transaction([\n      deleteRoles,\n      deleteTemplates,\n      deleteClosure,\n      deleteOrg,\n    ]);\n  }\n\n  public async findTrees() {\n    const roots = await this.findRoots();\n\n    for await (const root of roots) {\n      const rootNode = await this.findDescendantsTree(root.uuid);\n      if (rootNode?.children && rootNode.children?.length > 0)\n        root['children'] = rootNode.children;\n    }\n\n    return roots;\n  }\n\n  public async findRoots() {\n    return this.prisma.organization.findMany({\n      where: { parentId: null },\n      include: { children: true, templates: true, orgRoles: true },\n    });\n  }\n\n  public async findRoot() {\n    return this.prisma.organization.findFirstOrThrow({\n      where: { name: 'Department of the Air Force' },\n      include: { children: true, templates: true, orgRoles: true },\n    });\n  }\n\n  // public async findDescendantsTree(id: string) {\n  //   const current = await this.prisma.organization.findUniqueOrThrow({\n  //     where: { id },\n  //     include: { children: true, templates: true, roles: true },\n  //   });\n  //\n  //   if (current.children && current.children.length > 0) {\n  //     let tree = [];\n  //     for await (const child of current.children) {\n  //       tree.push(await this.findDescendantsTree(child.id));\n  //     }\n  //     current.children = tree;\n  //   }\n  //\n  //   return current;\n  // }\n\n  public async findDescendantsTree(\n    uuid: string\n  ): Promise<OrganizationWithChildren | null> {\n    const result = await this.prisma.$queryRaw<\n      Omit<OrganizationWithChildren, 'children'>[]\n    >`\n    WITH Descendants AS (\n      SELECT\n          o.*,\n          c.length\n      FROM\n          \"OrganizationClosureTable\" c\n              JOIN \"Organization\" o ON c.\"descendantId\" = o.uuid\n      WHERE\n          c.\"ancestorId\" = ${uuid}\n    )\n    -- Fetching organization with templates and roles\n    SELECT\n        d.uuid,\n        d.id,\n        d.name,\n        d.length AS depth,\n        d.abbreviation,\n        d.\"baseId\",\n        d.\"createdAt\",\n        d.\"createdBy\",\n        d.\"isDeleted\",\n        d.\"isBase\",\n        d.\"isWingLevel\",\n        d.\"parentId\",\n        d.\"parentOrgId\",\n        d.\"updatedAt\",\n        d.\"updatedBy\",\n        json_agg(DISTINCT t) AS templates,\n        json_agg(DISTINCT r) AS roles\n    FROM\n        Descendants d\n            LEFT JOIN \"Template\" t ON d.uuid = t.\"organizationId\"\n            LEFT JOIN \"OrganizationsRoles\" r ON d.uuid = r.\"organizationId\"\n    GROUP BY\n        d.uuid, d.id, d.name, d.length, d.abbreviation, d.\"baseId\", d.\"createdAt\", d.\"createdBy\", d.\"isDeleted\", d.\"isBase\", d.\"isWingLevel\", d.\"parentId\", d.\"parentOrgId\", d.\"updatedAt\", d.\"updatedBy\"\n    ORDER BY\n        d.name;\n  `;\n\n    function buildTree(\n      data: OrganizationWithChildren[],\n      ancestorId: string,\n      depth: number = 0\n    ): OrganizationWithChildren | null {\n      if (!data) return null;\n      const root = data.find(\n        (item) => item.uuid === ancestorId && item.depth === depth\n      );\n\n      if (!root) return null;\n\n      const children = data\n        .filter(\n          (item) =>\n            item.depth === depth + 1 &&\n            item.parentId === ancestorId &&\n            data.some((d) => d.uuid === ancestorId && d.depth === depth)\n        )\n        .map((item) => buildTree(data, item.uuid, depth + 1))\n        .filter((v) => v !== null)\n        .sort((a, b) => {\n          if (a && b) return a.name.localeCompare(b.name);\n          return 0;\n        });\n\n      return {\n        ...root,\n        children: children.length ? children : undefined,\n      };\n    }\n\n    return buildTree(result, uuid);\n  }\n\n  public async findDescendants(\n    id: string,\n    ignoreRoot = false,\n    templateType?: ChecklistType\n  ): Promise<Array<Organization & { templates?: Template[] }>> {\n    const query = this.buildFindDescendantQuery(id, ignoreRoot, templateType);\n    if (ignoreRoot) return this.prisma.$queryRaw(query);\n\n    return this.prisma.$queryRaw(query);\n  }\n\n  private buildFindDescendantQuery(\n    uuid: string,\n    ignoreRoot = false,\n    templateType?: ChecklistType\n  ) {\n    let select = Prisma.sql`o.*`;\n    let join = Prisma.sql`\"OrganizationClosureTable\" ct ON o.uuid = ct.\"descendantId\"`;\n    let where = Prisma.sql`ct.\"ancestorId\" = ${uuid}`;\n    let groupBy = Prisma.empty;\n\n    if (templateType) {\n      select = Prisma.sql`o.*, json_agg(t.*) AS templates`;\n      join = Prisma.sql`\"OrganizationClosureTable\" ct ON o.uuid = ct.\"descendantId\" JOIN \"Template\" t ON t.\"organizationId\" = o.uuid`;\n      where = Prisma.sql`ct.\"ancestorId\" = ${uuid} AND t.type = ${templateType}::\"ChecklistType\"`;\n      groupBy = Prisma.sql`GROUP BY o.id, \"createdAt\", \"updatedAt\", \"createdBy\", \"updatedBy\", o.name, \"parentOrgId\", o.\"isDeleted\", \"baseId\", abbreviation, \"parentId\", \"isWingLevel\"`;\n    }\n\n    if (ignoreRoot) {\n      where = Prisma.sql`ct.\"ancestorId\" = ${uuid}  AND o.uuid <> ${uuid}`;\n\n      if (templateType)\n        where = Prisma.sql`ct.\"ancestorId\" = ${uuid} AND t.type = ${templateType} AND o.uuid <> ${uuid}`;\n\n      return Prisma.sql`SELECT ${select}\n        FROM \"Organization\" o\n        JOIN ${join}\n        WHERE ${where}\n        ${groupBy};`;\n    }\n    if (templateType)\n      where = Prisma.sql`ct.\"ancestorId\" = ${uuid} AND t.type = ${templateType}::\"ChecklistType\"`;\n\n    return Prisma.sql`SELECT ${select}\n      FROM \"Organization\" o\n      JOIN ${join}\n      WHERE ${where}\n      ${groupBy};`;\n  }\n\n  private removeFromClosureTreeAsync(descendantId: string) {\n    return this.prisma.organizationClosureTable.deleteMany({\n      where: { descendantId },\n    });\n  }\n\n  private removeFromClosureTreeAtDepthAsync(\n    descendantId: string,\n    depth: number\n  ) {\n    return this.prisma.$queryRaw`\n      DELETE\n      FROM \"OrganizationClosureTable\"\n      WHERE \"descendantId\" = ${descendantId} AND length > ${depth};\n    `;\n  }\n\n  private removeAncestorsFromClosureTreeAsync(descendantId: string) {\n    return this.prisma.organizationClosureTable.deleteMany({\n      where: { ancestorId: descendantId },\n    });\n  }\n\n  public async removeFromClosureTree(descendantId: string) {\n    return this.removeFromClosureTreeAsync(descendantId);\n    //return this.removeFromClosureTreeAtDepthAsync(descendantId, depth);\n  }\n\n  public async countDescendants(uuid: string) {\n    return (await this.findDescendants(uuid, true)).length;\n  }\n\n  public async findAncestors(\n    uuid: string,\n    ignoreRoot = false,\n    templateType?: ChecklistType\n  ): Promise<Array<Organization & { templates?: Template[] }>> {\n    const query = this.buildFindAncestorQuery(uuid, ignoreRoot, templateType);\n    if (ignoreRoot) return this.prisma.$queryRaw(query);\n\n    return this.prisma.$queryRaw(query);\n  }\n\n  private buildFindAncestorQuery(\n    uuid: string,\n    ignoreRoot = false,\n    templateType?: ChecklistType\n  ) {\n    let select = Prisma.sql`o.*`;\n    let join = Prisma.sql`\"OrganizationClosureTable\" ct ON o.uuid = ct.\"ancestorId\"`;\n    let where = Prisma.sql`ct.\"descendantId\" = ${uuid}`;\n    let groupBy = Prisma.empty;\n\n    if (templateType) {\n      select = Prisma.sql`o.*, json_agg(t.*) AS templates`;\n      join = Prisma.sql`\"OrganizationClosureTable\" ct ON o.uuid = ct.\"ancestorId\" JOIN \"Template\" t ON t.\"organizationId\" = o.uuid`;\n      where = Prisma.sql`ct.\"descendantId\" = ${uuid} AND t.type = ${templateType}::\"ChecklistType\"`;\n      groupBy = Prisma.sql`GROUP BY o.id, \"createdAt\", \"updatedAt\", \"createdBy\", \"updatedBy\", o.name, \"parentOrgId\", o.\"isDeleted\", \"baseId\", abbreviation, \"parentId\", \"isWingLevel\"`;\n    }\n\n    if (ignoreRoot) {\n      where = Prisma.sql`ct.\"descendantId\" = ${uuid}  AND o.uuid <> ${uuid}`;\n\n      if (templateType)\n        where = Prisma.sql`ct.\"descendantId\" = ${uuid} AND t.type = ${templateType} AND o.uuid <> ${uuid}`;\n\n      return Prisma.sql`SELECT ${select}\n        FROM \"Organization\" o\n        JOIN ${join}\n        WHERE ${where}\n        ${groupBy};`;\n    }\n    if (templateType)\n      where = Prisma.sql`ct.\"descendantId\" = ${uuid} AND t.type = ${templateType}::\"ChecklistType\"`;\n\n    return Prisma.sql`SELECT ${select}\n      FROM \"Organization\" o\n      JOIN ${join}\n      WHERE ${where}\n      ${groupBy};`;\n  }\n\n  public async findFamilyTree(\n    uuid: string,\n    ignoreRoot = false,\n    templateType?: ChecklistType\n  ): Promise<\n    [\n      Array<Organization & { templates?: Template[] }>,\n      Array<Organization & { templates?: Template[] }>,\n    ]\n  > {\n    const ancestors = await this.findAncestors(uuid, ignoreRoot, templateType);\n    const descendants = await this.findDescendants(\n      uuid,\n      ignoreRoot,\n      templateType\n    );\n\n    return [ancestors, descendants];\n  }\n\n  public async findAncestorsTree(uuid: string) {\n    const current = await this.prisma.organization.findUniqueOrThrow({\n      where: { uuid },\n      include: { parent: true },\n    });\n\n    if (current.parentId) {\n      current.parent = await this.findAncestorsTree(current.parentId);\n    }\n\n    return current;\n  }\n\n  public async countAncestors(uuid: string) {\n    return (await this.findAncestors(uuid)).length;\n  }\n\n  public getDafOrg() {\n    return this.prisma.organization.findFirstOrThrow({\n      where: {\n        name: 'Department of the Air Force',\n      },\n    });\n  }\n\n  public getAllBasesFromOrgs() {\n    return this.prisma.organization.findMany({\n      where: {\n        isBase: true,\n      },\n    });\n  }\n\n  public async findFirstWingLevel(orgId: string) {\n    const ancestors = await this.findAncestors(orgId);\n\n    ancestors.reverse();\n\n    let wing = null;\n\n    for (const ancestor of ancestors) {\n      if (ancestor.isWingLevel) {\n        wing = ancestor;\n        break;\n      }\n    }\n\n    return wing;\n  }\n\n  public async findWingUsers(orgId: string, select: Prisma.UserProfileSelect) {\n    const firstWing = await this.findFirstWingLevel(orgId);\n\n    if (!firstWing) {\n      return [];\n    }\n\n    const wingDescendants = await this.findDescendants(firstWing.uuid);\n\n    const wingDescendantIds = wingDescendants.map(org => org.uuid);\n\n    return this.prisma.userProfile.findMany({\n      where: {\n        currentOrgId: {\n          in: wingDescendantIds,\n        },\n      },\n      select,\n    });\n  }\n\n  public async findBaseUsers(baseId: string | null | undefined, select: Prisma.UserProfileSelect, orgId?: string) {\n    if (!baseId && !orgId) return [];\n    if (!baseId && orgId) baseId = orgId;\n\n    if (!baseId) return [];\n\n    const tree = await this.findDescendants(baseId);\n    const treeUuids = tree.map((o) => o.uuid);\n\n    return this.prisma.userProfile.findMany({\n      where: {\n        currentOrgId: { in: treeUuids },\n      },\n      select,\n    });\n  }\n}\n","/* eslint-disable import/prefer-default-export */\nimport type {\n  OrgRoleWithChecklistItems,\n  OrgRoleWithInfo,\n  OrgRoleWithUsers,\n} from '@lib/constants';\nimport type {\n  OrgRoleWithCount,\n  RoleWithItems,\n  TaskTabChecklistItem,\n  UsedByChecklistItems,\n} from '@lib/types';\nimport {\n  type OrganizationsRoles,\n  type PrismaClient,\n} from '@prisma/client';\nimport type {\n  OrganizationRoleCreateDto,\n  OrganizationRoleUpdateDto,\n  OrganizationRoleWithRoleDto,\n} from './dtos';\nimport type { IRepository } from './Repository.server';\n\nexport type FindAllOptions = {\n  includeUser?: boolean;\n  includeAdmin?: boolean;\n  includeSuperAdmin?: boolean;\n};\n\ninterface IOrganizationRoleRepository\n  extends IRepository<\n    OrganizationsRoles,\n    OrganizationRoleCreateDto,\n    OrganizationRoleUpdateDto\n  > {\n  createWithNewRole({\n    roleAbbreviation,\n    roleName,\n    roleDescription,\n    organizationId,\n    contactEmail,\n    contactPhone,\n  }: OrganizationRoleWithRoleDto): Promise<string>;\n\n  getWithUsers(id: string): Promise<OrgRoleWithUsers>;\n\n  getTaskItems(id: string): Promise<void>;\n\n  findAllByOwningOrgId(\n    orgId: string,\n    options?: FindAllOptions,\n  ): Promise<OrgRoleWithCount[]>;\n\n  addUser({\n    orgRoleId,\n    userId,\n  }: {\n    orgRoleId: string;\n    userId: string;\n  }): Promise<void>;\n\n  removeUser({\n    orgRoleId,\n    userId,\n  }: {\n    orgRoleId: string;\n    userId: string;\n  }): Promise<void>;\n\n  getTemplateItemForChildOrgs(\n    orgId: string,\n    where: any,\n  ): Promise<OrgRoleWithChecklistItems[]>;\n\n  getWithChecklists(\n    byOrgOrUser: 'org' | 'user',\n    id: string,\n    orgId: string,\n  ): Promise<Map<string, RoleWithItems>>;\n\n  getByUserIdWithChecklists(userId: string, orgId: string): Promise<any>;\n\n  getByOrgIdWithChecklists(orgId: string): Promise<any>;\n\n  getChildOrgRoles(\n    orgId: string,\n    userRoles?: Array<string>,\n  ): Promise<OrgRoleWithInfo[]>;\n}\n\nexport class OrganizationRoleRepository implements IOrganizationRoleRepository {\n  public prisma;\n\n  constructor(prismaClient: PrismaClient) {\n    this.prisma = prismaClient;\n  }\n\n  public getAll(): Promise<OrganizationsRoles[]> {\n    throw new Error('Method not implemented.');\n  }\n\n  public async get(uuid: string): Promise<OrgRoleWithInfo> {\n    return this.prisma.organizationsRoles.findFirstOrThrow({\n      where: { uuid },\n      include: {\n        role: {\n          select: {\n            uuid: true,\n            name: true,\n            description: true,\n            permissions: true,\n            abbreviation: true,\n            id: true,\n          },\n        },\n      },\n    });\n  }\n\n  public async getAllOrgRoles(): Promise<OrganizationsRoles[]> {\n    return this.prisma.organizationsRoles.findMany();\n  }\n\n  public async create({\n    organizationId,\n    roleId,\n    contactEmail,\n    contactPhone,\n  }: OrganizationRoleCreateDto): Promise<string> {\n    return (\n      await this.prisma.organizationsRoles.create({\n        data: {\n          contactPhone,\n          contactEmail,\n          organizationId,\n          roleId,\n        },\n        select: {\n          uuid: true,\n        },\n      })\n    ).uuid;\n  }\n\n  public async createWithNewRole({\n    roleAbbreviation,\n    roleName,\n    baseAgency,\n    roleDescription,\n    organizationId,\n    contactEmail,\n    contactPhone,\n  }: OrganizationRoleWithRoleDto): Promise<string> {\n    return (\n      await this.prisma.organizationsRoles.create({\n        data: {\n          isBaseAgency: baseAgency ?? false,\n          contactPhone,\n          contactEmail,\n          organization: {\n            connect: {\n              uuid: organizationId,\n            },\n          },\n          role: {\n            create: {\n              name: roleName,\n              level: baseAgency ? 'BASE' : 'UNIT',\n              description: roleDescription,\n              abbreviation: roleAbbreviation,\n              permissions: btoa('[[\"tasks\", [\"READ\", \"WRITE\"]]]'),\n              createdByOrgId: organizationId,\n            },\n          },\n        },\n        select: {\n          uuid: true,\n        },\n      })\n    ).uuid;\n  }\n\n  public async update(\n    uuid: string,\n    { contactPhone, contactEmail }: OrganizationRoleUpdateDto\n  ): Promise<void> {\n    await this.prisma.organizationsRoles.update({\n      where: {\n        uuid,\n      },\n      data: {\n        contactPhone,\n        contactEmail,\n      },\n    });\n  }\n  public async delete(uuid: string): Promise<void> {\n    await this.prisma.organizationsRoles.delete({\n      where: {\n        uuid,\n      },\n    });\n  }\n\n  public async getWithUsers(uuid: string) {\n    // return this.prisma.usersOrganizationRoles.findMany({\n    //   where: {\n    //     orgRoleId: uuid,\n    //   },\n    //   include: {\n    //     orgRole: true,\n    //     user: true,\n    //   },\n    // });\n    const result = await this.prisma.organizationsRoles.findFirstOrThrow({\n      where: { uuid },\n      include: {\n        role: true,\n        users: {\n          include: {\n            user: true,\n          },\n        },\n      },\n    });\n\n    const { users, ...rest} = result;\n    let userData = [];\n\n    for (const orgRoleUser of users) {\n      userData.push(orgRoleUser.user);\n    }\n\n    return { ...rest, users: userData };\n  }\n\n  public async getTaskItems(uuid: string): Promise<void> {\n    await this.prisma.templateItem.findMany({\n      where: { uuid },\n      include: {},\n    });\n  }\n\n  /**\n   * Find all Organization Roles belonging to the specified Organization ID. Includes options for including the default USER role.\n   * By using an object like { includeUser: true }\n   */\n  public async findAllByOwningOrgId(\n    orgId: string,\n    options?: FindAllOptions\n  ): Promise<OrgRoleWithCount[]> {\n    const notInArray = [];\n    if (!options?.includeUser) notInArray.push('USER');\n    if (!options?.includeAdmin) notInArray.push('ADMIN');\n    if (!options?.includeSuperAdmin) notInArray.push('SUPERADMIN');\n\n    return this.prisma.organizationsRoles.findMany({\n      where: {\n        OR: [\n          {\n            organizationId: orgId,\n          },\n          {\n            role: {\n              abbreviation: options?.includeUser ? 'USER' : undefined,\n            },\n          },\n        ],\n        role: {\n          abbreviation: {\n            notIn: notInArray,\n          },\n        },\n      },\n      include: {\n        role: true,\n        _count: {\n          select: {\n            users: true,\n          },\n        },\n      },\n    });\n  }\n  \n  public async addUser({\n    orgRoleId,\n    userId,\n  }: {\n    orgRoleId: string;\n    userId: string;\n  }): Promise<void> {\n    await this.prisma.userProfile.update({\n      where: {\n        id: userId,\n      },\n      data: {\n        orgRoles: {\n          create: {\n            orgRoleId,\n          },\n        },\n      },\n    });\n    // await this.prisma.organizationsRoles.update({\n    //   where: {\n    //     uuid: orgRoleId,\n    //   },\n    //   data: {\n    //     users: {\n    //       create: {\n    //         userId,\n    //       },\n    //     },\n    //   },\n    // });\n  }\n\n  public async removeUser({\n    orgRoleId,\n    userId,\n  }: {\n    orgRoleId: string;\n    userId: string;\n  }): Promise<void> {\n    await this.prisma.usersOrganizationRoles.delete({\n      where: {\n        userId_orgRoleId: { orgRoleId, userId },\n      },\n    });\n  }\n\n  public async getTemplateItemForChildOrgs(\n    orgId: string,\n    where: any\n  ): Promise<OrgRoleWithChecklistItems[]> {\n    const topOrg = await this.prisma.organization.findFirstOrThrow({\n      where: { uuid: orgId },\n      select: {\n        name: true,\n        subOrgs: {\n          select: {\n            uuid: true,\n            name: true,\n          },\n        },\n        orgRoles: {\n          where,\n          select: {\n            organization: {\n              select: {\n                name: true,\n              },\n            },\n            id: true,\n            role: {\n              select: {\n                abbreviation: true,\n                description: true,\n                name: true,\n                level: true,\n                templateItems: {\n                  select: {\n                    id: true,\n                    usedByChecklistItems: {\n                      select: {\n                        id: true,\n                        createdAt: true,\n                        dateCompleted: true,\n                        updatedAt: true,\n                        isComplete: true,\n                        userComplete: true,\n                        isDeleted: true,\n                        comments: {\n                          include: {\n                            postedBy: true,\n                          },\n                        },\n                        completedBy: true,\n                        updatedBy: true,\n                        templateItem: {\n                          select: {\n                            id: true,\n                            name: true,\n                            description: true,\n                          },\n                        },\n                        checklist: {\n                          select: {\n                            id: true,\n                            user: {\n                              select: {\n                                id: true,\n                                rank: true,\n                                name: true,\n                                workEmail: true,\n                                currentOrg: {\n                                  select: {\n                                    id: true,\n                                    name: true,\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n\n    let orgRoles = [...topOrg.orgRoles];\n\n    for (const subOrg of topOrg.subOrgs) {\n      const result = await this.getTemplateItemForChildOrgs(subOrg.uuid, where);\n      orgRoles.push(...result);\n    }\n\n    return orgRoles;\n  }\n\n  public async getWithChecklists(\n    byOrgOrUser: 'org' | 'user',\n    uuid: string,\n    orgId: string\n  ) {\n    const where =\n      byOrgOrUser === 'org'\n        ? {\n          NOT: {\n            info: {\n              abbreviation: 'USER',\n            },\n          },\n        }\n        : {\n          assignedUsers: {\n            some: {\n              uuid,\n            },\n          },\n        };\n\n    const rolesWithTemplateItems = await this.getTemplateItemForChildOrgs(\n      orgId,\n      where\n    );\n\n    const roleMap = new Map<string, RoleWithItems>();\n\n    for (const role of rolesWithTemplateItems) {\n      const roleInfo: RoleWithItems['roleInfo'] = {\n        id: role.id,\n        name: role.info.name,\n        description: role.info.description,\n      };\n      const notCompleteItems: RoleWithItems['notCompleteItems'] = [];\n      const completeItems: RoleWithItems['completeItems'] = [];\n\n      for (const templateItem of role.templateItemsAssigned) {\n        for (const item of templateItem.usedByChecklistItems) {\n          const newItem: Partial<UsedByChecklistItems> & { user: any } = {\n            ...item,\n            user: item.checklist.user,\n          };\n\n          delete newItem.checklist.user;\n\n          if (newItem.isComplete) completeItems.push(newItem);\n          else if (!newItem.isComplete) notCompleteItems.push(newItem);\n        }\n      }\n      if (roleMap.has(role.info.abbreviation)) {\n        const original = roleMap.get(role.info.abbreviation);\n        if (original) {\n          roleMap.set(role.info.abbreviation, {\n            roleInfo: original.roleInfo,\n            notCompleteItems: [\n              ...notCompleteItems,\n              ...original.notCompleteItems,\n            ],\n            completeItems: [...completeItems, ...original.completeItems],\n          });\n        }\n      } else {\n        roleMap.set(role.info.abbreviation, {\n          roleInfo,\n          notCompleteItems,\n          completeItems,\n        });\n      }\n    }\n\n    return roleMap;\n  }\n\n  public async getByUserIdWithChecklists(userId: string, orgId: string) {\n    return await this.getWithChecklists('user', userId, orgId);\n  }\n\n  public async getByOrgIdWithChecklists(orgId: string) {\n    return await this.getWithChecklists('org', orgId, orgId);\n  }\n\n  /**\n   * Retrieves roles for a given organization and its sub-organizations.\n   *\n   * @async\n   * @function getChildOrgRoles\n   * @param {string} orgId - The ID of the organization to retrieve roles for.\n   * @param userRoles\n   * @returns {Promise<OrgRoleWithInfo[]>} A Promise that resolves to an array of roles with associated information.\n   * @throws {Error} If there is an error while fetching roles.\n   *\n   * @example\n   * const orgId = \"yourOrgId\";\n   * try {\n   *   const orgRoles = await getChildOrgRoles(orgId);\n   *   console.log(orgRoles);\n   * } catch (error) {\n   *   console.error(`Error fetching organization roles: ${error.message}`);\n   * }\n   */\n  public async getChildOrgRoles(\n    orgId: string,\n    userRoles?: Array<string>\n  ): Promise<OrgRoleWithInfo[]> {\n    const where =\n      userRoles && userRoles.length > 0\n        ? {\n          role: {\n            abbreviation: { in: userRoles, notIn: ['ADMIN', 'SUPERADMIN'] },\n          },\n        }\n        : {\n          role: {\n            abbreviation: { notIn: ['ADMIN', 'SUPERADMIN'] },\n          },\n        };\n\n    const topOrg = await this.prisma.organization.findFirstOrThrow({\n      where: { uuid: orgId },\n      select: {\n        name: true,\n        subOrgs: {\n          select: {\n            id: true,\n            uuid: true,\n            name: true,\n          },\n        },\n        orgRoles: {\n          where: {\n            role: {\n              abbreviation: { notIn: ['ADMIN', 'SUPERADMIN'] },\n            },\n          },\n          select: {\n            organization: {\n              select: {\n                uuid: true,\n                name: true,\n              },\n            },\n            id: true,\n            uuid: true,\n            role: {\n              select: {\n                id: true,\n                abbreviation: true,\n                description: true,\n                name: true,\n                level: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    let roles: OrgRoleWithInfo[] = [...topOrg.orgRoles];\n\n    for (const subOrg of topOrg.subOrgs) {\n      const result = await this.getChildOrgRoles(subOrg.uuid, userRoles);\n      roles.push(...result);\n    }\n\n    return roles.sort((a, b) => a.role.name.localeCompare(b.role.name));\n  }\n\n  public async getChecklistItems(roleId?: string, orgId?: string) {\n    type ChecklistItemsResponse = TaskTabChecklistItem[];\n    const query = await this.prisma.$queryRaw<\n      Array<{ json_result: ChecklistItemsResponse }>\n    >`\n        WITH RECURSIVE OrgHierarchy AS (\n            SELECT Distinct oct.\"descendantId\" AS org_id\n            FROM \"OrganizationClosureTable\" oct\n            JOIN \"OrganizationsRoles\" org_role ON \"organizationId\" = oct.\"descendantId\"\n            JOIN \"Role\" r ON r.uuid = org_role.\"roleId\"\n--             FROM \"Role\" r \n--                 JOIN \"OrganizationsRoles\" org_role ON r.uuid = org_role.\"roleId\"\n--                 JOIN \"OrganizationClosureTable\" oct ON oct.\"ancestorId\" = org_role.\"organizationId\"\n            WHERE oct.\"ancestorId\" = ${orgId}\n        ), checklist_items AS (\n            SELECT DISTINCT ON (ci.id)\n                ci.id AS item_id,\n                ci.\"templateItemId\" AS template_item_id,\n                ci.\"checklistId\" AS checklist_id,\n                ci.\"isComplete\" AS is_complete,\n                ci.\"dateCompleted\" AS date_completed,\n                ci.\"createdAt\" AS created_at,\n                ci.\"updatedAt\" AS updated_at,\n                ci.\"isDeleted\" AS is_deleted,\n                ci.\"userComplete\" AS user_complete,\n                COALESCE(ref_ti.name, ti.name) AS template_item_name, -- Use reference name if available\n                COALESCE(ref_ti.description, ti.description) AS template_item_description,\n                up.id AS user_id,\n                up.name AS user_name,\n                up.rank AS user_rank,\n                org.name AS org_name,\n                org.abbreviation AS org_abb,\n                t.type AS template_type,\n                role.name AS role_name,\n                CASE WHEN ci.\"isComplete\" = false AND ci.\"createdAt\" <= NOW() - INTERVAL '30 days' THEN true ELSE false END AS is_overdue\n--         COUNT(CASE WHEN cic.internal = false THEN cic.id END) AS comment_count\n            FROM\n                \"ChecklistItem\" ci\n                    JOIN \"TemplateItem\" ti ON ci.\"templateItemId\" = ti.uuid\n                    LEFT JOIN \"TemplateItem\" ref_ti ON ti.\"referenceId\" = ref_ti.uuid -- Join to get reference name\n                    JOIN \"Role\" role ON role.uuid = ti.\"requiredRoleId\"\n                    JOIN \"OrganizationsRoles\" org_role ON org_role.\"roleId\" = role.uuid\n--                     JOIN OrgHierarchy oh ON oh.org_role_id = org_role.uuid\n                    JOIN \"Template\" t ON t.id = ti.\"templateId\"\n                    JOIN \"Checklist\" c ON c.id = ci.\"checklistId\"\n                    JOIN \"UserProfile\" up ON up.id =  c.\"userId\"\n                    JOIN \"Organization\" org ON org.uuid = up.\"currentOrgId\"\n            WHERE up.\"currentOrgId\" IN (SELECT org_id FROM OrgHierarchy) AND role.uuid = ${roleId}\n--             LEFT JOIN \"ChecklistItemComments\" cic ON cic.\"checklistItemId\" = ci.id\n            GROUP BY ci.id, ci.\"templateItemId\", ci.\"checklistId\", ci.\"isComplete\", ci.\"dateCompleted\", ci.\"createdAt\", ci.\"updatedAt\", ci.\"isDeleted\", ci.\"userComplete\", ti.name, ti.description, up.id, up.name, up.rank, org.name, org.abbreviation, t.type, role.name, ref_ti.name, ref_ti.description\n        ), checklist_items_with_count AS (\n            SELECT ci.*, COUNT(CASE WHEN cic.internal = false THEN cic.id END) AS comment_count\n            FROM checklist_items ci\n                     LEFT JOIN \"ChecklistItemComments\" cic ON cic.\"checklistItemId\" = ci.item_id\n            GROUP BY ci.item_id, ci.template_item_id, ci.checklist_id, ci.is_complete, ci.date_completed, ci.is_overdue, ci.created_at, ci.updated_at, ci.is_deleted, ci.user_complete, ci.template_item_name, ci.template_item_description, ci.user_id, ci.user_name, ci.user_rank, ci.org_name, ci.org_abb, ci.template_type, ci.role_name\n--             LIMIT 15 OFFSET 15\n        )\n        SELECT jsonb_agg(jsonb_build_object(\n                                 'id', item_id,\n                                 'templateItem', jsonb_build_object(\n                                         'name', template_item_name,\n                                         'description', template_item_description),\n                                 'user', jsonb_build_object(\n                                         'id', user_id,\n                                         'name', user_name,\n                                         'rank', user_rank,\n                                         'org', jsonb_build_object('name', org_name, 'abbreviation', org_abb)\n                                         ),\n                                 'template', jsonb_build_object('type', template_type),\n--                          'orgRole', jsonb_build_object('id', org_role_id, 'name', role_name),\n                                 'isComplete', is_complete,\n                                 'isOverdue', is_overdue,\n                                 'createdAt', created_at,\n                                 'updatedAt', updated_at,\n                                 'dateCompleted', date_completed,\n                                 'userComplete', user_complete,\n                                 'commentCount', comment_count\n                         )  ) AS json_result\n        FROM checklist_items_with_count;`;\n\n    if (query[0].json_result)\n      return query[0].json_result.sort((a, b) => {\n      // First sorting by isComplete and userComplete\n        if (a.isComplete === b.isComplete) {\n          if (!a.isComplete) {\n            if (a.userComplete !== b.userComplete) {\n              return a.userComplete ? -1 : 1;\n            }\n          }\n        } else {\n          return a.isComplete ? 1 : -1;\n        }\n\n        // If isComplete and userComplete conditions are the same, sort by due date\n        const aCreatedAt = new Date(a.createdAt);\n        const aDueDate = new Date(aCreatedAt);\n        aDueDate.setDate(aCreatedAt.getDate() + 30);\n\n        const bCreatedAt = new Date(b.createdAt);\n        const bDueDate = new Date(bCreatedAt);\n        bDueDate.setDate(bCreatedAt.getDate() + 30);\n\n        return aDueDate.getTime() - bDueDate.getTime();\n      });\n\n    return [];\n\n    //     return this.prisma.$transaction([\n    //       this.prisma.organizationsRoles.findFirstOrThrow({\n    //         where: { id: orgRoleId },\n    //         include: { info: true },\n    //       }),\n    //       this.prisma.$queryRaw<Array<{ json_result: ChecklistItemsResponse }>>`\n    // WITH RECURSIVE OrgHierarchy AS (\n    //     -- Start with the organization and roles owning the given orgRoleId\n    //     SELECT\n    //         org_role.id AS org_role_id,\n    //         r.id AS role_id,\n    //         org_role.\"owningOrganizationId\" AS org_id,\n    //         o.\"parentOrgId\" AS parent_org_id\n    //     FROM\n    //         \"organizationsRoles\" org_role\n    //             JOIN \"Organization\" o ON org_role.\"owningOrganizationId\" = o.id\n    //             JOIN \"Role\" r ON org_role.\"roleId\" = r.id\n    //     WHERE\n    //         org_role.id = ${orgRoleId}\n    //\n    //     UNION\n    //\n    //     -- Recursively find all descendant organizations and their roles\n    //     SELECT\n    //         org_role.id AS org_role_id,\n    //         r.id AS role_id,\n    //         org_role.\"owningOrganizationId\" AS org_id,\n    //         o.\"parentOrgId\" AS parent_org_id\n    //     FROM\n    //         \"organizationsRoles\" org_role\n    //             JOIN \"Organization\" o ON org_role.\"owningOrganizationId\" = o.id\n    //             JOIN \"Role\" r ON org_role.\"roleId\" = r.id\n    //             JOIN OrgHierarchy oh ON o.\"parentOrgId\" = oh.org_id AND r.id = oh.role_id\n    // )\n    // SELECT jsonb_agg(jsonb_build_object(\n    //      'id', id,\n    //      'templateItem', jsonb_build_object('name', template_item_name),\n    //      'user', jsonb_build_object(\n    //              'name', user_name,\n    //              'rank', user_rank,\n    //              'org', jsonb_build_object('name', org_name)\n    //              ),\n    //      'template', jsonb_build_object('type', template_type),\n    //      'orgRole', jsonb_build_object('id', org_role_id, 'name', role_name),\n    //      'isComplete', is_complete,\n    //      'isOverdue', is_overdue,\n    //      'createdAt', created_at,\n    //      'updatedAt', updated_at,\n    //      'dateCompleted', date_completed,\n    //      'userComplete', user_complete,\n    //      'commentCount', comment_count\n    // ) ORDER BY created_at) AS json_result\n    // FROM (\n    //    SELECT\n    //        ci.id AS id,\n    //        ci.\"templateItemId\",\n    //        ci.\"checklistId\",\n    //        ci.\"isComplete\" AS is_complete,\n    //        ci.\"dateCompleted\" AS date_completed,\n    //        ci.\"createdAt\" AS created_at,\n    //        ci.\"updatedAt\" AS updated_at,\n    //        ci.\"isDeleted\",\n    //        ci.\"userComplete\" AS user_complete,\n    //        ti.name AS template_item_name,\n    //        up.name AS user_name,\n    //        up.rank AS user_rank,\n    //        org.name AS org_name,\n    //        t.type AS template_type,\n    //        org_role.id AS org_role_id,\n    //        role.name AS role_name,\n    //        CASE WHEN ci.\"isComplete\" = false AND ci.\"createdAt\" <= NOW() - INTERVAL '30 days' THEN true ELSE false END AS is_overdue,\n    //        COUNT(CASE WHEN cic.internal = false THEN cic.id END) AS comment_count\n    //    FROM\n    //        \"ChecklistItem\" ci\n    //            JOIN \"TemplateItem\" ti ON ci.\"templateItemId\" = ti.id\n    //            JOIN \"Template\" t ON ti.\"templateId\" = t.id\n    //            JOIN \"OrganizationsRoles\" org_role ON org_role.id = ti.\"requiredRoleId\"\n    //            JOIN \"Role\" role ON org_role.\"roleId\" = role.id\n    //            JOIN \"Checklist\" c ON ci.\"checklistId\" = c.id\n    //            JOIN \"UserProfile\" up ON c.\"userId\" = up.id\n    //            JOIN \"Organization\" org ON up.\"currentOrgId\" = org.id\n    //            LEFT JOIN \"ChecklistItemComments\" cic ON ci.id = cic.\"checklistItemId\"\n    //    WHERE\n    //        org_role.id IN (SELECT org_role_id FROM OrgHierarchy)\n    //      AND ci.\"isComplete\" = false\n    //    GROUP BY ci.id, up.name, up.rank, org_role.id, role.name, ci.\"createdAt\", ti.name, org.name, t.type\n    //    ORDER BY\n    //        ci.\"createdAt\"\n    // ) AS subquery;\n    // `,\n    //     ]);\n\n    // return { role, items: itemJsonResult[0].json_result };\n  }\n\n  /**\n   * Retrieves item counts by role for a specific user in a given organization.\n   *\n   * @param {string} userId - The ID of the user.\n   * @param {string} orgId - The ID of the organization.\n   * @returns {Promise<Array<{ id: string, name: string, notCompleteCount: number, overdueCount: number }>>}\n   *          A promise that resolves to an array of objects containing checklist item counts for organization roles.\n   */\n  public async getItemCountByRole(userId: string, orgId: string) {\n    const query = await this.prisma.$queryRaw<\n      Array<{\n        result: {\n          uuid: string;\n          name: string;\n          notCompleteCount: number;\n          overdueCount: number;\n        }[];\n      }>\n    >`\n        WITH OrgTree AS (SELECT \"descendantId\" AS org_id\n                         FROM \"OrganizationClosureTable\" oct\n                                  JOIN \"UserProfile\" p ON p.\"currentOrgId\" = oct.\"ancestorId\"\n                         WHERE p.id = ${userId}),\n             OrgRoleTree AS (\n                 SELECT org_role.uuid AS org_role_id, r.uuid AS role_uuid, org_role.\"organizationId\" AS org_id\n                 FROM \"OrganizationClosureTable\" oct\n                          JOIN \"UserProfile\" p ON p.\"currentOrgId\" = oct.\"ancestorId\"\n                          JOIN \"UsersOrganizationRoles\" uor ON p.id = uor.\"userId\"\n                          JOIN \"OrganizationsRoles\" org_role ON org_role.uuid = uor.\"orgRoleId\"\n                          JOIN \"Role\" r ON r.uuid = org_role.\"roleId\"\n                 WHERE p.id = ${userId} \n                    AND r.abbreviation NOT IN ('SUPERADMIN', 'ADMIN')\n                 GROUP BY org_role.uuid, r.uuid, org_role.\"organizationId\"\n             ),\n             role_count AS (\n                 SELECT\n                     r.uuid AS role_id,\n                     r.name AS role_name,\n--                      ort.org_role_id AS org_role_id,\n                     --         oh.org_role_id AS org_role_id,\n                     COALESCE(SUM(CASE WHEN ci.\"isComplete\" = false AND ci.\"createdAt\" <= NOW() - INTERVAL '30 days' THEN 1 ELSE 0 END), 0) AS overdue_count,\n                     COALESCE(SUM(CASE WHEN ci.\"isComplete\" = false THEN 1 ELSE 0 END), 0) AS not_complete_count\n                 FROM OrgRoleTree ort\n                          JOIN \"Role\" r ON r.uuid = ort.role_uuid\n                          LEFT JOIN \"TemplateItem\" ti ON ti.\"requiredRoleId\" = ort.role_uuid\n                          LEFT JOIN \"ChecklistItem\" ci ON ci.\"templateItemId\" = ti.uuid\n                          LEFT JOIN \"Checklist\" c ON ci.\"checklistId\" = c.id\n                          LEFT JOIN \"UserProfile\" up ON c.\"userId\" = up.id -- AND up.\"currentOrgId\" IN (SELECT org_id FROM OrgTree) --WHERE up.\"currentOrgId\" IN (SELECT org_id FROM OrgTree)\n                 WHERE up.\"currentOrgId\" IS NULL OR up.\"currentOrgId\" IN (SELECT org_id FROM OrgTree)\n                 group by r.uuid, r.name, ort.org_role_id)\n        SELECT json_agg(\n                       json_build_object(\n                               'id', role_id        , 'name', role_name, 'overdueCount', overdue_count, 'notCompleteCount', not_complete_count, 'roleId', role_id\n                       )\n               ) as result FROM role_count;`;\n\n    if (query[0].result) return query[0].result;\n    else return [];\n  }\n\n  /**\n   * Retrieves item counts for all roles in a given organization for a specific user.\n   *\n   * @param {string} userId - The ID of the user.\n   * @param {string} orgId - The ID of the organization.\n   * @returns {Promise<Array<{ id: string, name: string, notCompleteCount: number, overdueCount: number }>>}\n   *          A promise that resolves to an array of objects containing checklist item counts for organization roles.\n   */\n  public async getItemCountForAllRoles(orgId: string) {\n    const query = await this.prisma.$queryRaw<\n      Array<{\n        result: {\n          uuid: string;\n          name: string;\n          notCompleteCount: number;\n          overdueCount: number;\n        }[];\n      }>\n    >`\n        WITH OrgTree AS (SELECT \"descendantId\" AS org_id\n                         FROM \"OrganizationClosureTable\" oct\n                         WHERE oct.\"ancestorId\" = ${ orgId }),\n             OrgRoleTree AS (SELECT DISTINCT ON (r.uuid) r.uuid                    AS role_uuid,\n                                                         org_role.\"organizationId\" AS org_id,\n                                                         r.name                    as role_name\n                             FROM OrgTree ot\n                                      JOIN \"OrganizationsRoles\" org_role ON org_role.\"organizationId\" = ot.org_id\n                                      JOIN \"Role\" r ON r.uuid = org_role.\"roleId\"\n                             WHERE r.abbreviation NOT IN ('SUPERADMIN', 'ADMIN')\n                             GROUP BY org_role.uuid, r.uuid, org_role.\"organizationId\", r.name),\n             role_count AS (SELECT ort.role_uuid                                                         AS role_id,\n                                   ort.role_name                                                         AS role_name,\n                                   COALESCE(SUM(CASE\n                                                    WHEN ci.\"isComplete\" = false AND ci.\"createdAt\" <= NOW() - INTERVAL '30 days'\n                                                        THEN 1\n                                                    ELSE 0 END),\n                                            0)                                                           AS overdue_count,\n                                   COALESCE(SUM(CASE WHEN ci.\"isComplete\" = false THEN 1 ELSE 0 END), 0) AS not_complete_count\n                            FROM OrgRoleTree ort\n                                     LEFT JOIN \"TemplateItem\" ti ON ti.\"requiredRoleId\" = ort.role_uuid\n                                     LEFT JOIN \"Template\" t ON ti.\"templateId\" = t.id\n                                     LEFT JOIN \"ChecklistItem\" ci ON ci.\"templateItemId\" = ti.uuid\n                                     LEFT JOIN \"Checklist\" c ON ci.\"checklistId\" = c.id\n                                     LEFT JOIN \"UserProfile\" up ON c.\"userId\" = up.id -- AND up.\"currentOrgId\" IN (SELECT org_id FROM OrgTree) --WHERE up.\"currentOrgId\" IN (SELECT org_id FROM OrgTree)\n                            WHERE up.\"currentOrgId\" IS NULL\n                               OR up.\"currentOrgId\" IN (SELECT org_id FROM OrgTree)\n                            group by ort.role_uuid, ort.role_name)\n        SELECT json_agg(\n                       json_build_object(\n                               'id', ort.role_uuid, 'name', ort.role_name, 'overdueCount', coalesce(overdue_count, 0),\n                               'notCompleteCount', coalesce(not_complete_count, 0), 'roleId', ort.role_uuid\n                       )\n               ) as result              \n        FROM role_count rc\n                 RIGHT JOIN OrgRoleTree ort ON rc.role_id = ort.role_uuid;\n    `;\n\n    if (query[0].result) return query[0].result;\n    else return [];\n  }\n\n  async getByOrgAndRole(orgId: string, roleId: string) {\n    const result = await this.prisma.organizationsRoles.findFirst({\n      where: {\n        organizationId: orgId,\n        roleId,\n      },\n      include: {\n        role: true,\n      },\n    });\n\n    return result ? {\n      name: result.role.name,\n      description: result.role.description,\n      uuid: result.uuid,\n      abbreviation: result.role.abbreviation,\n      owningOrgId: result.organizationId,\n      roleId: result.role.uuid,\n    } : undefined;\n  }\n}\n","import { type PrismaClient, type Role, RoleLevel } from '@prisma/client';\nimport type { FindAllOptions } from '@repositories/organizationRole.server';\nimport dbServer from '@services/db.server';\nimport type { RoleDto } from './dtos';\nimport type { IRepository } from './Repository.server';\n\ninterface IRoleRepository extends IRepository<Role, RoleDto, RoleDto> {\n  getAllCustom(): Promise<any>;\n\n  findAllNotAssigned(orgId: string): Promise<any>;\n}\n\nexport class RoleRepository implements IRoleRepository {\n  public prisma;\n\n  constructor(prismaClient: PrismaClient) {\n    this.prisma = prismaClient;\n  }\n\n  public async getAll(): Promise<Role[]> {\n    return this.prisma.role.findMany({\n      where: {\n        abbreviation: { notIn: ['USER', 'ADMIN', 'SUPERADMIN'] },\n      },\n      orderBy: {\n        name: 'asc',\n      },\n    });\n  }\n\n  public async findByOrg(id: string, options: FindAllOptions) {\n    const notInArray = [];\n    if (!options?.includeAdmin) notInArray.push('ADMIN');\n    if (!options?.includeSuperAdmin) notInArray.push('SUPERADMIN');\n\n    const roles = this.prisma.role.findMany({\n      where: {\n        OR: [\n          { level: RoleLevel.BASE },\n          {\n            orgRoles: {\n              some: {\n                organizationId: id,\n              },\n            },\n          },\n          { abbreviation: options.includeUser ? 'USER' : undefined },\n        ],\n        abbreviation: {\n          notIn: notInArray,\n        },\n      },\n    });\n\n    return roles;\n  }\n\n  public async getAllCustom() {\n    return this.prisma.role.findMany({\n      where: {\n        AND: {\n          isRequired: false,\n          createdByOrgId: { not: null },\n          level: 'UNIT',\n          abbreviation: { notIn: ['USER', 'ADMIN', 'SUPERADMIN'] },\n        },\n      },\n      include: {\n        createdByOrg: {\n          select: {\n            id: true,\n            name: true,\n            abbreviation: true,\n          },\n        },\n      },\n    });\n  }\n\n  public async findAllNotAssigned(orgId: string, isWing: boolean = false /** or isBase */) {\n    return this.prisma.role.findMany({\n      where: {\n        AND: {\n          orgRoles: { none: {organizationId: orgId} },\n          level: isWing ? undefined : 'UNIT',\n          abbreviation: { notIn: ['USER', 'ADMIN', 'SUPERADMIN'] },\n        },\n      },\n      include: {\n        orgRoles: true,\n      },\n    });\n  }\n\n  public get(id: string): Promise<Role> {\n    return this.prisma.role.findFirstOrThrow({\n      where: { uuid: id },\n    });\n  }\n\n  public create(data: RoleDto): Promise<string> {\n    throw new Error('Method not implemented.');\n  }\n\n  public update(id: string, data: RoleDto): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  public async delete(id: string) {\n    await this.prisma.role.delete({\n      where: { uuid: id },\n    });\n  }\n}\n","/* eslint-disable import/prefer-default-export */\nimport { Models } from '@lib/models.server';\nimport type { MoveType, PrismaClient, Template } from '@prisma/client';\nimport type { TemplateDto } from './dtos';\nimport { Repository, type IRepository } from './Repository.server';\nimport type { ChecklistType } from '@lib/constants';\n\ninterface ITemplateRepository\n  extends IRepository<Template, TemplateDto, TemplateDto> {\n  getAllByOrgId(organizationId: string): Promise<any[]>;\n\n  getWithOwningOrg(id: string): Promise<any>;\n\n  getWithTemplateItems(id: string): Promise<any>;\n\n  getInheritedItems(firstTemplateId: string): Promise<{\n    templateItems: FlatArray<any[], 1>[];\n    type: any;\n    templateId: any;\n  }>;\n}\n\nexport class TemplateRepository implements ITemplateRepository {\n  public prisma;\n\n  constructor(prismaClient: PrismaClient) {\n    this.prisma = prismaClient;\n  }\n\n  public getAll(): Promise<Template[]> {\n    throw new Error('Method not implemented.');\n  }\n\n  public get(id: string): Promise<Template> {\n    throw new Error('Method not implemented.');\n  }\n\n  public async getAllByOrgId(organizationId: string) {\n    // return this org and lower\n    const firstOrg = await this.prisma.organization.findFirstOrThrow({\n      where: { uuid: organizationId },\n      include: {\n        templates: true,\n        subOrgs: true,\n      },\n    });\n\n    const templates = [...firstOrg.templates];\n\n    for (const subOrg of firstOrg.subOrgs) {\n      const result = await this.getAllByOrgId(subOrg.uuid);\n      templates.push(...result);\n    }\n\n    return templates;\n  }\n\n  public async getWithOwningOrg(id: string) {\n    return this.prisma.template.findFirstOrThrow({\n      where: { id },\n      include: {\n        owningOrganization: true,\n      },\n    });\n  }\n\n  public async getWithTemplateItems(id: string) {\n    return this.prisma.template.findFirstOrThrow({\n      where: { id },\n      select: {\n        id: true,\n        items: {\n          include: {\n            reference: true,\n          },\n        },\n        type: true,\n        organizationId: true,\n        name: true,\n        description: true,\n      },\n    });\n  }\n\n  public async create({\n    owningOrganizationId,\n    type,\n    name,\n    description,\n  }: TemplateDto): Promise<string> {\n\n\n    const newTemplate = await this.prisma.template.create({\n      data: {\n        name,\n        description,\n        type,\n        owningOrganization: { connect: { uuid: owningOrganizationId } },\n      },\n      select: {\n        id: true,\n      },\n    });\n\n    await this.updateFamilyTreeTemplates(owningOrganizationId, type, newTemplate.id);\n    \n    return newTemplate.id;\n  }\n\n  public async updateFamilyTreeTemplates(\n    uuid: string,\n    type: ChecklistType,\n    newTemplateId: string\n  )\n\n  {\n    const [ancestors, descendants] = await Models.org.findFamilyTree(uuid, false, type);\n\n    const ancestorTemplateIds = [];\n    const descendantTemplateIds = [];\n\n    for (const ancestor of ancestors) {\n      if (ancestor.templates?.length) {\n        const ancestorTemplate = ancestor.templates[0];\n        if (!ancestorTemplate.childTemplates.includes(newTemplateId) && ancestorTemplate.id !== newTemplateId)\n          ancestorTemplateIds.push(ancestorTemplate.id);\n      }\n    }\n    for (const descendant of descendants) {\n      if (descendant.templates?.length) {\n        const descendantTemplate = descendant.templates[0];\n        if (!descendantTemplate.inheritedFrom.includes(newTemplateId) && descendantTemplate.id !== newTemplateId)\n          descendantTemplateIds.push(descendantTemplate.id);\n      }\n    }\n    const data: { inheritedFrom?: string[]; childTemplates?: string[]} = {};\n    if (ancestorTemplateIds.length > 0)\n      data.inheritedFrom = ancestorTemplateIds;\n    if (descendantTemplateIds.length > 0)\n      data.childTemplates = descendantTemplateIds;\n\n    await this.prisma.template.update({\n      where: { id: newTemplateId },\n      data,\n    });\n    \n    if (ancestorTemplateIds.length > 0)\n      await this.prisma.$transaction(ancestorTemplateIds.map((ancestorTemplateId) =>\n        this.prisma.template.update({\n          where: { id: ancestorTemplateId },\n          data: {\n            childTemplates: {\n              push: newTemplateId,\n            },\n          },\n        })\n      ));\n\n    if (descendantTemplateIds.length > 0)\n      await this.prisma.$transaction(descendantTemplateIds.map((descendantTemplateId) =>\n        this.prisma.template.update({\n          where: { id: descendantTemplateId },\n          data: {\n            inheritedFrom: {\n              push: newTemplateId,\n            },\n          },\n        })\n      ));\n  }\n\n  public async update(\n    id: string,\n    { owningOrganizationId, type, description, name }: TemplateDto\n  ): Promise<void> {\n    await this.prisma.template.update({\n      where: { id },\n      data: {\n        name,\n        description,\n        type,\n        // organizationId: owningOrganizationId,\n      },\n    });\n  }\n\n  public async delete(id: string) {\n    const template = await this.prisma.template.findUniqueOrThrow({\n      where: { id },\n      include: { items: true },\n    });\n    if (template && template.items.length === 0)\n      return this.prisma.template.update({\n        where: { id },\n        data: { isDeleted: true },\n        select: { id: true },\n      });\n    else return -1;\n  }\n\n  public async getInheritedItems(firstTemplateId: string) {\n    // get owning org from first template\n    const firstTemplate = await this.prisma.template.findFirstOrThrow({\n      where: { id: firstTemplateId },\n      include: {\n        owningOrganization: true,\n      },\n    });\n\n    let orgId: string | null = firstTemplate.owningOrganization.uuid;\n    const templateItems = [];\n    // loop up the org tree grabbing each template that matches the type\n    while (orgId && orgId !== 'DAF') {\n      const parentOrg = await this.prisma.organization.findFirstOrThrow({\n        where: { uuid: orgId },\n        include: {\n          templates: {\n            where: {\n              type: firstTemplate.type,\n              isDeleted: false,\n            },\n            include: {\n              items: {\n                include: {\n                  reference: true,\n                },\n                where: {\n                  isDeleted: false,\n                },\n              },\n            },\n          },\n        },\n      });\n\n      for (const temp of parentOrg.templates) {\n        templateItems.push(temp.items);\n      }\n\n      if (parentOrg.templates.some((t: { type: string }) => t.type === 'SQ'))\n        break;\n\n      orgId = parentOrg.parentOrgId;\n    }\n\n    return {\n      type: firstTemplate.type,\n      templateId: firstTemplate.id,\n      templateItems: templateItems.flat(),\n    };\n    // add the items that match the user profile each time\n  }\n\n  async findByOrgAndType( orgId: string, moveType: MoveType ) {\n    return this.prisma.template.findFirstOrThrow( {\n      where: { owningOrganization: { uuid: orgId }, type: moveType },\n    } );\n  }\n}\n\n","import type { PrismaClient } from '@prisma/client';\n\nexport interface IRepository<BaseT, CreateT, UpdateT> {\n  prisma: PrismaClient;\n  getAll(): Promise<BaseT[]>;\n\n  get(id: string): Promise<BaseT>;\n\n  create(data: CreateT): Promise<string>;\n\n  update(id: string, data: UpdateT): Promise<any>;\n\n  delete(id: string): Promise<void>;\n}\n\n/**\n * Base Repository class that each model will inherit\n */\nexport abstract class Repository<BaseT, CreateT, UpdateT>\nimplements IRepository<BaseT, CreateT, UpdateT>\n{\n  public prisma: PrismaClient;\n\n  constructor(prismaClient: PrismaClient) {\n    this.prisma = prismaClient;\n  }\n\n  public abstract getAll(): Promise<BaseT[]>;\n\n  public abstract get(id: string): Promise<BaseT>;\n\n  public abstract create(data: CreateT): Promise<string>;\n\n  public abstract update(id: string, data: UpdateT): Promise<void>;\n\n  public abstract delete(id: string): Promise<void>;\n\n  buildUpdateData<T extends Record<string, any>>(dto: T, exclude?: string[]): Partial<T> {\n    return Object.fromEntries(\n      Object.entries(dto).filter(([key, value]) => value !== undefined && !exclude?.includes(key))\n    ) as Partial<T>;\n  }\n}\n","/* eslint-disable import/prefer-default-export */\nimport type { ChecklistType, TemplateItem } from '@prisma/client';\nimport type { TemplateItemDto, TemplateItemUpdateDto } from './dtos';\nimport { type IRepository, Repository } from './Repository.server';\nimport { Models } from '@lib/models.server';\n\ninterface ITemplateItemRepository\n  extends IRepository<TemplateItem, TemplateItemDto, TemplateItemUpdateDto> {\n  getWithRole(id: string): Promise<any>;\n}\n\nexport class TemplateItemRepository\n  extends Repository<TemplateItem, TemplateItemDto, TemplateItemUpdateDto>\n  implements ITemplateItemRepository\n{\n  public getAll(): Promise<TemplateItem[]> {\n    throw new Error('Method not implemented.');\n  }\n\n  public get(id: string): Promise<TemplateItem> {\n    throw new Error('Method not implemented.');\n  }\n\n  public async getWithRole(id: string) {\n    return this.prisma.templateItem.findFirstOrThrow({\n      where: { uuid: id },\n      include: {\n        reference: true,\n        requiredRole: true,\n      },\n    });\n  }\n\n  public async create({\n    templateId,\n    requiredRoleId,\n    name,\n    description = '',\n    forHasDependents,\n    forHasEFMP,\n    forDormResidents,\n  }: TemplateItemDto): Promise<string> {\n\n    const template = await this.prisma.template.findFirstOrThrow({\n      where: {\n        id: templateId,\n      },\n      include: {\n        owningOrganization: true,\n        userChecklists: true,\n      },\n    });\n\n    if (template.owningOrganization.uuid === 'DAF') {\n      const item = await this.prisma.templateItem.create({\n        data: {\n          name,\n          description,\n          forHasDependents,\n          forHasEFMP,\n          forDormResidents,\n          isTopLevel: true,\n          template: { connect: { id: templateId } },\n          requiredRole: { connect: { uuid: requiredRoleId } },\n        },\n        select: {\n          uuid: true,\n        },\n      });\n\n      const orgFlatArray = await Models.org.findDescendants(template.owningOrganization.uuid, false, template.type as ChecklistType);\n\n      const createInheritedItem = [];\n\n      for (const org of orgFlatArray.filter(org => org.isWingLevel)) {\n        if (org.templates && org.templates.length > 0) {\n          createInheritedItem.push( this.prisma.template.update( {\n            where: { id: org.templates[0].id },\n            data: {\n              items: {\n                create: {\n                  name: `Inherited from ${ name } (Level: ${ org.name })`,\n                  forHasDependents: forHasDependents,\n                  forHasEFMP: forHasEFMP,\n                  forDormResidents: forDormResidents,\n                  reference: { connect: { uuid: item.uuid } },\n                  requiredRole: { connect: { uuid: requiredRoleId } },\n                },\n              },\n            },\n          } ) );\n        }\n      }\n      await Promise.all(createInheritedItem);\n      return item.uuid;\n    }\n\n    const templateItemCreate = await this.prisma.templateItem.create({\n      data: {\n        name,\n        description,\n        forHasDependents,\n        forHasEFMP,\n        forDormResidents,\n        template: { connect: { id: templateId } },\n        requiredRole: { connect: { uuid: requiredRoleId } },\n      },\n      select: {\n        uuid: true,\n      },\n    });\n\n    // for await (const check of template.userChecklists) {\n    //   await this.prisma.checklistItem.create({\n    //     data: {\n    //       updatedAt: new Date(Date.now()),\n    //       templateItemId: templateItemCreate.uuid,\n    //       checklistId: check.id,\n    //     },\n    //   });\n    // }\n\n    const templateArray = [template.id, ...template.childTemplates];\n\n    for await (const templateId of templateArray) {\n      const templ = await this.prisma.template.findFirstOrThrow({\n        where: {\n          id: templateId,\n        },\n        include: {\n          userChecklists: true,\n        },\n      });\n\n      for await (const check of templ.userChecklists) {\n        await this.prisma.checklistItem.create({\n          data: {\n            updatedAt: new Date(Date.now()),\n            templateItemId: templateItemCreate.uuid,\n            checklistId: check.id,\n          },\n        });\n      }\n    }\n\n    // for await (const check of template.userChecklists) {\n    //   await this.prisma.checklistItem.deleteMany({\n    //     where: {\n    //       templateItemId: templateItemCreate.uuid,\n    //     },\n    //   });\n    // }\n\n    return templateItemCreate.uuid;\n  }\n\n  public async update(\n    id: string,\n    updateDto: TemplateItemUpdateDto\n  ): Promise<void> {\n    const data = this.buildUpdateData(updateDto);\n\n    await this.prisma.templateItem.update({\n      where: { uuid: id },\n      data,\n    });\n  }\n\n  public async delete(id: string): Promise<void> {\n    await this.prisma.templateItem.delete({ where: { uuid: id } });\n  }\n\n  public async getAllTemplateItems(): Promise<TemplateItem[]> {\n    return this.prisma.templateItem.findMany();\n  }\n}\n","// Any extra types or global constants go here\nimport type { BasicRoleInfo } from '@lib/types';\nimport type { Organization, Rank } from '@prisma/client';\nimport { Prisma } from '@prisma/client';\n\nexport enum ChecklistType {\n  PCS = 'PCS',\n  PCA = 'PCA',\n  SQ = 'SQ',\n}\n\nexport type UserRankType = {\n  [key in Rank]: { name: string; abb: string, order: number };\n};\n\nexport const UserRank: UserRankType = {\n  CIV: { name: 'Civilian', abb: 'Civ', order: 0 },\n  AB: { name: 'Airman Basic', abb: 'AB', order: 1 },\n  AMN: { name: 'Airman', abb: 'Amn', order: 2 },\n  A1C: { name: 'Airman First Class', abb: 'A1C', order: 3 },\n  SRA: { name: 'Senior Airman', abb: 'SrA', order: 4 },\n  SSGT: { name: 'Staff Sergeant', abb: 'SSgt', order: 5 },\n  TSGT: { name: 'Technical Sergeant', abb: 'TSgt', order: 6 },\n  MSGT: { name: 'Master Sergeant', abb: 'MSgt', order: 7 },\n  SMSGT: { name: 'Senior Master Sergeant', abb: 'SMSgt', order: 8 },\n  CMSgt: { name: 'Chief Master Sergeant', abb: 'CMSgt', order: 9 },\n  LT2: { name: '2nd Lieutenant', abb: '2d Lt', order: 10 },\n  LT1: { name: '1st Lieutenant', abb: '1st Lt', order: 11 },\n  CAPT: { name: 'Captain', abb: 'Capt', order: 12 },\n  MAJ: { name: 'Major', abb: 'Maj', order: 13 },\n  LTCOL: { name: 'Lieutenant Colonel', abb: 'Lt Col', order: 14 },\n  COL: { name: 'Colonel', abb: 'Col', order: 15 },\n  BGEN: { name: 'Brigadier General', abb: 'Brig Gen', order: 16 },\n  MGEN: { name: 'Major General', abb: 'Maj Gen', order: 17 },\n  LTGEN: { name: 'Lieutenant General', abb: 'Lt Gen', order: 18 },\n  GEN: { name: 'General', abb: 'Gen', order: 19 },\n};\n\ntype UserSelectOptions = {\n  includeMetadata?: boolean;\n  includeVerified?: boolean;\n  includeRoles?: boolean;\n  includePendingOrgs?: boolean;\n};\n\n// Width constants\nexport const TailwindWidth = {\n  W_0: 'w-0',\n  W_PX: 'w-px',\n  W_0_5: 'w-0.5',\n  W_1: 'w-1',\n  W_1_5: 'w-1.5',\n  W_2: 'w-2',\n  W_2_5: 'w-2.5',\n  W_3: 'w-3',\n  W_3_5: 'w-3.5',\n  W_4: 'w-4',\n  W_5: 'w-5',\n  W_6: 'w-6',\n  W_7: 'w-7',\n  W_8: 'w-8',\n  W_9: 'w-9',\n  W_10: 'w-10',\n  W_11: 'w-11',\n  W_12: 'w-12',\n  W_14: 'w-14',\n  W_16: 'w-16',\n  W_20: 'w-20',\n  W_24: 'w-24',\n  W_28: 'w-28',\n  W_32: 'w-32',\n  W_36: 'w-36',\n  W_40: 'w-40',\n  W_44: 'w-44',\n  W_48: 'w-48',\n  W_52: 'w-52',\n  W_56: 'w-56',\n  W_60: 'w-60',\n  W_64: 'w-64',\n  W_72: 'w-72',\n  W_80: 'w-80',\n  W_96: 'w-96',\n  W_AUTO: 'w-auto',\n  'W_1/2': 'w-1/2',\n  'W_1/3': 'w-1/3',\n  'W_2/3': 'w-2/3',\n  'W_1/4': 'w-1/4',\n  'W_2/4': 'w-2/4',\n  'W_3/4': 'w-3/4',\n  'W_1/5': 'w-1/5',\n  'W_2/5': 'w-2/5',\n  'W_3/5': 'w-3/5',\n  'W_4/5': 'w-4/5',\n  'W_1/6': 'w-1/6',\n  'W_2/6': 'w-2/6',\n  'W_3/6': 'w-3/6',\n  'W_4/6': 'w-4/6',\n  'W_5/6': 'w-5/6',\n  'W_1/12': 'w-1/12',\n  'W_2/12': 'w-2/12',\n  'W_3/12': 'w-3/12',\n  'W_4/12': 'w-4/12',\n  'W_5/12': 'w-5/12',\n  'W_6/12': 'w-6/12',\n  'W_7/12': 'w-7/12',\n  'W_8/12': 'w-8/12',\n  'W_9/12': 'w-9/12',\n  'W_10/12': 'w-10/12',\n  'W_11/12': 'w-11/12',\n  W_FULL: 'w-full',\n  W_SCREEN: 'w-screen',\n  W_MIN: 'w-min',\n  W_MAX: 'w-max',\n  W_FIT: 'w-fit',\n} as const;\n\n// Text align constants\nexport const TailwindTextAlign = {\n  LEFT: 'text-left',\n  CENTER: 'text-center',\n  RIGHT: 'text-right',\n  JUSTIFY: 'text-justify',\n  START: 'text-start',\n  END: 'text-end',\n} as const;\n\nexport const includeRoleInfo = {\n  include: {\n    role: {\n      select: {\n        id: true,\n        uuid: true,\n        name: true,\n        description: true,\n        abbreviation: true,\n        permissions: true,\n      },\n    },\n  },\n};\n\nexport const userAssignedOrgSelect = {\n  select: {\n    id: true,\n    name: true,\n    parentOrgId: true,\n    base: true,\n  },\n};\n\nexport const userProfileSelect = (options?: UserSelectOptions) => {\n  const { includeMetadata, includeVerified, includePendingOrgs } =\n    options ?? {};\n  return {\n    createdAt: includeMetadata ?? false,\n    updatedAt: includeMetadata ?? false,\n    emailVerified: includeVerified ?? false,\n    id: true,\n    dodId: true,\n    cssVerified: includeVerified ?? false,\n    name: true,\n    rank: true,\n    workEmail: true,\n    requestedOrg: true,\n    personalEmail: true,\n    personalPhone: true,\n    workPhone: true,\n    // sponsor: {\n    //   select: { id: true },\n    // },\n    // supervisor: {\n    //   select: { id: true },\n    // },\n    image: true,\n    isDormResident: true,\n    hasDependents: true,\n    sponsorReach: true,\n    hasEFMP: true,\n    hasGraduated: true,\n    isDeleted: true,\n    orgRoles: {\n      include: {\n        orgRole: {\n          include: {\n            role: true,\n          },\n        },\n      },\n    },\n    currentOrg: {\n      select: {\n        uuid: true,\n        name: true,\n        parentOrgId: true,\n        base: true,\n      },\n    },\n    previousOrg: includePendingOrgs\n      ? { ...userAssignedOrgSelect }\n      : { select: { uuid: true } },\n    nextOrg: includePendingOrgs\n      ? { ...userAssignedOrgSelect }\n      : { select: { uuid: true } },\n    moveType: true,\n  };\n};\n\nexport const accountWithProfile = Prisma.validator<Prisma.AccountDefaultArgs>()(\n  {\n    select: {\n      id: true,\n      password: true,\n      email: true,\n    },\n  }\n);\n\nexport type AccountWithProfile = Prisma.AccountGetPayload<\n  typeof accountWithProfile\n> & { profile: DefaultUserProfile };\n\nconst defaultUserProfile = Prisma.validator<Prisma.UserProfileDefaultArgs>()({\n  include: {\n    currentOrg: {\n      include: { base: true },\n    },\n    // sponsor: {\n    //   select: { id: true },\n    // },\n    // supervisor: {\n    //   select: { id: true },\n    // },\n    // checklists: {\n    //   where: {\n    //     isComplete: false,\n    //   },\n    // },\n    orgRoles: {\n      include: {\n        orgRole: {\n          include: {\n            role: true,\n          },\n        },\n      },\n    },\n  },\n});\n\nexport type DefaultUserProfile = Prisma.UserProfileGetPayload<\n  typeof defaultUserProfile\n>;\n\nexport type UserSessionData = {\n  roles: BasicRoleInfo[];\n  permissions: string;\n  email: string;\n  currentOrg: Organization;\n} & Omit<\n  DefaultUserProfile,\n  | 'emailVerified'\n  | 'createdAt'\n  | 'updatedAt'\n  | 'cssVerified'\n  | 'orgRoles'\n  | 'account'\n  | 'supervisorId'\n  | 'isDeleted'\n  | 'sponsorId'\n  | 'currentOrgId'\n  | 'currentOrg'\n  | 'previousOrgId'\n  | 'nextOrgId'\n  | 'moveType'\n  | 'isDormResident'\n  | 'hasDependents'\n  | 'hasEFMP'\n  | 'hasGraduated'\n  | 'sponsorReach'\n  | 'checklists'\n  | 'requestedOrgId'\n  | 'name'\n>;\n\nconst userWithChecklistsAndCount =\n  Prisma.validator<Prisma.UserProfileDefaultArgs>()({\n    select: {\n      ...userProfileSelect({\n        includeMetadata: true,\n        includeVerified: true,\n      }),\n      _count: {\n        select: {\n          checklists: true,\n        },\n      },\n      checklists: {\n        include: { template: true },\n      },\n    },\n  });\n\nexport type UserWithChecklistsAndCount = Prisma.UserProfileGetPayload<\n  typeof userWithChecklistsAndCount\n>;\n\nconst checklistWithItems = Prisma.validator<Prisma.ChecklistDefaultArgs>()({\n  include: {\n    template: true,\n    items: {\n      include: {\n        comments: {\n          include: {\n            postedBy: true,\n          },\n        },\n        completedBy: true,\n        updatedBy: true,\n        templateItem: {\n          include: {\n            requiredRole: true,\n          },\n        },\n      },\n    },\n  },\n});\n\nexport type ChecklistWithItems = Prisma.ChecklistGetPayload<\n  typeof checklistWithItems\n>;\n\nconst checklistItemWithTemplateAndUser = Prisma.validator<Prisma.ChecklistItemDefaultArgs>()({\n  include: {\n    templateItem: true,\n    checklist: {\n      include: {\n        user: true,\n      },\n    },\n  },\n});\n\nexport type ChecklistItemWithTemplateAndUser = Prisma.ChecklistItemGetPayload<typeof checklistItemWithTemplateAndUser>\n\nconst checklistWithTemplate = Prisma.validator<Prisma.ChecklistDefaultArgs>()({\n  select: {\n    id: true,\n    template: { select: { id: true, name: true, type: true } },\n  },\n});\n\nexport type ChecklistWithTemplate = Prisma.ChecklistGetPayload<\n  typeof checklistWithTemplate\n>;\n\nexport const organizationWithSubAndMembers =\n  Prisma.validator<Prisma.OrganizationDefaultArgs>()({\n    select: {\n      subOrgs: {\n        select: {\n          id: true,\n          uuid: true,\n        },\n      },\n      currentMembers: {\n        include: {\n          checklists: {\n            include: {\n              user: {\n                select: {\n                  id: true,\n                  workEmail: true,\n                  name: true,\n                  rank: true,\n                  currentOrg: {\n                    select: {\n                      uuid: true,\n                      id: true,\n                      name: true,\n                      abbreviation: true,\n                    },\n                  },\n                },\n              },\n              items: {\n                include: {\n                  templateItem: {\n                    include: {\n                      requiredRole: true,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  });\n\nexport const checklistWithUser =\n  Prisma.validator<Prisma.ChecklistItemDefaultArgs>()({\n    include: {\n      checklist: {\n        include: {\n          user: {\n            select: {\n              id: true,\n              name: true,\n              workEmail: true,\n              rank: true,\n            },\n          },\n        },\n      },\n    },\n  });\n\nconst checklistWithItemsAndUser =\n  Prisma.validator<Prisma.ChecklistDefaultArgs>()({\n    select: {\n      user: {\n        select: {\n          id: true,\n          workEmail: true,\n          name: true,\n          rank: true,\n          currentOrg: {\n            select: {\n              uuid: true,\n              id: true,\n              name: true,\n              abbreviation: true,\n              subOrgs: {\n                select: {\n                  uuid: true,\n                  id: true,\n                },\n              },\n            },\n          },\n        },\n      },\n      items: {\n        select: {\n          id: true,\n          createdAt: true,\n          dateCompleted: true,\n          updatedAt: true,\n          isComplete: true,\n          templateItem: {\n            include: {\n              requiredRole: true,\n            },\n          },\n          checklist: {\n            select: {\n              id: true,\n              user: {\n                select: {\n                  id: true,\n                  rank: true,\n                  name: true,\n                  workEmail: true,\n                  currentOrg: {\n                    select: {\n                      uuid: true,\n                      id: true,\n                      name: true,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  });\n\nexport type ChecklistWithItemsAndUser = Prisma.ChecklistGetPayload<\n  typeof checklistWithItemsAndUser\n>;\n\nconst orgRoleWithData = Prisma.validator<Prisma.OrganizationsRolesDefaultArgs>()({\n  ...includeRoleInfo,\n});\n\nexport type OrgRoleWithInfo = Prisma.OrganizationsRolesGetPayload<\n  typeof orgRoleWithData\n>;\n\nconst orgWithOutBoundMembers =\n  Prisma.validator<Prisma.OrganizationDefaultArgs>()({\n    select: {\n      outboundMembers: {\n        select: {\n          id: true,\n          name: true,\n          workEmail: true,\n          personalEmail: true,\n          workPhone: true,\n          personalPhone: true,\n          updatedAt: true,\n          nextOrg: true,\n          previousOrg: true,\n          currentOrg: true,\n          moveType: true,\n          checklists: true,\n          supervisor: {\n            select: { name: true, workEmail: true },\n          },\n        },\n      },\n    },\n  });\n\nexport type OrgWithOutBoundMembers = Prisma.OrganizationGetPayload<\n  typeof orgWithOutBoundMembers\n>;\n\nconst orgWithInboundMembers =\n  Prisma.validator<Prisma.OrganizationDefaultArgs>()({\n    select: {\n      uuid: true,\n      id: true,\n      inboundMembers: {\n        select: {\n          id: true,\n          name: true,\n          workEmail: true,\n          personalEmail: true,\n          workPhone: true,\n          personalPhone: true,\n          updatedAt: true,\n          nextOrg: true,\n          previousOrg: true,\n          currentOrg: true,\n          moveType: true,\n          supervisor: { select: { name: true, workEmail: true } },\n          checklists: {\n            select: {\n              id: true,\n              template: {\n                select: {\n                  id: true,\n                  name: true,\n                  description: true,\n                  type: true,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  });\n\nexport type OrgWithInboundMembers = Prisma.OrganizationGetPayload<\n  typeof orgWithInboundMembers\n>;\n\nconst orgWithDescendants = Prisma.validator<Prisma.OrganizationDefaultArgs>()({\n  include: { children: true, templates: true, orgRoles: true },\n});\n\nexport type OrgWithDescendants = Prisma.OrganizationGetPayload<\n  typeof orgWithDescendants\n>;\n\nconst orgRoot = Prisma.validator<Prisma.OrganizationDefaultArgs>()({\n  include: { children: true, templates: true, orgRoles: true },\n});\n\nexport type OrgRoot = Prisma.OrganizationGetPayload<typeof orgRoot>;\n\nconst orgAncestor = Prisma.validator<Prisma.OrganizationDefaultArgs>()({\n  include: { parent: true },\n});\n\nexport type OrgAncestorTree = Prisma.OrganizationGetPayload<typeof orgAncestor>;\n\nexport const orgRoleWithCount =\n  Prisma.validator<Prisma.OrganizationsRolesDefaultArgs>()({\n    include: {\n      role: true,\n      _count: {\n        select: {\n          users: true,\n        },\n      },\n    },\n  });\n\nconst orgRoleWithUsers = Prisma.validator<Prisma.OrganizationsRolesDefaultArgs>()(\n  {\n    include: {\n      role: true,\n      users: { include: { user: true } },\n    },\n  }\n);\n\nexport type OrgRoleWithUsers = Prisma.OrganizationsRolesGetPayload<\n  typeof orgRoleWithUsers\n>;\n\nconst templateWithItems = Prisma.validator<Prisma.TemplateDefaultArgs>()({\n  include: {\n    items: true,\n  },\n});\n\nexport type TemplateWithItems = Prisma.TemplateGetPayload<\n  typeof templateWithItems\n>;\n\nconst orgWithTemplates = Prisma.validator<Prisma.OrganizationDefaultArgs>()({\n  include: {\n    templates: true,\n  },\n});\n\nexport type OrgWithTemplates = Prisma.OrganizationGetPayload<\n  typeof orgWithTemplates\n>;\n\n// Edit 'getUserChecklists' in checklist.server.ts for the query.\nconst checklistItemWithTemplate =\n  Prisma.validator<Prisma.ChecklistItemDefaultArgs>()({\n    include: {\n      comments: {\n        include: {\n          postedBy: true,\n        },\n      },\n      completedBy: true,\n      updatedBy: true,\n      templateItem: {\n        include: {\n          requiredRole: true,\n        },\n      },\n    },\n  });\n\nexport type ChecklistItemWithTemplate = Prisma.ChecklistItemGetPayload<\n  typeof checklistItemWithTemplate\n>;\n\nconst orgRoleWithChecklistItems =\n  Prisma.validator<Prisma.OrganizationsRolesDefaultArgs>()({\n    select: {\n      id: true,\n      uuid: true,\n      role: {\n        select: {\n          abbreviation: true,\n          description: true,\n          level: true,\n          templateItems: {\n            select: {\n              id: true,\n              name: true,\n              usedByChecklistItems: {\n                select: {\n                  id: true,\n                  createdAt: true,\n                  dateCompleted: true,\n                  userComplete: true,\n                  isDeleted: true,\n                  comments: {\n                    include: {\n                      postedBy: true,\n                    },\n                  },\n                  updatedAt: true,\n                  isComplete: true,\n                  completedBy: true,\n                  updatedBy: true,\n                  templateItem: {\n                    select: {\n                      id: true,\n                      name: true,\n                      description: true,\n                      template: {\n                        select: {\n                          id: true,\n                          name: true,\n                          type: true,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  });\n\nexport type OrgRoleWithChecklistItems = Prisma.OrganizationsRolesGetPayload<\n  typeof orgRoleWithChecklistItems\n>;\n","import type { OrgRoleWithInfo } from '@lib/constants';\nimport type { BasicRoleInfo } from '@lib/types';\nimport { type RoleLevel } from '@prisma/client';\nimport * as argon from 'argon2';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError } from 'remix-toast';\nimport { ZodError } from 'zod';\nimport * as Sentry from '@sentry/remix';\n\nexport const decodePermissions = (\n  orgRoles: Array<{\n    userId: string;\n    orgRoleId: string;\n    orgRole: {\n      id: number;\n      uuid: string;\n      organizationId: string;\n      contactPhone: string;\n      contactEmail: string;\n      isDeleted: boolean;\n      roleId: string;\n      role: {\n        id: number;\n        uuid: string;\n        name: string;\n        abbreviation: string;\n        description: string;\n        permissions: string;\n        level: RoleLevel;\n        isRequired: boolean;\n        isDeleted: boolean;\n        createdByOrgId: string;\n      }\n    }\n  }>\n): [BasicRoleInfo[], string] => {\n  //const { roles } = await db.user.findFirstOrThrow({ where: { id: userId }, select: { roles: true } });\n  const basicInfoRole: BasicRoleInfo[] = [];\n  const permissions = new Map<string, string[]>();\n\n  if (!Array.isArray(orgRoles)) throw new Error('Roles should be an array.');\n\n  orgRoles.forEach((item) => {\n    if (item.orgRole.role.permissions.length > 0) {\n      const newPerms = new Map<string, string[]>(\n        JSON.parse(atob(item.orgRole.role.permissions))\n      );\n      newPerms.forEach((value, key) => {\n        if (!permissions.has(key)) permissions.set(key, value);\n      });\n      basicInfoRole.push({\n        id: item.orgRoleId,\n        name: item.orgRole.role.name,\n        description: item.orgRole.role.description,\n        abbreviation: item.orgRole.role.abbreviation,\n        owningOrgId: item.orgRole.organizationId,\n        roleId: item.orgRole.roleId,\n      });\n    }\n  });\n\n  return [basicInfoRole, JSON.stringify(Array.from(permissions))];\n};\n\nexport const hashPassword = async (plainText: string) => argon.hash(plainText);\n\nexport function isSuperAdmin(roles: BasicRoleInfo[]) {\n  return !!roles.find((role) => role.abbreviation === 'SUPERADMIN');\n}\n\nexport function isAdmin(roles: BasicRoleInfo[]) {\n  return !!roles.find((role) => role.abbreviation === 'ADMIN');\n}\n\nexport function handleActionError(e: unknown, toastMsg: string) {\n  console.error(e);\n  Sentry.captureException(e);\n\n  if (e instanceof Error) {\n    if (e instanceof AuthorizationError) {\n      return jsonWithError(\n        { status: 'error', error: 'Authorization Error.' },\n        'User is not authorized.'\n      );\n    }\n    if (e instanceof ZodError) {\n      return jsonWithError(\n        { status: 'error', message: 'validation error', errors: e.errors },\n        toastMsg\n      );\n    }\n    return jsonWithError(\n      { status: 'error', message: e.message },\n      toastMsg\n    );\n  }\n}\n","import {\n  type DefaultUserProfile,\n  userProfileSelect,\n  type UserSessionData,\n} from '@lib/constants';\nimport { decodePermissions, hashPassword } from '@lib/utils/utils.server';\nimport type { MoveType, Prisma, PrismaClient, Rank } from '@prisma/client';\nimport type { UserDto, UserRegisterDto, UserUpdateDto } from './dtos';\nimport type { IRepository } from './Repository.server';\n\nexport type GetUserOptions = {\n  excludeUserId?: string;\n  includeChecklists?: boolean;\n};\n\nexport type MoveData = {\n  moveType: MoveType;\n  nextOrg?: string | null;\n  previousOrg?: string;\n};\n\ninterface IUserRepository\n  extends IRepository<DefaultUserProfile, UserDto, UserUpdateDto> {\n  currentDate: Date;\n  sevenDaysAgo: Date;\n\n  getWithNextOrg(id: string): Promise<any>;\n\n  getAllChecklistTimes(): Promise<any>;\n\n  getAllNewUsers(): Promise<any>;\n\n  getAllChecklists(): Promise<any>;\n\n  getIncomingChecklist(): Promise<any>;\n\n  getOutgoingChecklist(): Promise<any>;\n\n  getWithChecklistsById(id: string): Promise<any>;\n\n  getByEmail(email: string): Promise<any>;\n\n  getAccountByEmail(email: string): Promise<any>;\n\n  getRoles(userId: string): Promise<any>;\n\n  register(data: UserRegisterDto): Promise<any>;\n\n  // updateProfile(id: string, inputs: UserUpdateDto): Promise<void>;\n\n  updateAccount(\n    profileId: string,\n    {\n      name,\n      workEmail,\n      password,\n      // dodId,\n    }: Omit<\n      UserUpdateDto,\n      | 'profileOrAccount'\n      | 'rank'\n      | 'personalEmail'\n      | 'personalPhone'\n      | 'workPhone'\n      | 'sponsor'\n      | 'userId'\n    >,\n  ): Promise<void>;\n\n  deleteUserAccount(id: string): Promise<void>;\n\n  getAllByOrg(\n    orgId: string,\n    options: GetUserOptions,\n  ): Promise<DefaultUserProfile[]>;\n\n  getAllByBase(\n    baseId: string,\n    options: GetUserOptions,\n  ): Promise<DefaultUserProfile[]>;\n\n  verify(id: string): Promise<void>;\n\n  startMove(id: string, data: MoveData): Promise<void>;\n\n  editMove(id: string, data: MoveData): Promise<void>;\n\n  acceptMove(id: string, currentOrgId: string): Promise<void>;\n\n  cancelMove(id: string): Promise<void>;\n\n  /**\n   * Searches the user table for the specified email or throws an error\n   * @param {FormDataEntryValue} email\n   */\n  findAccount(email: FormDataEntryValue | undefined): Promise<any>;\n\n  getAccount(id: string): Promise<any>;\n\n  getSessionObject(id: string): Promise<any>;\n\n  generateUserObject(user: DefaultUserProfile): UserSessionData;\n}\n\nexport class UserRepository implements IUserRepository {\n  public prisma;\n\n  constructor(prismaClient: PrismaClient) {\n    this.prisma = prismaClient;\n  }\n\n  public async getWithNextOrg(id: string) {\n    return this.prisma.userProfile.findFirstOrThrow({\n      where: { id },\n      select: {\n        ...userProfileSelect({\n          includeVerified: true,\n        }),\n        nextOrg: true,\n        previousOrg: true,\n        currentOrg: true,\n        moveType: true,\n        orgRoles: {\n          include: {\n            orgRole: {\n              include: {\n                role: true,\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n\n  public async getAll() {\n    return (await this.prisma.userProfile.findMany({\n      where: { cssVerified: { not: null }, isDeleted: false },\n      select: {\n        ...userProfileSelect({\n          includeVerified: true,\n        }),\n        id: true,\n        workEmail: true,\n        orgRoles: {\n          include: {\n            orgRole: {\n              include: {\n                role: true,\n              },\n            },\n          },\n        },\n      },\n    })) as unknown as DefaultUserProfile[];\n  }\n\n  public async getAllUser(orgId: string) {\n    const baseId = await this.prisma.organization.findUnique({\n      where: {\n        uuid: orgId,\n      },\n      select: {\n        baseId: true,\n      },\n    });\n\n    console.log('base', baseId);\n\n    if(!baseId){\n      throw new Error('Organization not found or has no baseId');\n    }\n\n    const organizations = await this.prisma.organization.findMany({\n      where: {\n        baseId: baseId?.baseId,\n        isDeleted: false,\n      },\n      select: {\n        uuid: true,\n      },\n    });\n\n    const allUsers = await this.prisma.userProfile.findMany({\n      where: {\n        isDeleted: false,\n        currentOrgId: {\n          in: organizations.map(org => org.uuid),\n        },\n      },\n      select: {\n        id: true,\n        currentOrgId: true,\n        name: true,\n        rank: true,\n      },\n    });\n\n    return allUsers;\n  }\n\n  public async getAllChecklistTimes() {\n    return this.prisma.checklist.findMany({\n      select: {\n        createdAt: true,\n      },\n    });\n  }\n\n  public currentDate = new Date();\n  public sevenDaysAgo = new Date(\n    this.currentDate.getTime() - 7 * 24 * 60 * 60 * 1000\n  );\n\n  public async getAllNewUsers() {\n    return this.prisma.userProfile.findMany({\n      where: {\n        isDeleted: false,\n        createdAt: {\n          gte: this.sevenDaysAgo,\n        },\n      },\n      select: {\n        ...userProfileSelect({\n          includeVerified: true,\n        }),\n        orgRoles: {\n          include: {\n            orgRole: {\n              include: {\n                role: true,\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n\n  public async getAllChecklists() {\n    return this.prisma.checklist.findMany({\n      where: { isComplete: false },\n    });\n  }\n\n  public async getIncomingChecklist() {\n    return this.prisma.checklist.findMany({});\n  }\n\n  public async getOutgoingChecklist() {\n    return this.prisma.checklist.findMany({});\n  }\n\n  public async get(id: string) {\n    return this.prisma.userProfile.findFirstOrThrow({\n      where: { id, isDeleted: false },\n      select: {\n        ...userProfileSelect({\n          includeVerified: true,\n        }),\n        id: true,\n        workEmail: true,\n        requestedOrg: true,\n        supervisorId: true,\n        sponsorId: true,\n        currentOrgId: true,\n        orgRoles: {\n          include: {\n            orgRole: {\n              include: {\n                role: true,\n              },\n            },\n          },\n        },\n      },\n    }) as unknown as DefaultUserProfile;\n  }\n\n  public async getWithChecklistsById(id: string) {\n    return this.prisma.userProfile.findFirstOrThrow({\n      select: {\n        ...userProfileSelect(),\n        moveType: true,\n        checklists: {\n          where: {\n            isComplete: false,\n          },\n          select: {\n            id: true,\n            template: { select: { id: true, name: true, type: true } },\n          },\n        },\n      },\n      where: { id },\n    });\n  }\n\n  public async getByEmail(email: string) {\n    return this.prisma.userProfile.findFirstOrThrow({\n      where: { workEmail: email },\n      select: {\n        ...userProfileSelect({\n          includeVerified: true,\n        }),\n        orgRoles: {\n          include: {\n            orgRole: {\n              include: {\n                role: true,\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n\n  public async getAccountByProfile(profileId: string) {\n    return this.prisma.userProfile.findFirstOrThrow({\n      where: {\n        id: profileId,\n        cssVerified: { not: null },\n        isDeleted: false,\n      },\n      select: {\n        id: true,\n        workEmail: true,\n        workPhone: true,\n        name: true,\n        rank: true,\n        personalEmail: true,\n        personalPhone: true,\n        supervisorId: true,\n        sponsorId: true,\n        requestedOrg: true,\n        currentOrg: true,\n        supervisor: {\n          select: {\n            id: true,\n            name: true,\n            rank: true,\n            workEmail: true,\n          },\n        },\n        sponsor: {\n          select: {\n            id: true,\n            name: true,\n            rank: true,\n            workEmail: true,\n          },\n        },\n        orgRoles: {\n          include: {\n            orgRole: {\n              include: {\n                role: true,\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n  \n  \n\n  public async getAccountByEmail(email: string) {\n    return this.prisma.account.findUniqueOrThrow({\n      where: { email },\n      select: {\n        id: true,\n        email: true,\n        profile: {\n          select: {\n            ...userProfileSelect({\n              includeVerified: true,\n            }),\n            id: true,\n            orgRoles: {\n              include: {\n                orgRole: {\n                  include: {\n                    role: true,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n\n  public async getRoles(userId: string) {\n    const user = await this.prisma.userProfile.findFirstOrThrow({\n      where: {\n        id: userId,\n      },\n      include: {\n        orgRoles: {\n          include: {\n            orgRole: {\n              include: {\n                role: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    return user.orgRoles;\n    // return this.prisma.organizationsRoles.findMany({\n    //   where: {\n    //     userId,\n    //   },\n    //   include: {\n    //     role: true,\n    //   },\n    // });\n  }\n\n  public async findMany(select: Prisma.UserProfileSelect, where?: Prisma.UserProfileWhereInput) {\n    return this.prisma.userProfile.findMany({select, where});\n  }\n\n  public async create(data: UserRegisterDto) {\n    const { password: plainText, profile, assignChecklist, moveType } = data;\n\n    const {\n      name,\n      rank,\n      personalEmail,\n      personalPhone,\n      workEmail,\n      workPhone,\n      hasDependents,\n      isDormResident,\n      hasEFMP,\n      cssVerified,\n      currentOrgId: nextOrg,\n    } = profile;\n\n    const account = await this.prisma.account.create({\n      data: {\n        email: profile.workEmail,\n        password: await hashPassword(plainText),\n        profile: {\n          create: {\n            name,\n            workEmail,\n            personalEmail,\n            personalPhone,\n            workPhone,\n            hasDependents,\n            isDormResident,\n            hasEFMP,\n            rank,\n            cssVerified: new Date(Date.now()),\n            nextOrg: {\n              connect: {\n                uuid: nextOrg,\n              },\n            },\n            currentOrg: {\n              connect: {\n                uuid: nextOrg,\n              },\n            },\n            moveType,\n            // dodId,\n            // sponsorId: sponsor.id,\n            // supervisorId: supervisor.id,\n          },\n        },\n      },\n      select: {\n        profile: true,\n      },\n    });\n\n    if (!account.profile)\n      throw new Error('There was an error creating the profile.');\n\n    return account.profile;\n  }\n\n  public async register(data: UserRegisterDto) {\n    const { password: plainText, profile } = data;\n\n    const {\n      name,\n      rank,\n      personalEmail,\n      personalPhone,\n      workEmail,\n      workPhone,\n      hasDependents,\n      isDormResident,\n      hasEFMP,\n      cssVerified,\n      currentOrgId: requestedOrg,\n    } = profile;\n\n    const account = await this.prisma.account.create({\n      data: {\n        email: profile.workEmail,\n        password: await hashPassword(plainText),\n        profile: {\n          create: {\n            name,\n            rank,\n            personalEmail,\n            personalPhone,\n            workEmail,\n            workPhone,\n            hasDependents,\n            isDormResident,\n            hasEFMP,\n            cssVerified,\n            requestedOrg: {\n              connect: {\n                uuid: requestedOrg,\n              },\n            },\n            currentOrg: {\n              connect: {\n                uuid: 'GLOBAL',\n              },\n            },\n          },\n        },\n      },\n      select: {\n        id: true,\n        profile: {\n          select: {\n            workEmail: true,\n            name: true,\n            currentOrgId: true,\n          },\n        },\n      },\n    });\n\n    return account.id;\n  }\n\n  public async updateSub(supervisorId: string, userId: string) {\n    const supervisor = await this.prisma.userProfile.update({\n      where: { id: userId},\n      data: {\n        supervisorId,\n      },\n    });\n\n    return supervisor;\n  }\n\n  public async updateProfileWithSponsor(sponsorId: string, userId: string) {\n    const sponsor = await this.prisma.userProfile.update({\n      where: {id: userId},\n      data: {\n        sponsorId,\n      },\n    });\n\n    return sponsor;\n  }\n\n  public async update(id: string, inputs: UserUpdateDto) {\n    const {\n      name,\n      personalEmail,\n      personalPhone,\n      workEmail,\n      workPhone,\n      password,\n      hasDependents,\n      isDormResident,\n      hasEFMP,\n      hasGraduated,\n      cssVerified,\n      moveType,\n      nextOrg,\n      rank,\n      assignedOrg,\n    } = inputs;\n\n    let hashed;\n    if (password && password !== '') {\n      hashed = await hashPassword(password);\n    }\n\n    let data: {\n      name: string;\n      updatedAt: Date;\n      workEmail: string;\n      hasDependents?: boolean | null;\n      isDormResident?: boolean | null;\n      hasEFMP?: boolean | null;\n      hasGraduated?: boolean | null;\n      cssVerified?: Date;\n      personalEmail?: string;\n      personalPhone?: string;\n      workPhone?: string;\n      rank?: Rank;\n      currentOrgId?: string;\n      nextOrgId?: string;\n      moveType?: MoveType;\n      subordinateId?: string;\n    } = {\n      name,\n      workEmail,\n      updatedAt: new Date(Date.now()),\n    };\n\n    if (rank) data.rank = rank;\n    if (cssVerified) data.cssVerified = cssVerified;\n    if (personalEmail) data.personalEmail = personalEmail;\n    if (personalPhone) data.personalPhone = personalPhone;\n    if (workPhone) data.workPhone = workPhone;\n    if (hasDependents) data.hasDependents = hasDependents;\n    if (isDormResident) data.isDormResident = isDormResident;\n    if (hasEFMP) data.hasEFMP = hasEFMP;\n    if (hasGraduated) data.hasGraduated = hasGraduated;\n    if (assignedOrg) data.currentOrgId = assignedOrg;\n    if (nextOrg) data.nextOrgId = nextOrg;\n    if (moveType) data.moveType = moveType;\n\n    const profile = await this.prisma.userProfile.update({\n      where: { id },\n      data,\n      include: {\n        account: {\n          select: {\n            id: true,\n          },\n        },\n        checklists: {\n          where: {\n            isComplete: false,\n          },\n          select: {\n            id: true,\n            template: { select: { id: true, name: true, type: true } },\n          },\n        },\n      },\n    });\n\n    if (!profile || !profile.account)\n      throw new Error('There was an error updating the profile.');\n\n    if (password && password !== '' && hashed !== '') {\n      await this.prisma.account.update({\n        where: { id: profile.account.id },\n        data: {\n          password: hashed,\n        },\n      });\n    }\n    return profile;\n  }\n\n  public async updateAccount(\n    profileId: string,\n    {\n      name,\n      workEmail,\n      password,\n      // dodId,\n    }: Omit<\n      UserUpdateDto,\n      | 'profileOrAccount'\n      | 'rank'\n      | 'personalEmail'\n      | 'personalPhone'\n      | 'workPhone'\n      | 'sponsor'\n      | 'userId'\n    >\n  ) {\n    let hashed;\n    if (password && password !== '') {\n      hashed = await hashPassword(password);\n    }\n\n    const profile = await this.prisma.userProfile.update({\n      where: { id: profileId },\n      data: {\n        name,\n        workEmail,\n        updatedAt: new Date(Date.now()),\n        // supervisorId,\n        // dodId,\n      },\n      select: {\n        id: true,\n        account: {\n          select: {\n            id: true,\n          },\n        },\n      },\n    });\n\n    if (!profile || !profile.account)\n      throw new Error('There was an error updating the profile.');\n\n    if (password && password !== '' && hashed !== '') {\n      await this.prisma.account.update({\n        where: { id: profile.account.id },\n        data: {\n          password: hashed,\n        },\n      });\n    }\n  }\n\n  public delete(id: string): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  public async deleteUserAccount(id: string) {\n    const deleteChecklists = this.prisma.userProfile.update({\n      where: {\n        id,\n      },\n      data: {\n        checklists: {\n          deleteMany: {},\n        },\n      },\n    });\n    const deleteProfile = this.prisma.userProfile.delete({\n      where: { id },\n    });\n\n    await this.prisma.$transaction([deleteChecklists, deleteProfile]);\n  }\n\n  public async getAllByOrg(orgId: string, options?: GetUserOptions) {\n    const excludeUserId = options?.excludeUserId;\n    const includeChecklists = options?.includeChecklists;\n\n    const excludeUser = excludeUserId ? { not: excludeUserId } : {};\n    const checklistCount = includeChecklists\n      ? {\n        _count: {\n          select: {\n            checklists: {\n              where: { isComplete: false, isDeleted: false },\n            },\n          },\n        },\n        checklists: {\n          where: {\n            isComplete: false,\n          },\n          include: { template: true },\n        },\n      }\n      : {};\n\n    return this.prisma.userProfile.findMany({\n      select: {\n        ...userProfileSelect({\n          includeMetadata: true,\n          includeVerified: true,\n        }),\n        ...checklistCount,\n        moveType: true,\n        supervisor: true,\n      },\n      where: {\n        AND: {\n          currentOrg: { uuid: orgId },\n          id: { ...excludeUser },\n          isDeleted: false,\n        },\n      },\n      orderBy: {\n        cssVerified: 'desc',\n      },\n    });\n  }\n\n  public async getAllFromOrgTree(orgId: string) {\n    return this.prisma.$queryRaw<{\n      id: string; name: string;\n    }[]>`SELECT id, name FROM \"UserProfile\" WHERE \"currentOrgId\" IN (SELECT \"descendantId\" FROM \"OrganizationClosureTable\" WHERE \"ancestorId\" = ${orgId});`;\n  }\n\n  public async getAllOnboardingUsers() {\n    return this.prisma.userProfile.findMany({\n      select: {\n        ...userProfileSelect({\n          includeMetadata: true,\n          includeVerified: true,\n        }),\n        moveType: true,\n        supervisor: true,\n        requestedOrg: true,\n      },\n      where: {\n        AND: {\n          currentOrg: { uuid: 'GLOBAL' },\n          isDeleted: false,\n        },\n      },\n      orderBy: {\n        cssVerified: 'desc',\n      },\n    });\n  }\n\n  public async getAllByBase(baseId: string, options?: GetUserOptions) {\n    const excludeUserId = options?.excludeUserId;\n    const includeChecklists = options?.includeChecklists;\n\n    const excludeUser = excludeUserId ? { not: excludeUserId } : {};\n    const checklistCount = includeChecklists\n      ? {\n        _count: {\n          select: {\n            checklists: {\n              where: { isComplete: false },\n            },\n          },\n        },\n        checklists: {\n          where: { isComplete: false },\n          include: { template: true },\n        },\n      }\n      : {};\n\n    return this.prisma.userProfile.findMany({\n      select: {\n        ...userProfileSelect({\n          includeMetadata: true,\n          includeVerified: true,\n        }),\n        ...checklistCount,\n        moveType: true,\n        supervisor: true,\n      },\n      where: {\n        AND: {\n          currentOrg: { base: { uuid: baseId } },\n          id: { ...excludeUser },\n        },\n      },\n      orderBy: {\n        cssVerified: 'desc',\n      },\n    });\n  }\n\n  public async verify(id: string) {\n    await this.prisma.userProfile.update({\n      where: { id },\n      data: { cssVerified: new Date(Date.now()) },\n    });\n  }\n\n  public async startMove(id: string, data: MoveData) {\n    const { moveType, nextOrg, previousOrg } = data;\n    const today = new Date(Date.now());\n    await this.prisma.userProfile.update({\n      where: { id },\n      data: {\n        nextOrgId: nextOrg,\n        updatedAt: today,\n        previousOrgId: previousOrg,\n        moveType,\n      },\n    });\n  }\n\n  public async editMove(id: string, data: MoveData) {\n    const { nextOrg, moveType } = data;\n    const today = new Date(Date.now());\n    if (!nextOrg) {\n      await this.prisma.userProfile.update({\n        where: { id },\n        data: {\n          updatedAt: today,\n          moveType,\n          nextOrgId: null,\n        },\n      });\n    } else {\n      await this.prisma.userProfile.update({\n        where: { id },\n        data: {\n          nextOrgId: nextOrg,\n          updatedAt: today,\n          moveType,\n        },\n      });\n    }\n  }\n\n  public async acceptMove(id: string, currentOrgId: string, previousOrgId: string) {\n    const today = new Date(Date.now());\n\n    await this.prisma.userProfile.update({\n      where: { id },\n      data: {\n        currentOrgId,\n        updatedAt: today,\n        previousOrgId: null,\n      },\n    });\n\n    await this.prisma.usersOrganizationRoles.deleteMany({\n      where: {\n        orgRole: { organizationId: previousOrgId },\n        userId: id,\n      },\n    });\n  }\n\n  public async removeSuper(userId: string){\n    return (await this.prisma.userProfile.update({\n      where: { id: userId },\n      data:{\n        supervisorId: null,\n      },\n    }));\n  }\n  public async removeSponsor(userId: string){\n    return (await this.prisma.userProfile.update({\n      where: { id: userId },\n      data:{\n        sponsorId: null,\n      },\n    }));\n  }\n\n  public async cancelMove(id: string) {\n    const today = new Date(Date.now());\n\n    await this.prisma.userProfile.update({\n      where: { id },\n      data: {\n        nextOrgId: null,\n        previousOrgId: null,\n        updatedAt: today,\n        moveType: null,\n      },\n    });\n  }\n\n  /**\n   * Searches the user table for the specified email or throws an error\n   * @param {FormDataEntryValue} email\n   */\n  public async findAccount(email: FormDataEntryValue | undefined) {\n    if (!email || typeof email !== 'string') {\n      throw new Error('email needs to be a string');\n    }\n\n    return this.prisma.account.findUniqueOrThrow({\n      where: { email, profile: { cssVerified: { not: null } } },\n      select: {\n        id: true,\n        password: true,\n        email: true,\n        profileId: true,\n      },\n    });\n  }\n\n  public async getAccount(id: string) {\n    const result = await this.prisma.account.findUniqueOrThrow({\n      where: { id, profile: { cssVerified: { not: null }, isDeleted: false } },\n      select: {\n        id: true,\n        password: false,\n        email: true,\n        profile: {\n          include: {\n            currentOrg: {\n              include: {\n                base: true,\n              },\n            },\n            orgRoles: {\n              include: {\n                orgRole: {\n                  include: {\n                    role: true,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n\n    if (!result.profile) throw new Error('Profile not found.');\n\n    return this.generateUserObject(result.profile);\n  }\n\n  public async getSessionObject(id: string) {\n    const result = await this.prisma.userProfile.findUniqueOrThrow({\n      where: { id, cssVerified: { not: null }, isDeleted: false },\n      include: {\n        currentOrg: {\n          include: {\n            base: true,\n          },\n        },\n        orgRoles: {\n          include: {\n            orgRole: {\n              include: {\n                role: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    return this.generateUserObject(result);\n  }\n\n  public async countAll() {\n    return this.prisma.userProfile.count();\n  }\n\n  public async countNew() {\n    return this.prisma.userProfile.count({\n      where: {\n        isDeleted: false,\n        createdAt: {\n          gte: this.sevenDaysAgo,\n        },\n      },\n    });\n  }\n\n  public generateUserObject(user: DefaultUserProfile): UserSessionData {\n    const {\n      name,\n      image,\n      currentOrg,\n      rank,\n      orgRoles,\n      dodId,\n      workEmail,\n      personalEmail,\n      personalPhone,\n      workPhone,\n      // sponsor,\n      // supervisor,\n      id,\n    } = user;\n    const [orgRoleList, permissions] = decodePermissions(orgRoles);\n    return {\n      roles: orgRoleList,\n      id,\n      rank,\n      permissions,\n      name,\n      image,\n      currentOrg,\n      dodId,\n      email: workEmail,\n      personalEmail,\n      personalPhone,\n      workPhone,\n      // sponsor,\n      // supervisor,\n      workEmail,\n    };\n  }\n}\n","import { PrismaClient } from '@prisma/client';\n\nlet dbServer: PrismaClient;\n\ndeclare global {\n  // eslint-disable-next-line vars-on-top\n  // var __db: ExtendedPrismaClient | undefined;\n  var __db: PrismaClient | undefined;\n}\n\nif (process.env.NODE_ENV === 'production') {\n  dbServer = new PrismaClient({\n    log: ['error'],\n  });\n  // dbServer = createOriginalExtendedClient();\n} else {\n  console.log('development');\n  if (!global.__db) {\n    global.__db = new PrismaClient({\n      // log: ['query', 'info', 'warn', 'error'],\n      log:['warn', 'error']\n    });\n    // global.__db = createOriginalExtendedClient();\n  }\n  dbServer = global.__db;\n}\n\nexport default dbServer;\n","import { singleton } from '@lib/utils/singleton.server';\nimport { BaseRepository } from '@repositories/base.server';\nimport { ChecklistRepository } from '@repositories/checklist.server';\nimport { ChecklistItemRepository } from '@repositories/checklistItem.server';\nimport { MetricsRepository } from '@repositories/metrics.server';\nimport { OrganizationRepository } from '@repositories/organization.server';\nimport { OrganizationRoleRepository } from '@repositories/organizationRole.server';\nimport { RoleRepository } from '@repositories/role.server';\nimport { TemplateRepository } from '@repositories/template.server';\nimport { TemplateItemRepository } from '@repositories/templateItem.server';\nimport { UserRepository } from '@repositories/user.server';\nimport dbServer from '@services/db.server';\n\nexport let Models: {\n  userProfile: UserRepository;\n  org: OrganizationRepository;\n  base: BaseRepository;\n  checklist: ChecklistRepository;\n  template: TemplateRepository;\n  checklistItem: ChecklistItemRepository;\n  orgRole: OrganizationRoleRepository;\n  role: RoleRepository;\n  templateItem: TemplateItemRepository;\n  metrics: MetricsRepository;\n};\n\n/**\n * In production, we only ever want a single copy of each repository. However, in development that breaks HMR.\n */\n\nif (process.env.NODE_ENV === 'production') {\n  Models = {\n    base: singleton<BaseRepository>( 'baseRepository', () => new BaseRepository( dbServer ) ),\n    checklistItem: singleton( 'checklistItemRepository', () => new ChecklistItemRepository( dbServer ) ),\n    checklist: singleton( 'checklistRepository', () => new ChecklistRepository( dbServer ) ),\n    org: singleton( 'orgRepository', () => new OrganizationRepository( dbServer ) ),\n    orgRole: singleton( 'orgRoleRepository', () => new OrganizationRoleRepository( dbServer ) ),\n    role: singleton( 'roleRepository', () => new RoleRepository( dbServer ) ),\n    templateItem: singleton( 'templateItemRepository', () => new TemplateItemRepository( dbServer ) ),\n    template: singleton( 'templateRepository', () => new TemplateRepository( dbServer ) ),\n    userProfile: singleton( 'userRepository', () => new UserRepository( dbServer ) ),\n    metrics: singleton ( 'metricsRepository', () => new MetricsRepository( dbServer ) ),\n  };\n} else {\n  Models = {\n    base: new BaseRepository( dbServer ),\n    checklistItem: new ChecklistItemRepository( dbServer ),\n    checklist: new ChecklistRepository( dbServer ),\n    org: new OrganizationRepository( dbServer ),\n    orgRole: new OrganizationRoleRepository( dbServer ) ,\n    role: new RoleRepository( dbServer ),\n    templateItem: new TemplateItemRepository( dbServer ) ,\n    template: new TemplateRepository( dbServer ),\n    userProfile: new UserRepository( dbServer ),\n    metrics: new MetricsRepository( dbServer ),\n  };\n}\n","import { createCookieSessionStorage } from '@remix-run/node';\n\nexport const sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: '_session', // use any name you want here\n    sameSite: 'lax', // this helps with CSRF\n    path: '/', // remember to add this so the cookie will work in all routes\n    httpOnly: true, // for security reasons, make this cookie http only\n    secrets: ['s3cr3t'], // replace this with an actual secret TODO: Change the secret\n    secure: process.env.NODE_ENV === 'production', // enable this in prod only\n  },\n});\n\n// you can also export the methods individually for your own usage\nexport let { getSession, commitSession, destroySession } = sessionStorage;\n","import * as Sentry from '@sentry/remix';\n\n/**\n * By default, Remix will handle generating the HTTP Response for you.\n * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` âœ¨\n * For more information, see https://remix.run/file-conventions/entry.server\n */\n\nimport { Models } from '@lib/models.server';\nimport { getSession } from '@services/session.server';\nimport { PassThrough } from 'node:stream';\n\nimport type { LoaderFunctionArgs, EntryContext } from '@remix-run/node';\nimport {\n  createReadableStreamFromReadable,\n} from '@remix-run/node';\nimport { RemixServer } from '@remix-run/react';\nimport isbot from 'isbot';\nimport { renderToPipeableStream } from 'react-dom/server';\n\nfunction sendErrorToSentry(error: unknown, request: Request) {\n  if (error instanceof Error) { // Capture as an error object\n    Sentry.captureRemixServerException(error, 'remix.server', request, true);\n  } else { // Capture non-Error objects\n    Sentry.captureException(error);\n  }\n}\n\nconst ABORT_DELAY = 5_000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return isbot(request.headers.get('user-agent'))\n    ? handleBotRequest(\n      request,\n      responseStatusCode,\n      responseHeaders,\n      remixContext\n    )\n    : handleBrowserRequest(\n      request,\n      responseStatusCode,\n      responseHeaders,\n      remixContext\n    );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}/>,\n      {\n        onAllReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set('Content-Type', 'text/html');\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            sendErrorToSentry(error, request);\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}/>,\n      {\n        onShellReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set('Content-Type', 'text/html');\n          responseHeaders.set('Document-Policy', 'js-profiling');\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            sendErrorToSentry(error, request);\n\n            const currentTime = new Date(Date.now());\n            console.error(`${currentTime}: The error is:\\n${error}`);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\ntype ErrorResponse = {\n  status: number;\n  statusText: string;\n  internal: boolean;\n  data: string;\n  error: Error;\n}\nconst isErrorResponse = (error: unknown): error is ErrorResponse => {\n  return !!(error as ErrorResponse).data || (error as ErrorResponse).internal !== undefined || (error as ErrorResponse).statusText !== undefined;\n};\n\nexport async function handleError(\n  error: unknown,\n  { request }: LoaderFunctionArgs\n): Promise<void> {\n\n  const currentTime = new Date(Date.now());\n  console.error(`${currentTime}: Starting error report.`);\n  const session = await getSession(request.headers.get('Cookie'));\n  const userSession = session.get('user') as unknown as\n    | { userId: string }\n    | undefined;\n\n  if (userSession) {\n    const userData = await Models.userProfile.getSessionObject(\n      userSession.userId\n    );\n    console.error(`${currentTime}: The current user is:\\n${userData.name}\\t${userData.workEmail}`);\n  }\n\n  if (error instanceof Error) {\n    console.error(`${currentTime}: The error is:\\n${error.message}`);\n  } else if (isErrorResponse(error)) {\n    console.error(`${currentTime}: The error is:\\n${error.data}`);\n  }\n\n  sendErrorToSentry(error, request);\n\n  console.error(`${currentTime}: Error report submitted.`);\n}\n","import {\n  useRouteError,\n  isRouteErrorResponse,\n} from '@remix-run/react';\nimport { captureRemixErrorBoundaryError } from '@sentry/remix';\n\nexport default function ErrorReport() {\n  const error = useRouteError();\n  captureRemixErrorBoundaryError(error);\n\n  if (isRouteErrorResponse(error)) {\n    return (\n      <div>\n        <p>\n          To help us make Virtual In-Processing better be please file a bug\n          report,{' '}\n          <a\n            className=\"text-blue-700 underline hover:text-blue-300 active:text-blue-400 visited:text-blue-700\"\n            href=\"https://travisspark.atlassian.net/servicedesk/customer/portal/4\"\n            target=\"_blank\"\n            rel=\"noreferrer\">\n            here\n          </a>\n          .\n        </p>\n        <h1>\n          {error.status} {error.statusText}\n        </h1>\n        <p>{error.data.message}</p>\n      </div>\n    );\n  } else if (error instanceof Error) {\n    return (\n      <div className=\"p-5 min-w-[600px] max-w-full\">\n        <div className=\"\">\n          <p>\n            An unexpected error has occurred please use the form below to\n            provide more information.\n          </p>\n          <p>\n            To help us make Virtual In-Processing better be please file a bug\n            report,{' '}\n            <a\n              className=\"text-blue-700 underline hover:text-blue-300 active:text-blue-400 visited:text-blue-700\"\n              href=\"https://travisspark.atlassian.net/servicedesk/customer/portal/4\"\n              target=\"_blank\"\n              rel=\"noreferrer\">\n              here\n            </a>\n            .\n          </p>\n        </div>\n        {process.env.NODE_ENV === 'development' && (\n          <>\n            <h1 className=\"font-bold mb-1\">\n              This error will be automatically sent with your report\n            </h1>\n            <div className=\"bg-gray-300 p-2\">\n              <h1 className=\"font-bold\">Error</h1>\n              <p>{error.message}</p>\n              <p className=\"font-bold\">The stack trace is:</p>\n              <pre className=\"text-wrap\">{error.stack}</pre>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  } else {\n    return (\n      <>\n        <h1>Unknown Error Encountered</h1>\n        <p>\n          To help us make Virtual In-Processing better be please file a bug\n          report,{' '}\n          <a\n            className=\"text-blue-700 underline hover:text-blue-300 active:text-blue-400 visited:text-blue-700\"\n            href=\"https://travisspark.atlassian.net/servicedesk/customer/portal/4\"\n            target=\"_blank\"\n            rel=\"noreferrer\">\n            here\n          </a>\n          .\n        </p>\n      </>\n    );\n  }\n}\n","import \"/Users/zachlewis/feb2025/newdev/checklist-app/node_modules/react-toastify/dist/ReactToastify.css?transform-only\";export default \"__VITE_CSS_URL__2f55736572732f7a6163686c657769732f666562323032352f6e65776465762f636865636b6c6973742d6170702f6e6f64655f6d6f64756c65732f72656163742d746f6173746966792f646973742f5265616374546f6173746966792e6373733f7472616e73666f726d2d6f6e6c79__\"","import \"/Users/zachlewis/feb2025/newdev/checklist-app/app/app.css?transform-only\";export default \"__VITE_CSS_URL__2f55736572732f7a6163686c657769732f666562323032352f6e65776465762f636865636b6c6973742d6170702f6170702f6170702e6373733f7472616e73666f726d2d6f6e6c79__\"","import ErrorReport from '@components/ui/ErrorReport';\nimport { withSentry } from '@sentry/remix';\nimport { json } from '@remix-run/node';\nimport type { LinksFunction } from '@remix-run/node';\nimport {\n  Links,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from '@remix-run/react';\nimport reactToastStyles from 'react-toastify/dist/ReactToastify.css?url';\n\nimport styles from './app.css?url';\n\nexport const links: LinksFunction = () => [\n  { rel: 'stylesheet', href: styles },\n  { rel: 'stylesheet', href: reactToastStyles },\n];\n\nexport const loader = async () => {\n  return json({}, {\n    headers: {\n      'X-Frame-Options': 'SAMEORIGIN',\n      'Content-Security-Policy': 'frame-ancestors: none',\n    },\n  });\n};\n\nexport function meta() {\n  return [{ title: 'vIP - Virtual In-Processing' }];\n}\n\nexport const ErrorBoundary = ErrorReport;\n\nfunction App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>Virtual In-Processing</title>\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"text-slate-900 h-screen\">\n        {/* <div className=\"h-lvh flex flex-col\"> */}\n        <Outlet />\n        {/* </div> */}\n        <ScrollRestoration />\n        <script>window.global = window;</script>\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n\nexport default withSentry(App);\n","import { redirect } from '@remix-run/react';\n\nexport function loader() {\n  return redirect('/checklist');\n}\n","import { Models } from '@lib/models.server';\nimport { sessionStorage } from '@services/session.server';\nimport * as argon from 'argon2';\nimport { Authenticator, AuthorizationError } from 'remix-auth';\nimport { FormStrategy } from 'remix-auth-form';\n\n// Create an instance of the authenticator, pass a generic with what\n// strategies will return and will store in the session\nexport const authenticator = new Authenticator<{ userId: string }>(\n  sessionStorage\n);\n\n// Tell the Authenticator to use the form strategy\nauthenticator.use(\n  new FormStrategy(async ({ form }) => {\n    try {\n      let email = form.get('email')?.valueOf();\n      let plainTextPassword = form.get('password')?.valueOf();\n\n      if (!email || !plainTextPassword)\n        throw new AuthorizationError('Email or password blank.');\n      const accountWithPassword = await Models.userProfile.findAccount(\n        email as string\n      );\n\n      const passwordVerified = await argon.verify(\n        accountWithPassword.password,\n        plainTextPassword as string\n      );\n\n      if (!passwordVerified) throw new AuthorizationError('Wrong password');\n\n      const { _, ...userAccount } = accountWithPassword;\n\n      return { userId: userAccount.profileId };\n      // the type of this user must match the type you pass to the Authenticator\n      // the strategy will automatically inherit the type if you instantiate\n      // directly inside the `use` method\n    } catch (e) {\n      console.error(e);\n      throw new AuthorizationError('Invalid credentials');\n    }\n  }),\n  // each strategy has a name and can be changed to use another one\n  // same strategy multiple times, especially useful for the OAuth2 strategy.\n  'user-pass'\n);\n","/**\n * The DataCookie is used to pass messages between pages. Mainly register and login, to show a message for the member to see their CSS\n */\n\nimport { createCookieSessionStorage } from '@remix-run/node';\n\nexport const { getSession: getDataSession, commitSession: commitDataSession, destroySession: destroyDataSession} = createCookieSessionStorage({\n  cookie: {\n    name: '__data',\n    secrets: ['somes3cr3t'],\n    httpOnly: true,\n  },\n});\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Form, Link, useLoaderData } from '@remix-run/react';\nimport { authenticator } from '@services/auth.server';\nimport { commitDataSession, getDataSession } from '@services/cookie.server';\nimport { commitSession, getSession } from '@services/session.server';\nimport { useState, useEffect } from 'react';\n\nexport const meta = () => [{ title: 'Login | vIP (Virtual In-Processing)' }];\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  await authenticator.isAuthenticated(request, {\n    successRedirect: '/checklist',\n  });\n  const session = await getSession(request.headers.get('cookie'));\n  const error = session.get(authenticator.sessionErrorKey);\n\n  const dataSession = await getDataSession(request.headers.get('Cookie'));\n  const message = dataSession.get('message') || null;\n\n  let headers = new Headers();\n  headers.append('X-Frame-Options', 'SAMEORIGIN');\n  headers.append('Content-Security-Policy', 'frame-ancestors: none');\n  headers.append('Set-Cookie', await commitSession(session));\n  headers.append('Set-Cookie', await commitDataSession(dataSession));\n\n  return json(\n    { error, message },\n    {\n      headers,\n    }\n  );\n}\n\nexport async function action({ request, context }: ActionFunctionArgs) {\n  return await authenticator.authenticate('user-pass', request, {\n    successRedirect: '/checklist',\n    failureRedirect: '/login',\n    throwOnError: true,\n    context,\n  });\n}\n\nconst LoginForm = () => {\n  const loaderData = useLoaderData<typeof loader>();\n\n  const [showPassword, setShowPassword] = useState(false);\n  const [animationTrigger, setAnimationTrigger] = useState(false);\n\n  const togglePasswordVisibility = () => {\n    setShowPassword((prev) => !prev);\n  };\n\n  useEffect(() => {\n    if (loaderData?.error) {\n      setAnimationTrigger(false);\n      requestAnimationFrame(() => {\n        setAnimationTrigger(true);\n      });\n    }\n  }, [loaderData?.error]);\n\n  return (\n    <>\n      <div className=\"relative flex overflow-hidden h-full\">\n        <div className=\"absolute inset-0 flex justify-center items-center flex-col gap-y-5\">\n          <div className=\"flex items-center text-center justify-center\">\n            {loaderData?.error && (\n              <div\n                className={`absolute rounded-2xl px-4 text-center bg-red-700 text-slate-100 ${\n                  animationTrigger ? 'animate-shake' : ''\n                }`}>\n                {loaderData?.error?.message}\n              </div>\n            )}\n            {loaderData?.message && (\n              <div className=\"absolute rounded-2xl text-center bg-green-700 text-slate-100\">\n                {loaderData?.message}\n              </div>\n            )}\n          </div>\n\n          <div className=\"p-10 w-[450px] flex-shrink-0 flex flex-col justify-between bg-white\">\n            <div className=\"flex justify-between ml-14 mr-14 mb-7\">\n              <img\n                className=\"w-50 h-20\"\n                src=\"/airforce.png\"\n                alt=\"United States Air Force\"/>\n              <img\n                className=\"w-20 h-20\"\n                src=\"/phoenix.png\"\n                alt=\"Travis AFB Phoenix Spark\"/>\n            </div>\n\n            <Form method=\"post\">\n              <div className=\"mb-5\">\n                <label htmlFor=\"email\" className=\"block text-sm font-medium leading-6 text-gray-900\">\n                  Email address\n                </label>\n                <input\n                  name=\"email\"\n                  type=\"email\"\n                  autoComplete=\"email\"\n                  className=\"block w-full border-1 border-gray-800 py-1.5 focus:outline-none focus:ring-0 focus:border-gray-800 text-gray-900 shadow-sm placeholder:text-gray-400\"/>\n              </div>\n\n              <div className=\"mb-5\">\n                <label htmlFor=\"password\" className=\"block text-sm font-medium leading-6 text-gray-900\">\n                  Password\n                </label>\n                <div className=\"relative\">\n                  <input\n                    name=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    autoComplete=\"current-password\"\n                    className=\"block w-full border-1 border-gray-800 py-1.5 focus:outline-none focus:ring-0 focus:border-gray-800 text-gray-900 shadow-sm placeholder:text-gray-400\"/>\n                  <button\n                    type=\"button\"\n                    onClick={togglePasswordVisibility}\n                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-600\">\n                    {showPassword ? <EyeSlashIcon className=\"size-6\" /> : <EyeIcon className=\"size-6\" />}\n                  </button>\n                </div>\n              </div>\n\n              <button\n                type=\"submit\"\n                className=\"w-full justify-center bg-gray-800 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-blue focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white\">\n                Sign In\n              </button>\n              <p className=\"mt-10 text-center text-sm text-gray-500\">\n                Not a member?\n                <Link\n                  to=\"/register\"\n                  className=\"font-semibold leading-6 text-gray-800 hover:text-gray-800\">\n                  {' '}\n                  Register\n                </Link>\n              </p>\n              <div className=\"mt-1 text-center text-sm text-gray-500\">\n                <p>Have feedback, an issue, or want to request a demo?</p>\n                <Link\n                  to=\"https://travisspark.atlassian.net/servicedesk/customer/portal/4\"\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                  className=\"font-semibold leading-6 text-gray-800 hover:text-gray-800\">\n                  Contact us here\n                </Link>\n              </div>\n            </Form>\n          </div>\n        </div>\n\n        <div className=\"overflow-hidden h-full\">\n          <img\n            className=\"object-cover object-center h-screen w-screen\"\n            src=\"/f-35-twin.jpeg\"\n            alt=\"Fighter Aircraft\"/>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default LoginForm;\n","import { ComboboxOption } from '@headlessui/react';\nimport { CheckIcon, ChevronRightIcon } from '@heroicons/react/20/solid';\nimport type { Organization } from '@prisma/client';\n\nexport default function OrgComboboxSearchResults({\n  filteredOrgs,\n}: {\n  filteredOrgs: Organization[];\n}) {\n  const results = filteredOrgs.map((org) => (\n    <ComboboxOption\n      value={org}\n      key={org.uuid}\n      className=\"divide-y divide-slate-500 group flex cursor-default data-[focus]:cursor-pointer items-center gap-2 rounded-lg select-none data-[focus]:bg-slate-900/10 data-[selected]:bg-blue-500/30\">\n      {({ selected }) => (\n        <div className=\"flex items-center gap-2 p-4\">\n          {selected ? (\n            <CheckIcon className=\"h-5 w-5\" />\n          ) : (\n            <ChevronRightIcon className=\"h-5 w-5\" />\n          )}\n          <strong className=\"text-slate-900 text-sm font-medium dark:text-slate-200\">\n            {org.name}\n          </strong>\n        </div>\n      )}\n    </ComboboxOption>\n  ));\n  if (results.length > 0) {\n    return results;\n  } else {\n    return (\n      <p className=\"p-4 divide-y divide-slate-500 group flex cursor-default data-[focus]:cursor-pointer items-center gap-2 rounded-lg select-none data-[focus]:bg-slate-900/10 data-[selected]:bg-blue-500/30 text-slate-900 text-sm font-medium dark:text-slate-200\">\n        No results\n      </p>\n    );\n  }\n}\n","import { ComboboxOption } from '@headlessui/react';\nimport { CheckIcon, ChevronRightIcon } from '@heroicons/react/20/solid';\nimport type { OrganizationWithChildren } from '@repositories/organization.server';\n\nexport default function OrgComboboxOrgTree({ tree, isCreateAccountPage }: { tree: OrganizationWithChildren, isCreateAccountPage: boolean; }) {\n  return (\n    <>\n      <div className={`relative first:mt-0 last:mb-0 mb-2`}>\n        <div className=\"sticky top-0 px-4 py-3 flex items-center font-semibold text-sm text-slate-900 dark:text-slate-200 bg-slate-50/90 dark:bg-slate-700/90 border-0 border-slate-900/10 border-x-0 backdrop-blur-sm ring-0 ring-slate-900/10 dark:ring-black/10\">\n          {tree.name}\n        </div>\n        {tree.children &&\n          tree.children.length > 0 &&\n          tree.children?.map((v) => {\n            if (!v || (isCreateAccountPage && v.isBase)) return null;\n            return (\n              <ComboboxOption\n                value={v}\n                key={`${v.uuid}-combo-option`}\n                className=\"rounded-lg divide-y divide-slate-500 group flex items-center select-none cursor-default data-[focus]:cursor-pointer data-[focus]:bg-slate-900/10 data-[selected]:bg-blue-500/30\">\n                {({ selected }) => (\n                  <div className=\"flex items-center gap-2 p-4\">\n                    {selected ? (\n                      <CheckIcon className=\"h-5 w-5\" />\n                    ) : (\n                      <ChevronRightIcon className=\"h-5 w-5\" />\n                    )}\n                    <strong className=\"text-slate-900 text-sm font-medium dark:text-slate-200\">\n                      {v.name}\n                    </strong>\n                  </div>\n                )}\n              </ComboboxOption>\n            );\n          })}\n      </div>\n      {tree.children &&\n        tree.children?.length > 0 &&\n        tree?.children?.map((child) => {\n          if (!child || !child.children) return null;\n          return <OrgComboboxOrgTree tree={child} key={`${child?.uuid}-combo-tree`} isCreateAccountPage={isCreateAccountPage} />;\n        })}\n    </>\n  );\n}\n","import OrgComboboxSearchResults from './OrgComboboxSearchResults';\nimport {\n  Combobox,\n  ComboboxButton,\n  ComboboxInput,\n  ComboboxOption,\n  ComboboxOptions,\n  Field,\n  Label,\n} from '@headlessui/react';\nimport {\n  CheckIcon,\n  ChevronDownIcon,\n  ChevronRightIcon,\n  ChevronUpIcon,\n} from '@heroicons/react/20/solid';\nimport type { Organization } from '@prisma/client';\nimport { useNavigate, useSearchParams } from '@remix-run/react';\nimport type { OrganizationWithChildren } from '@repositories/organization.server';\nimport { useState } from 'react';\nimport OrgComboboxOrgTree from './OrgComboboxOrgTree';\n\ntype OrgComboboxProps = {\n  parentNode: OrganizationWithChildren;\n  selected: { id: number; uuid: string; name: string };\n  orgArray: Array<Organization>;\n  navigateTo?: 'inbound' | 'inprocess' | 'completed' | 'outbound' | 'supervisors';\n  isCreateAccountPage?: boolean;\n  name?: string;\n  label?: string;\n};\n\nexport default function OrgCombobox({\n  parentNode,\n  selected,\n  orgArray,\n  navigateTo,\n  isCreateAccountPage = false,\n  name,\n  label = 'Change organization to manage:',\n  onChange,\n}: OrgComboboxProps) {\n  const [selectedOrg, setSelectedOrg] = useState(selected);\n  const [query, setQuery] = useState('');\n\n  const navigate = useNavigate();\n  const [_, setSearchParams] = useSearchParams();\n\n  const filteredOrgs =\n    query !== ''\n      ? orgArray.filter((org) =>\n        org.name.toLowerCase().includes(query.toLowerCase())\n      )\n      : [];\n\n  function generateUrl(id: string, path: 'inbound' | 'outbound' | 'inprocess' | 'completed' | 'supervisors' ) {\n    return `/org/${id}/${path}`;\n  }\n\n  function handleChange(val: { id: number; uuid: string; name: string }) {\n    if (val) {\n      if (onChange) {\n        onChange({currentTarget: {name: 'org', value: val.uuid }});\n      }\n      setSelectedOrg( val );\n\n      if (!isCreateAccountPage) {\n        if (navigateTo) {\n          navigate(generateUrl(val.uuid, navigateTo));\n        } else {\n          const query = new URLSearchParams();\n          query.set('org', val.uuid);\n          setSearchParams(query);\n        }\n      }\n    }\n  }\n\n  let inputStyles =\n    'relative bg-white py-1.5 pl-3 pr-10 text-left text-slate-900 focus:outline-none focus:ring-indigo-500/20 sm:text-sm sm:leading-6 rounded-md border-slate-300 text-xs shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50';\n  let optionListStyles =\n    '[--anchor-padding:0px] rounded-xl bg-gray-200 shadow-lg p-0 py-0 [--anchor-gap:4px] focus:outline-none transition-all duration-200 ease-out empty:invisible data-[closed]:-translate-y-10 data-[closed]:opacity-0';\n  let labelStyles = 'mx-auto text-sm font-bold mb-1 text-slate-800';\n\n  if (isCreateAccountPage) {\n    inputStyles += ' w-full';\n    optionListStyles += ' w-[var(--input-width)] [--anchor-max-height:20rem]';\n    labelStyles = 'mb-1 block text-sm font-medium text-gray-700';\n  } else {\n    inputStyles += ' w-80';\n    optionListStyles +=\n      ' w-[calc(var(--input-width)+10rem)] [--anchor-max-height:50rem]';\n  }\n\n  return (\n    <Field className=\"flex flex-col\">\n      <Label className={labelStyles}>{label}</Label>\n      <Combobox\n        immediate\n        value={selectedOrg}\n        onChange={handleChange}\n        by=\"id\"\n        onClose={() => setQuery('')}>\n        <div className=\"relative\">\n          <ComboboxInput\n            displayValue={(org: { id: string; name: string }) => org?.name}\n            onChange={(event) => setQuery(event.target.value)}\n            className={inputStyles}/>\n          <ComboboxButton className=\"group absolute inset-y-0 right-0 px-2.5 border-l border-l-slate-300\">\n            {({ open }) => (\n              <>\n                {open && (\n                  <ChevronUpIcon\n                    className=\"size-4 fill-slate-900\"\n                    aria-hidden=\"true\"/>\n                )}\n                {!open && (\n                  <ChevronDownIcon\n                    className=\"size-4 fill-slate-900\"\n                    aria-hidden=\"true\"/>\n                )}\n              </>\n            )}\n          </ComboboxButton>\n        </div>\n        <ComboboxOptions\n          anchor={{ to: isCreateAccountPage ? 'bottom start' : 'bottom end' }}\n          transition\n          className={optionListStyles}>\n          {query === '' && (\n            <>\n              {!isCreateAccountPage && (\n                <>\n                  <div className=\"sticky top-0 px-4 py-3 flex items-center font-semibold text-sm text-slate-900 dark:text-slate-200 bg-slate-50/90 dark:bg-slate-700/90 border-0 border-slate-900/10 border-x-0 backdrop-blur-sm ring-0 ring-slate-900/10 dark:ring-black/10\">\n                    Your Organization\n                  </div>\n                  <ComboboxOption\n                    value={parentNode}\n                    className=\"rounded-lg divide-y divide-slate-500 group flex items-center select-none cursor-default data-[focus]:cursor-pointer data-[focus]:bg-slate-900/10 data-[selected]:bg-blue-500/30\">\n                    {({ selected }) => (\n                      <div className=\"flex items-center gap-2 p-4\">\n                        {selected ? (\n                          <CheckIcon className=\"h-5 w-5\" />\n                        ) : (\n                          <ChevronRightIcon className=\"h-5 w-5\" />\n                        )}\n                        <strong className=\"text-slate-900 text-sm font-medium dark:text-slate-200\">\n                          {parentNode.name}\n                        </strong>\n                      </div>\n                    )}\n                  </ComboboxOption>\n                </>\n              )}\n              <OrgComboboxOrgTree tree={parentNode} isCreateAccountPage={isCreateAccountPage} />\n            </>\n          )}\n          {query !== '' && (\n            <>\n              <div className=\"sticky top-0 px-4 py-3 flex items-center font-semibold text-sm text-slate-900 dark:text-slate-200 bg-slate-50/90 dark:bg-slate-700/90 border-0 border-slate-900/10 border-x-0 backdrop-blur-sm ring-0 ring-slate-900/10 dark:ring-black/10\">\n                Results:\n              </div>\n              <OrgComboboxSearchResults filteredOrgs={filteredOrgs} />\n            </>\n          )}\n        </ComboboxOptions>\n      </Combobox>\n    </Field>\n  );\n}\n","import { useParams, useSearchParams } from '@remix-run/react';\nimport { useMemo } from 'react';\n\nexport default function useGenerateSearchParams(modifyKeys?: {\n  keysToRemove?: string[] | string;\n  keysToAdd?: Record<string, string>;\n}) {\n  const [searchParams] = useSearchParams();\n  const params = useParams();\n\n\n  return useMemo( () => {\n    const newSearchParams = new URLSearchParams();\n    for ( const entry of searchParams.entries() ) {\n      if ( Array.isArray( modifyKeys?.keysToRemove ) ) {\n        console.log( modifyKeys.keysToRemove?.includes( entry[0] ) );\n        if ( entry[0] !== 'page' && !modifyKeys.keysToRemove?.includes( entry[0] ) ) {\n          newSearchParams.set( entry[0], entry[1] );\n        }\n      }\n      else {\n        if ( entry[0] !== 'page' && modifyKeys?.keysToRemove !== entry[0] ) {\n          newSearchParams.set( entry[0], entry[1] );\n        }\n      }\n    }\n\n    if ( modifyKeys?.keysToAdd ) {\n      Object.entries(modifyKeys.keysToAdd).forEach( ( [key,val], index ) => {\n        newSearchParams.set( key, val );\n      } );\n    }\n\n    if ( params.orgId ) newSearchParams.set( 'org', params.orgId );\n\n    return newSearchParams.toString();\n  }, [ searchParams, params, modifyKeys ] );\n}\n","/* eslint-disable react/display-name */\nimport useGenerateSearchParams from '@lib/hooks/useGenerateSearchParams';\nimport { Link } from '@remix-run/react';\nimport type { RemixLinkProps } from '@remix-run/react/dist/components';\nimport { forwardRef } from 'react';\n\nexport const AcceptButton = forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement>\n>((props, ref) => {\n  const { className: addedClasses, ...restProps } = props;\n  return (\n    <button\n      {...restProps}\n      ref={ref}\n      className={`rounded-lg border border-green-300 bg-green-300 px-3 py-1 text-center text-sm font-medium text-zinc-800 shadow-sm transition-all hover:border-green-700 hover:bg-green-700 hover:text-zinc-100 focus:ring focus:ring-green-200 disabled:cursor-not-allowed disabled:border-green-300 disabled:bg-green-200 disabled:text-green-600${\n        addedClasses ? ` ${addedClasses}` : ''\n      }`}/>\n  );\n});\n\nexport const DeleteButton = forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement>\n>((props, ref) => (\n  <button\n    {...props}\n    ref={ref}\n    className={`${\n      props.className ? `${props.className} ` : ''\n    }rounded-lg border border-red-200 bg-red-50 px-3 py-1 text-center text-sm font-medium text-red-800 shadow-sm transition-all hover:border-red-700 hover:bg-red-700 hover:text-white focus:ring focus:ring-red-200 disabled:cursor-not-allowed disabled:border-red-300 disabled:bg-red-300 disabled:text-red-800`}/>\n));\n\nexport const PauseButton = forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement>\n>((props, ref) => (\n  <button\n    {...props}\n    ref={ref}\n    className={`${\n      props.className ? `${props.className} ` : ''\n    }rounded-lg border border-yellow-200 bg-yellow-50 px-3 py-1 text-center text-sm font-medium text-yellow-800 shadow-sm transition-all hover:border-yellow-700 hover:bg-yellow-700 hover:text-white focus:ring focus:ring-yellow-200 disabled:cursor-not-allowed disabled:border-yellow-300 disabled:bg-yellow-300 disabled:text-yellow-800`}/>\n));\n\nexport const PlayButton = forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement>\n>((props, ref) => (\n  <button\n    {...props}\n    ref={ref}\n    className={`${\n      props.className ? `${props.className} ` : ''\n    }rounded-lg border border-green-200 bg-green-50 px-3 py-1 text-center text-sm font-medium text-green-800 shadow-sm transition-all hover:border-green-700 hover:bg-green-700 hover:text-white focus:ring focus:ring-green-200 disabled:cursor-not-allowed disabled:border-green-300 disabled:bg-green-300 disabled:text-green-800`}/>\n));\n\nexport const Button = forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement>\n>((props, ref) => (\n  <button\n    {...props}\n    ref={ref}\n    type=\"button\"\n    className={`${\n      props.className ? `${props.className} ` : ''\n    }rounded-lg border border-gray-300 bg-white px-3 py-1 text-center text-sm font-medium text-gray-700 shadow-sm transition-all hover:bg-gray-400 hover:text-white focus:ring focus:ring-gray-100 disabled:cursor-not-allowed disabled:border-gray-100 disabled:bg-gray-50 disabled:text-gray-400`}/>\n));\n\nexport const PrimaryButton = forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement>\n>(({ type = 'button', ...props }, ref) => (\n  <button\n    {...props}\n    ref={ref}\n    type={type}\n    className={`${\n      props.className ? `${props.className} ` : ''\n    }rounded-lg border border-primary-300 bg-primary-100 px-3 py-1 text-center text-sm font-medium text-primary-600 transition-all hover:text-secondary-50 hover:border-primary-500 hover:bg-primary-500 focus:ring focus:ring-primary-50 disabled:border-primary-50 disabled:bg-primary-50 disabled:text-primary-400\"`}/>\n));\nexport const ModalCancelBtn = forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement>\n>((props, ref) => (\n  <button\n    {...props}\n    ref={ref}\n    type=\"button\"\n    className={`${\n      props.className ? `${props.className} ` : ''\n    }mt-3 inline-flex justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto\"`}/>\n));\n\ntype MyRemixLinkProps = {\n  variant?: 'gray' | 'red' | 'green' | 'primary' | 'amber' | 'purple';\n  to: { pathname: string; searchParams?: Record<string, string> } | string;\n} & RemixLinkProps;\n\nexport const LinkButton = forwardRef<HTMLAnchorElement, MyRemixLinkProps>(\n  ({ variant = 'primary', to, ...props }, ref) => {\n    const searchParams = useGenerateSearchParams({\n      keysToRemove: 'type',\n      keysToAdd: typeof to !== 'string' ? to.searchParams : undefined,\n    });\n    let colors = '';\n\n    switch (variant) {\n      case 'primary':\n        colors =\n          'border-primary-300 bg-primary-50 text-primary-800 hover:bg-primary-500 hover:border-primary-500 hover:text-secondary-50 focus:ring-primary-50 disabled:border-primary-50 disabled:bg-primary-50 disabled:text-primary-400';\n        break;\n      case 'green':\n        colors =\n          'border-green-500 bg-green-500 text-white hover:bg-green-700 hover:border-green-700 focus:ring-green-200 disabled:border-green-300 disabled:bg-green-300';\n        break;\n      case 'gray':\n        colors =\n          'border-gray-300 bg-white hover:bg-gray-400 hover:text-white focus:ring-gray-100 disabled:border-gray-100 disabled:bg-gray-50 disabled:text-gray-400';\n        break;\n      case 'red':\n        colors =\n          'border-red-200 bg-red-50 text-red-800 hover:border-red-700 hover:bg-red-700 hover:text-white focus:ring-red-200 disabled:border-red-300 disabled:bg-red-300';\n        break;\n      case 'amber':\n        colors =\n          'border-amber-200 bg-amber-50 text-amber-800 hover:border-amber-700 hover:bg-amber-500 hover:text-white focus:ring-amber-200 disabled:border-amber-300 disabled:bg-amber-300';            \n        break;\n      case 'purple':\n        colors =\n          'border-purple-200 bg-purple-50 text-purple-800 hover:border-purple-700 hover:bg-purple-500 hover:text-white focus:ring-purple-200 disabled:border-purple-300 disabled:bg-purple-300';\n        break;\n    }\n\n    return (\n      <Link\n        {...props}\n        to={{\n          pathname: typeof to === 'string' ? to : to.pathname,\n          search: searchParams,\n        }}\n        ref={ref}\n        className={`${colors} rounded-lg border px-3 py-1 text-center text-sm font-medium shadow-sm transition-all focus:ring focus:ring-gray-100 disabled:cursor-not-allowed${props.className ? ` ${props.className}` : ''}`}/>\n    );\n  }\n);\n","import {\n  LinkIcon,\n  PencilIcon,\n  TrashIcon,\n} from '@heroicons/react/16/solid';\n\nexport function BubbleMenuItems( {\n  href,\n  setLink,\n  deleteLink,\n}: {\n  href: string;\n  setLink: () => void;\n  deleteLink: () => void;\n} ) {\n  return (\n    <div className=\"relative inline-block\">\n      <div\n        className=\"absolute inline-flex items-center divide-x divide-zinc-600/50 bg-white -translate-y-full -translate-x-1/2 shadow-lg shadow-zinc-500/50 after:content-[''] after:absolute after:w-0 after:h-0 after:border-4 after:border-white after:-bottom-1 after:left-1/2 after:-translate-x-1/2 after:rotate-45 text-gray-200 rounded-lg\">\n        <LinkIcon className=\"size-6 text-zinc-800 mx-2\"/>\n        <a\n          href={ href }\n          target=\"_blank\"\n          className=\"text-primary-600 hover:underline px-3 py-2\"\n          rel=\"noreferrer\">\n          { href }\n        </a>\n        <div className=\"inline-flex\">\n          <button\n            type=\"button\"\n            onClick={ setLink }\n            className=\"text-zinc-800 hover:bg-slate-300 px-3 py-2 mx-1  rounded\">\n            <PencilIcon className=\"size-4\"/>\n          </button>\n          <button\n            type=\"button\"\n            onClick={ deleteLink }\n            className=\"text-red-500 hover:bg-red-300 px-3 py-2 mr-1 rounded\">\n            <TrashIcon className=\"size-4\"/>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { createContext, useState } from 'react';\n\nexport const RichTextEditorContext = createContext<{\n  content: string;\n  setContent?: React.Dispatch<React.SetStateAction<string>>\n}>({\n  content: '',\n});\n\nexport function RTEProvider({children}: {children: React.ReactNode}) {\n  const [ content, setContent ] = useState('');\n\n  return (\n    <RichTextEditorContext.Provider value={{content, setContent}}>{children}</RichTextEditorContext.Provider>\n  );\n}\n","import { BubbleMenuItems } from './BubbleMenuItems';\nimport { RichTextEditorContext } from './Context';\nimport {\n  BoldIcon,\n  ItalicIcon,\n  LinkIcon,\n  ListBulletIcon,\n  NumberedListIcon,\n} from '@heroicons/react/16/solid';\nimport Bold from '@tiptap/extension-bold';\nimport BubbleMenuExt from '@tiptap/extension-bubble-menu';\nimport BulletList from '@tiptap/extension-bullet-list';\nimport Document from '@tiptap/extension-document';\nimport DropCursor from '@tiptap/extension-dropcursor';\nimport Italic from '@tiptap/extension-italic';\nimport Link from '@tiptap/extension-link';\nimport ListItem from '@tiptap/extension-list-item';\nimport OrderedList from '@tiptap/extension-ordered-list';\nimport Paragraph from '@tiptap/extension-paragraph';\nimport Text from '@tiptap/extension-text';\nimport CharacterCount from '@tiptap/extension-character-count';\nimport {\n  BubbleMenu,\n  EditorContent,\n  useEditor,\n  useEditorState,\n} from '@tiptap/react';\nimport { useCallback, useContext } from 'react';\n\nexport default function RichTextEditor({ content, limit }: { content?: string; limit?: number }) {\n  const context = useContext(RichTextEditorContext);\n\n  let parsedContent;\n\n  if (!limit)\n    limit = 500;\n\n  // define your extension array\n  const extensions = [\n    BulletList.configure({ HTMLAttributes: { class: 'list-disc ml-5' } }),\n    // ListItem.configure({ HTMLAttributes: { class: '' } }),\n    ListItem,\n    OrderedList.configure({\n      HTMLAttributes: { class: 'list-decimal ml-5' },\n    }),\n    Document,\n    // Paragraph.configure({ HTMLAttributes: { class: '' } }),\n    Paragraph,\n    Text,\n    Bold,\n    Italic,\n    Link.configure({\n      openOnClick: false,\n      autolink: true,\n      defaultProtocol: 'https',\n    }),\n    CharacterCount.configure({\n      limit,\n    }),\n    DropCursor,\n    BubbleMenuExt.configure({\n      shouldShow: ({ editor }) => {\n        // only show the bubble menu for images and links\n        return editor.isActive('link');\n      },\n    }),\n  ];\n\n  try {\n    if (content)\n      parsedContent = JSON.parse(content);\n  } catch (e) {\n    parsedContent = content;\n  }\n\n  const editor = useEditor({\n    extensions,\n    content: parsedContent,\n    editable: true,\n    onUpdate({ editor }) {\n      if (context.setContent && editor)\n        context.setContent(JSON.stringify(editor.getJSON()));\n    },\n  });\n\n  /**\n   * This hook allows us to select the editor state we want to use in our component.\n   */\n  const currentEditorState = useEditorState({\n    /**\n     * The editor instance we want to use.\n     */\n    editor,\n    /**\n     * This selector allows us to select the data we want to use in our component.\n     * It is evaluated on every editor transaction and compared to it's previously returned value.\n     */\n    selector: (ctx) => ({\n      isBold: ctx.editor?.isActive('bold') ?? false,\n      isItalic: ctx.editor?.isActive('italic') ?? false,\n      isStrike: ctx.editor?.isActive('strike') ?? false,\n      isBulletList: ctx.editor?.isActive('bulletList') ?? false,\n      isOrderedList: ctx.editor?.isActive('orderedList') ?? false,\n      isLink: ctx.editor?.isActive('link') ?? false,\n    }),\n    /**\n     * This function allows us to customize the equality check for the selector.\n     * By default, it is a `===` check.\n     */\n    equalityFn: (prev, next) => {\n      // A deep-equal function would probably be more maintainable here, but, we use a shallow one to show that it can be customized.\n      if (!next) {\n        return false;\n      }\n      return (\n        prev.isBold === next.isBold &&\n        prev.isItalic === next.isItalic &&\n        prev.isStrike === next.isStrike &&\n        prev.isBulletList === next.isBulletList &&\n        prev.isOrderedList === next.isOrderedList &&\n        prev.isLink === next.isLink\n      );\n    },\n  });\n\n  const handleSetLink = useCallback(\n    (previousUrl: string) => {\n      if (!editor) return;\n\n      const url = window.prompt('URL', previousUrl);\n\n      // cancelled\n      if (url === null) {\n        return;\n      }\n\n      // empty\n      if (url === '') {\n        editor.chain().focus().extendMarkRange('link').unsetLink().run();\n\n        return;\n      }\n\n      // update link\n      editor\n        .chain()\n        .focus()\n        .extendMarkRange('link')\n        .setLink({ href: url })\n        .run();\n    },\n    [editor]\n  );\n\n  const toggleLink = useCallback(() => {\n    if (!editor) return;\n    const previousUrl = editor.getAttributes('link').href;\n\n    if (previousUrl) {\n      editor.chain().focus().unsetLink().run();\n      return;\n    }\n\n    handleSetLink(previousUrl);\n  }, [editor, handleSetLink]);\n\n  const setLink = useCallback(() => {\n    handleSetLink(editor?.getAttributes('link').href);\n  }, [editor, handleSetLink]);\n\n  const deleteLink = useCallback(() => {\n    if (!editor) return;\n    editor.chain().focus().extendMarkRange('link').unsetLink().run();\n\n    return;\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <>\n      {currentEditorState && (\n        <nav className=\"mb-1.5\">\n          <div className=\"inline-flex -space-x-0 divide-x divide-gray-300 overflow-hidden rounded-lg border border-gray-300 shadow-sm\">\n            <button\n              type=\"button\"\n              onClick={() => {\n                editor.chain().focus().toggleBold().run();\n              }}\n              className={`${\n                currentEditorState.isBold ? ' bg-slate-400' : 'bg-white'\n              } px-3 py-2 text-center text-sm font-medium text-secondary-700 hover:bg-gray-100`}>\n              <BoldIcon className=\"size-4\" />\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => {\n                editor.chain().focus().toggleItalic().run();\n              }}\n              className={`${\n                currentEditorState.isItalic ? ' bg-slate-400' : 'bg-white'\n              } px-3 py-2 text-center text-sm font-medium text-secondary-700 hover:bg-gray-100`}>\n              <ItalicIcon className=\"size-4\" />\n            </button>\n          </div>\n          <div className=\"ml-2 inline-flex -space-x-0 divide-x divide-gray-300 overflow-hidden rounded-lg border border-gray-300 shadow-sm\">\n            <button\n              type=\"button\"\n              onClick={() => editor.chain().focus().toggleBulletList().run()}\n              className={`${\n                currentEditorState.isBulletList ? ' bg-slate-400' : 'bg-white'\n              } px-3 py-2 text-center text-sm font-medium text-secondary-700 hover:bg-gray-100`}>\n              <ListBulletIcon className=\"size-4\" />\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => editor.chain().focus().toggleOrderedList().run()}\n              className={`${\n                currentEditorState.isOrderedList ? ' bg-slate-400' : 'bg-white'\n              } px-3 py-2 text-center text-sm font-medium text-secondary-700 hover:bg-gray-100`}>\n              <NumberedListIcon className=\"size-4\" />\n            </button>\n          </div>\n\n          <div className=\"ml-2 inline-flex -space-x-0 divide-x divide-gray-300 overflow-hidden rounded-lg border border-gray-300 shadow-sm\">\n            <button\n              type=\"button\"\n              onClick={toggleLink}\n              className={`${\n                currentEditorState.isLink ? ' bg-slate-400' : 'bg-white'\n              } px-3 py-2 text-center text-sm font-medium text-secondary-700 hover:bg-gray-100`}>\n              <LinkIcon className=\"size-4\" />\n            </button>\n          </div>\n        </nav>\n      )}\n      {editor && (\n        <BubbleMenu editor={editor} tippyOptions={{ duration: 100 }}>\n          {currentEditorState?.isLink && (\n            <BubbleMenuItems\n              href={editor.getAttributes('link').href}\n              setLink={setLink}\n              deleteLink={deleteLink}/>\n          )}\n        </BubbleMenu>\n      )}\n      <EditorContent\n        editor={editor}\n        className=\"[&_div:focus]:outline-none [&_a]:underline [&_a]:text-primary-800 [&_div]:border [&_div]:block [&_div]:w-full [&_div]:rounded-md [&_div]:p-3 [&_div]:shadow-sm [&_div:focus]:border-primary-300 [&_div:focus]:ring [&_div:focus]:ring-primary-200 [&_div:focus]:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50\"/>\n      <p className={`mt-1 text-sm  ${editor.storage.characterCount.characters() === limit ? 'text-red-500' : 'text-gray-500'}`}>\n        {editor.storage.characterCount.characters()} / {limit} characters\n      </p>\n    </>\n  );\n}\n","import RichTextEditor, {\n  RichTextEditorContext,\n} from '@components/ui/RichText/Editor';\nimport type { ReactNode } from 'react';\nimport React, {\n  createContext,\n  forwardRef,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\n\nexport const TextInput = forwardRef<\n  HTMLInputElement,\n  React.InputHTMLAttributes<HTMLInputElement>\n>(function TextInput(props, ref) {\n  return (\n    <input\n      {...props}\n      ref={ref}\n      id={props.name ?? props.id}\n      type={props.type ?? 'text'}\n      className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-400 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500\"/>\n  );\n});\n\ntype TextAreaProps = {} & React.TextareaHTMLAttributes<HTMLTextAreaElement>;\n\nexport const TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(\n  function TextArea(props, ref) {\n    return (\n      <textarea\n        {...props}\n        ref={ref}\n        id={props.name ?? props.id}\n        rows={props.rows ?? 5}\n        className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50\"></textarea>\n    );\n  }\n);\n\ntype TextLabelProps = {} & React.LabelHTMLAttributes<HTMLLabelElement>;\n\nexport const TextLabel = forwardRef<HTMLLabelElement, TextLabelProps>(\n  function TextLabel(props, ref) {\n    return (\n      <label\n        {...props}\n        ref={ref}\n        className=\"mb-1 block text-sm font-medium text-gray-700\"/>\n    );\n  }\n);\n\ntype SelectProps = {\n  options: Array<{ id: string; name: string }>;\n} & React.InputHTMLAttributes<HTMLSelectElement>;\n\nexport const Select = forwardRef<HTMLSelectElement, SelectProps>(\n  function Select(allProps, ref) {\n    const { options, ...props } = allProps;\n    return (\n      <select\n        {...props}\n        ref={ref}\n        id={props.name ?? props.id}\n        defaultValue={props.defaultValue}\n        className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50\">\n        <option value=\"default\">Select an option</option>\n        {options?.map((item) => (\n          <option key={item.id} value={item.id}>\n            {item.name}\n          </option>\n        ))}\n      </select>\n    );\n  }\n);\n\ntype CheckboxLabelProps = {} & React.LabelHTMLAttributes<HTMLLabelElement>;\n\nexport const CheckboxLabel = forwardRef<HTMLLabelElement, CheckboxLabelProps>(\n  function CheckboxLabelFn(props, ref) {\n    return (\n      <label\n        {...props}\n        ref={ref}\n        className=\"text-sm font-medium text-gray-700\"/>\n    );\n  }\n);\n\ntype CheckboxProps = {\n  label: string;\n  reverse?: boolean;\n} & React.InputHTMLAttributes<HTMLInputElement>;\n\nexport const Checkbox = ({ label, reverse, ...props }: CheckboxProps) => (\n  <div\n    className={`flex items-center gap-x-2 mb-3${reverse ? ` flex-row-reverse justify-end` : ``}`}>\n    <input\n      {...props}\n      id={props.name ?? props.id}\n      type=\"checkbox\"\n      className=\"h-4 w-4 rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50 focus:ring-offset-0 disabled:cursor-not-allowed disabled:text-gray-400\"/>\n    <label\n      htmlFor={props.name ?? props.id}\n      className=\"text-sm font-medium text-gray-700\">\n      {label}\n    </label>\n  </div>\n);\n\nexport const InputRow = forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(function InputRowFn(props, ref) {\n  return (\n    <div\n      ref={ref}\n      className={`${\n        props.className ? `${props.className} ` : ''\n      }mx-auto max-w-lg mb-5`}>\n      {props.children}\n    </div>\n  );\n});\n\ntype TextboxFnProps = {} & React.InputHTMLAttributes<HTMLInputElement>;\n\ntype TextboxFnRef = React.ForwardedRef<HTMLInputElement>;\n\nfunction TextboxFn(props: TextboxFnProps, ref: TextboxFnRef) {\n  const { name, id, type, ...restProps } = props;\n  return (\n    <input\n      {...restProps}\n      ref={ref}\n      id={name ?? id}\n      name={name}\n      type=\"text\"\n      className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-400 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500\"/>\n  );\n}\n\ntype TextboxValidFnProps = {\n  validationFn: (val?: string | number | readonly string[]) => boolean;\n  validationMsg: string;\n  label?: string;\n} & React.InputHTMLAttributes<HTMLInputElement>;\n\ntype TextboxValidFnRef = React.ForwardedRef<HTMLInputElement>;\n\nfunction TextboxValidFn(props: TextboxValidFnProps, ref: TextboxValidFnRef) {\n  const {\n    name,\n    id,\n    type,\n    label,\n    validationFn,\n    validationMsg,\n    className: customStyles,\n    ...restProps\n  } = props;\n\n  const [isValid, setIsValid] = useState(false);\n\n  useEffect(() => {\n    setIsValid(validationFn(restProps.value));\n  }, [restProps.value]);\n\n  //const validationClasses = restProps.value !== '' && (isValid ? 'border border-green-500 shadow-[0_0_2px_1px_rgba(34,197,94,0.8)]' : 'border border-red-500 shadow-[0_0_2px_1px_rgba(255,0,0,0.5)]');\n  const validationClasses =\n    restProps.value !== '' &&\n    (isValid ? 'border border-green-500' : 'border border-red-500');\n\n  const baseStyle =\n    'block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-400 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500';\n  const shadowStyle = validationClasses\n    ? isValid\n      ? { boxShadow: '0 0 2px 1px rgba(34,197,94, 0.8)' }\n      : { boxShadow: '0 0 2px 1px rgba(235,10,10, 0.8)' }\n    : undefined;\n\n  return (\n    <>\n      {label && <TextLabel htmlFor={name ?? id}>{label}</TextLabel>}\n      <input\n        {...restProps}\n        ref={ref}\n        id={name ?? id}\n        name={name}\n        type={type}\n        className={`${customStyles} ${baseStyle} ${validationClasses}`}\n        style={shadowStyle}/>\n      {restProps.value != '' &&\n        (!isValid ? <p className=\"text-red-500\">{validationMsg}</p> : null)}\n    </>\n  );\n}\n\nfunction TextboxInlineSelectValidFn(\n  props: TextboxValidFnProps & { onSelectChange: React.ChangeEventHandler },\n  ref: TextboxValidFnRef\n) {\n  const {\n    name,\n    id,\n    type,\n    label,\n    validationFn,\n    validationMsg,\n    className: customStyles,\n    onSelectChange: handleSelectChange,\n    ...restProps\n  } = props;\n\n  const [isValid, setIsValid] = useState(false);\n  useEffect(() => {\n    setIsValid(validationFn());\n  }, [restProps.value]);\n  //const validationClasses = restProps.value !== '' && (isValid ? 'border border-green-500 shadow-[0_0_2px_1px_rgba(34,197,94,0.8)]' : 'border border-red-500 shadow-[0_0_2px_1px_rgba(255,0,0,0.5)]');\n  const validationClasses =\n    restProps.value !== '' &&\n    (isValid ? 'border border-green-500' : 'border border-red-500');\n\n  const baseStyle =\n    'block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-400 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500';\n  const shadowStyle = validationClasses\n    ? isValid\n      ? { boxShadow: '0 0 2px 1px rgba(34,197,94, 0.8)' }\n      : { boxShadow: '0 0 2px 1px rgba(235,10,10, 0.8)' }\n    : undefined;\n\n  return (\n    <>\n      <TextLabel\n        htmlFor={name ?? id}\n        className=\"mb-1 block text-sm font-medium text-gray-700\">\n        {label}\n      </TextLabel>\n      <div className=\"relative\">\n        <div className=\"absolute inset-y-0 right-0 flex items-center text-gray-500\">\n          <div className=\"pointer-events-none absolute inset-y-0 left-[-35px] flex items-center px-2.5 text-gray-800 border-x\">\n            @\n          </div>\n          <label htmlFor=\"currency\" className=\"sr-only\">\n            Email Domain\n          </label>\n          <select\n            id=\"emailDomain\"\n            name=\"emailDomain\"\n            onChange={handleSelectChange}\n            className=\"h-full rounded-md border-transparent bg-transparent py-0 pl-3 pr-7 text-gray-800 focus:border-primary-400 focus:ring-primary-400 sm:text-sm\">\n            <option value=\"us.af.mil\">us.af.mil</option>\n            <option value=\"spaceforce.mil\">spaceforce.mil</option>\n            <option value=\"health.mil\">health.mil</option>\n            <option value=\"mail.mil\">mail.mil</option>\n            <option value=\"army.mil\">army.mil</option>\n            <option value=\"us.navy.mil\">us.navy.mil</option>\n            <option value=\"usmc.mil\">usmc.mil</option>\n            <option value=\"uscg.mil\">uscg.mil</option>\n          </select>\n        </div>\n        <input\n          {...restProps}\n          ref={ref}\n          type={type ?? 'text'}\n          id={name ?? id}\n          name={name}\n          className={`${customStyles} ${baseStyle} ${validationClasses}`}\n          style={shadowStyle}\n          // className=\"block w-full rounded-md border-gray-300 pl-4 pr-[11.5rem] shadow-sm focus:border-primary-400 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500\"\n          placeholder=\"first.last\"/>\n      </div>\n      {restProps.value != '' &&\n        (!isValid ? <p className=\"text-red-500\">{validationMsg}</p> : null)}\n    </>\n  );\n}\n\ntype TextboxEmailFnProps = {} & React.InputHTMLAttributes<HTMLInputElement>;\n\ntype TextboxEmailFnRef = React.ForwardedRef<HTMLInputElement>;\n\nfunction TextboxEmailFn(props: TextboxEmailFnProps, ref: TextboxEmailFnRef) {\n  const { name, id, type, ...restProps } = props;\n  return (\n    <input\n      {...restProps}\n      ref={ref}\n      id={name ?? id}\n      name={name}\n      type=\"email\"\n      className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-400 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500\"/>\n  );\n}\n\ntype TextboxPasswordFnProps = {} & React.InputHTMLAttributes<HTMLInputElement>;\n\ntype TextboxPasswordFnRef = React.ForwardedRef<HTMLInputElement>;\n\nfunction TextboxPasswordFn(\n  props: TextboxPasswordFnProps,\n  ref: TextboxPasswordFnRef\n) {\n  const { name, id, type, ...restProps } = props;\n  return (\n    <input\n      {...restProps}\n      ref={ref}\n      id={name ?? id}\n      name={name}\n      type=\"password\"\n      className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-400 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500\"/>\n  );\n}\n\ntype HiddenFnProps = {} & React.InputHTMLAttributes<HTMLInputElement>;\n\ntype HiddenFnRef = React.ForwardedRef<HTMLInputElement>;\n\nfunction HiddenFn(props: HiddenFnProps, ref: HiddenFnRef) {\n  const { name, id, ...restProps } = props;\n  return (\n    <input {...restProps} ref={ref} type=\"hidden\" name={name} id={name ?? id} />\n  );\n}\n\ntype TextAreaFnProps = {} & React.TextareaHTMLAttributes<HTMLTextAreaElement>;\n\ntype TextAreaFnRef = React.ForwardedRef<HTMLTextAreaElement>;\n\nfunction TextAreaFn(props: TextAreaFnProps, ref: TextAreaFnRef) {\n  return (\n    <textarea\n      {...props}\n      ref={ref}\n      id={props.name ?? props.id}\n      rows={props.rows ?? 5}\n      className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50\"></textarea>\n  );\n}\n\ntype CheckboxFnProps = {\n  label: string;\n  reverse?: boolean;\n  variant?: 'textBase' | 'textLg';\n} & React.InputHTMLAttributes<HTMLInputElement>;\n\ntype CheckboxFnRef = React.ForwardedRef<HTMLDivElement>;\n\nfunction CheckboxFn(props: CheckboxFnProps, ref: CheckboxFnRef) {\n  const { name, id, label, reverse, variant, ...restProps } = props;\n  let labelTextSize = 'text-sm';\n  switch (variant) {\n    case 'textBase':\n      labelTextSize = 'text-base';\n      break;\n    case 'textLg':\n      labelTextSize = 'text-lg';\n      break;\n  }\n  return (\n    <div\n      ref={ref}\n      className={`flex items-center gap-x-2 mb-3${reverse ? ` flex-row-reverse justify-end` : ``}`}>\n      <input\n        {...restProps}\n        name={name}\n        id={name ?? id}\n        type=\"checkbox\"\n        className=\"h-4 w-4 rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50 focus:ring-offset-0 disabled:cursor-not-allowed disabled:text-gray-400\"/>\n      <label\n        htmlFor={name ?? id}\n        className={`${labelTextSize} font-medium text-gray-900`}>\n        {label}\n      </label>\n    </div>\n  );\n}\n\ntype CheckboxGroupFnProps = {} & React.HTMLAttributes<HTMLDivElement>;\n\ntype CheckboxGroupFnRef = React.ForwardedRef<HTMLDivElement>;\n\nfunction CheckboxGroupFn(props: CheckboxGroupFnProps, ref: CheckboxGroupFnRef) {\n  return (\n    <div ref={ref} className=\"px-3\">\n      {props.children}\n    </div>\n  );\n}\n\ntype RadioboxGroupFnProps = {} & React.HTMLAttributes<HTMLDivElement>;\n\ntype RadioboxGroupFnRef = React.ForwardedRef<HTMLDivElement>;\n\nfunction RadioboxGroupFn(props: RadioboxGroupFnProps, ref: RadioboxGroupFnRef) {\n  return (\n    <div ref={ref} className=\"flex items-center space-x-2\">\n      {props.children}\n    </div>\n  );\n}\n\ntype RadioboxFnProps = {\n  label: string;\n} & React.InputHTMLAttributes<HTMLInputElement>;\n\ntype RadioboxFnRef = React.ForwardedRef<HTMLInputElement>;\n\nfunction RadioboxFn(props: RadioboxFnProps, ref: RadioboxFnRef) {\n  const { label, name, id, ...restProps } = props;\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <input\n        {...restProps}\n        ref={ref}\n        type=\"radio\"\n        id={name ?? id}\n        name={name}\n        className=\"h-4 w-4 rounded-full border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50 focus:ring-offset-0 disabled:cursor-not-allowed disabled:text-gray-400\"/>\n      <label htmlFor={name} className=\"text-sm font-medium text-gray-700\">\n        {label}\n      </label>\n    </div>\n  );\n}\n\ntype OptionType = {\n  id: string | number;\n  name: string;\n  [key: string]: any | { id: string; name: string };\n};\n\ntype SelectFnProps = {\n  options: Array<OptionType>;\n  displayKey?: string;\n  valueKey?: string;\n} & React.InputHTMLAttributes<HTMLSelectElement>;\n\ntype SelectFnRef = React.ForwardedRef<HTMLSelectElement>;\n\nfunction SelectFn(props: SelectFnProps, ref: SelectFnRef) {\n  const { isValid } = useContext(ValidContext);\n  const { name, id, options, displayKey, valueKey, className, ...restProps } =\n    props;\n\n  const defaultClasses =\n    'block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50';\n\n  let usedClasses = defaultClasses;\n\n  if (className) usedClasses = `${className} ${defaultClasses}`;\n\n  if (!isValid)\n    usedClasses = `border-red-300 focus:border-red-300 focus:ring focus:ring-red-200 ${defaultClasses}`;\n\n  return (\n    <select\n      {...restProps}\n      ref={ref}\n      name={name}\n      id={name ?? id}\n      className={usedClasses}>\n      <option value=\"default\">Select an option</option>\n      {options?.map((item) => {\n        let optionValueKey;\n        if (valueKey?.includes('.')) {\n          let holder = item;\n          const split = valueKey.split('.');\n          for (const splitElement of split) {\n            holder = holder[splitElement];\n          }\n          optionValueKey = holder;\n        }\n\n        return (\n          <option\n            key={item.id}\n            value={optionValueKey ?? item[valueKey ?? 'id']}>\n            {displayKey\n              ? (item[displayKey] as { name: string }).name\n              : item.name}\n          </option>\n        );\n      })}\n    </select>\n  );\n}\n\ntype RichTextProps = {\n  content?: string;\n  limit?: number;\n} & React.InputHTMLAttributes<HTMLInputElement>;\n\ntype RichtTextRef = React.ForwardedRef<HTMLInputElement>;\n\nfunction RichTextFn(\n  { content, limit, name, id, ...props }: RichTextProps,\n  ref: RichtTextRef\n) {\n  const context = useContext(RichTextEditorContext);\n\n  useEffect(() => {\n    if (context.setContent && content) context.setContent(content);\n  }, [content]);\n\n  return (\n    <>\n      <Input.Hidden\n        ref={ref}\n        name={name}\n        id={name ?? id}\n        {...props}\n        value={context.content}/>\n      <RichTextEditor content={content} limit={limit} />\n    </>\n  );\n}\n\ntype ValidationFnProps = {\n  whenToShow: boolean;\n  message: string;\n};\n\nfunction ValidationFn(props: ValidationFnProps) {\n  return (\n    props.whenToShow && (\n      <p className=\"mt-1 text-sm text-red-500\">{props.message}</p>\n    )\n  );\n}\n\ntype ValidContextValue = {\n  isValid: boolean;\n  message?: string;\n};\n\nconst ValidContext = createContext<ValidContextValue>({\n  isValid: true,\n  message: '',\n});\n\ntype ValidationGroupProps = ValidContextValue & React.PropsWithChildren;\n\nfunction ValidationGroupFn({\n  isValid,\n  message,\n  ...props\n}: ValidationGroupProps) {\n  const [hasHelpMsgChild, setHasHelpMsgChild] = useState(false);\n\n  useEffect(() => {\n    if (Array.isArray(props.children)) {\n      for (const child of props.children) {\n        if (\n          typeof child.type === 'function' &&\n          child.type.name === 'ValidationHelpMsgFn'\n        ) {\n          setHasHelpMsgChild(true);\n        }\n      }\n    }\n  }, [props.children]);\n\n  // have a context\n  return (\n    <ValidContext.Provider value={{ isValid, message }}>\n      {props.children}\n      {!hasHelpMsgChild && <ValidationHelpMsgFn>{message}</ValidationHelpMsgFn>}\n    </ValidContext.Provider>\n  );\n}\ntype ValidationHelpMsgProps = React.PropsWithChildren;\n\nfunction ValidationHelpMsgFn({ children }: ValidationHelpMsgProps) {\n  const { isValid, message } = useContext(ValidContext);\n  // Use validationgroup context {msg and isValid}\n  let output: ReactNode = 'Help Message.';\n\n  if (children) {\n    output = children;\n  } else if (message) {\n    output = message;\n  }\n  return !isValid && <p className=\"mt-1 text-sm text-red-500\">{output}</p>;\n}\n\nexport let Input = {\n  Text: forwardRef(TextboxFn),\n  TextWithValidation: forwardRef(TextboxValidFn),\n  TextInlineSelectWithValidation: forwardRef(TextboxInlineSelectValidFn),\n  Textarea: forwardRef(TextAreaFn),\n  Checkbox: forwardRef(CheckboxFn),\n  Select: forwardRef(SelectFn),\n  Hidden: forwardRef(HiddenFn),\n  CheckboxGroup: forwardRef(CheckboxGroupFn),\n  Email: forwardRef(TextboxEmailFn),\n  Password: forwardRef(TextboxPasswordFn),\n  Radiobox: forwardRef(RadioboxFn),\n  RadioboxGroup: forwardRef(RadioboxGroupFn),\n  RichText: forwardRef(RichTextFn),\n  Validation: forwardRef(ValidationFn), //({children}) => <p>{children}</p>\n  ValidationGroup: ValidationGroupFn,\n  HelpMsg: ValidationHelpMsgFn,\n};\n","import { OrgCombobox } from '@components/OrgCombobox';\nimport { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/24/solid';\nimport type { AccountWithProfile, DefaultUserProfile } from '@lib/constants';\nimport { UserRank } from '@lib/constants';\nimport type { StringOrDate } from '@lib/types';\nimport { isInputType, isSelectType } from '@lib/utils';\nimport { MoveType, type Organization, Rank } from '@prisma/client';\nimport { useFetcher } from '@remix-run/react';\nimport type { OrganizationWithChildren } from '@repositories/organization.server';\nimport type { ErrorType } from '@routes/_auth+/register.queries.server';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport { AcceptButton, Button } from '../Buttons';\nimport ErrorReport from '../ErrorReport';\nimport { Input } from '../Input';\nimport { Transition } from '@headlessui/react';\n\ntype UserFormProps = {\n  orgs: StringOrDate<Pick<Organization, 'name' | 'uuid'>>[];\n  users?: Array<Pick<DefaultUserProfile, 'id' | 'name'>>;\n  account?: Omit<StringOrDate<AccountWithProfile>, 'password'>;\n  allRequired?: boolean;\n  btnAction: 'create' | 'update';\n  registerOrCreate: 'create' | 'register';\n  currentOrg?: Organization;\n  orgParentNode: OrganizationWithChildren;\n  orgFlatArray: Organization[];\n};\n\nexport type FetcherResponseType =\n  | { status: 'success' }\n  | {\n      status: 'error';\n      error: {\n        type: ErrorType;\n        message: string;\n      };\n    };\n\nconst RegisterForm = ({\n  orgs,\n  allRequired = true,\n  btnAction = 'create',\n  registerOrCreate = 'register',\n  currentOrg,\n  orgFlatArray,\n  orgParentNode,\n}: UserFormProps) => {\n  const tabs = ['userAccount', 'details', 'questionnaire', 'confirmation'];\n  const [activeTab, setActiveTab] = useState(tabs[0]);\n  const [confPassHasChanged, setConfPassHasChanged] = useState(false);\n\n  const initialValues = {\n    name: '',\n    rank: Rank.CIV,\n    dodId: '0000000000',\n    org: currentOrg?.uuid ?? orgFlatArray[0].uuid,\n    password: '',\n    confirmPassword: '',\n    personalPhone: '',\n    workPhone: '',\n    workEmail: '',\n    hasDependents: false,\n    isDormResident: false,\n    sponsorReach: false,\n    hasEFMP: false,\n    personalEmail: '',\n    emailDomain: 'us.af.mil',\n  };\n\n  const reducerFn = (\n    inputs: typeof initialValues,\n    action: {\n      type: 'changeText' | 'changeRadio';\n      value: string | boolean;\n      field: string;\n    }\n  ) => {\n    switch (action.type) {\n      case 'changeText':\n        return {\n          ...inputs,\n          [action.field]: action.value,\n        };\n      case 'changeRadio':\n        return {\n          ...inputs,\n          [action.field]: action.value,\n        };\n      default:\n        return {\n          ...inputs,\n          etc: action.value,\n        };\n    }\n  };\n\n  const [state, dispatch] = useReducer(reducerFn, initialValues);\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  const [showMove, setShowMove] = useState(false);\n\n  const isDodIdValid = useCallback(() => {\n    const dodId = state.dodId;\n    return /^[0-9]{10}$/.test(dodId);\n  }, [state.dodId]);\n\n  const isPasswordValid = useCallback(() => {\n    console.log('checking password');\n    const password = state.password;\n\n    const hasNoSpaces = !/\\s/.test(password);\n    const isLongEnough = password.length >= 10;\n    return hasNoSpaces && isLongEnough;\n  }, [state.password]);\n\n  const isConfirmPasswordValid = useCallback(() => {\n    const confirmPassword = state.confirmPassword;\n\n    return (\n      confirmPassword !== '' &&\n      confirmPassword === state.password &&\n      isPasswordValid()\n    );\n  }, [isPasswordValid, state.confirmPassword, state.password]);\n\n  const isNameValid = useCallback(() => {\n    const trimmedName = state.name.trim();\n    const words = trimmedName.split(' ');\n    state.name = words\n      .map(\n        (word) =>\n          word.charAt(0).toUpperCase() + word.slice(1).toLocaleLowerCase()\n      )\n      .join(' ');\n\n    return words.length >= 2 && words.every((word) => word !== '');\n  }, [state]);\n\n  const isWorkEmailValid = useCallback(() => {\n    state.workEmail = state.workEmail.trim().toLocaleLowerCase();\n    const email = state.workEmail;\n\n    const maxEmailLength = 254;\n    if (email === '' || email.length > maxEmailLength) {\n      return false;\n    }\n\n    return !email.includes('@');\n  }, [state]);\n\n  const isFormValid = useCallback(() => {\n    console.log('checking form');\n    return (\n      state.org !== '' &&\n      state.workEmail !== '' &&\n      state.password !== '' &&\n      state.confirmPassword !== '' &&\n      state.name !== '' &&\n      isNameValid() &&\n      isWorkEmailValid() &&\n      isDodIdValid() &&\n      isPasswordValid() &&\n      isConfirmPasswordValid()\n    );\n  }, [isConfirmPasswordValid, isDodIdValid, isNameValid, isPasswordValid, isWorkEmailValid, state.confirmPassword, state.name, state.org, state.password, state.workEmail]);\n\n\n  const userAccountTabFirstInput = useRef<HTMLInputElement | null>(null);\n  const detailsTabFirstInput = useRef<HTMLInputElement | null>(null);\n  const questionTabFirstInput = useRef<HTMLInputElement | null>(null);\n  const summaryTabFirstInput = useRef<HTMLInputElement | null>(null);\n\n  useEffect(() => {\n    switch (activeTab) {\n      case 'userAccount':\n        if (userAccountTabFirstInput.current) {\n          userAccountTabFirstInput.current.focus();\n        }\n        break;\n      case 'details':\n        if (detailsTabFirstInput.current) {\n          detailsTabFirstInput.current.focus();\n        }\n        break;\n      case 'questionnaire':\n        if (questionTabFirstInput.current) {\n          questionTabFirstInput.current.focus();\n        }\n        break;\n      case 'confirmation':\n        break;\n    }\n  }, [activeTab]);\n\n  const handleTabClick = (tabIndex: string | number) => {\n    if (typeof tabIndex === 'number') {\n      if (tabIndex >= 0 && tabIndex < tabs.length) {\n        setActiveTab(() => {\n          return tabs[tabIndex];\n        });\n      }\n    } else if (typeof tabIndex === 'string') {\n      setActiveTab(tabIndex);\n    }\n  };\n\n  const handleNextClick = () => {\n    if (isFormValid()) {\n      const currentIndex = tabs.indexOf(activeTab);\n      handleTabClick(currentIndex + 1);\n    }\n\n    if (buttonClicked) {\n      setButtonClicked(true);\n    }\n  };\n\n  const handlePreviousClick = () => {\n    const currentIndex = tabs.indexOf(activeTab);\n    handleTabClick(currentIndex - 1);\n  };\n\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    if (event.currentTarget.name && event.currentTarget.value !== undefined) {\n      const value =\n        event.currentTarget.name === 'workEmail'\n          ? event.currentTarget.value.toLocaleLowerCase()\n          : event.currentTarget.value;\n      dispatch({\n        type: 'changeText',\n        field: event.currentTarget.name,\n        value,\n      });\n      if (event.currentTarget.name === 'confirmPassword') {\n        setConfPassHasChanged(true);\n      }\n    }\n  };\n\n  const handleRadioChange = (field: string, value: boolean | string) => {\n    dispatch({ type: 'changeRadio', field, value });\n  };\n\n  function handleKeyUp(e: React.KeyboardEvent<HTMLFormElement>) {\n    if (e.key === 'Enter') {\n      if (activeTab === 'confirmation') {\n        handleSubmit();\n      } else {\n        handleNextClick();\n      }\n    }\n  }\n\n  const handleSubmit = () => {\n    // const { confirmPassword, ...rest } = state;\n    if (!isFormValid()) {\n      return;\n    }\n    fetcher.submit(\n      {\n        ...state,\n      },\n      { method: 'POST' }\n    );\n  };\n\n  const fetcher = useFetcher<FetcherResponseType>();\n\n  return (\n    <>\n      {fetcher.data?.status === 'error' && (\n        <div className=\"bg-red-700/80 rounded-lg my-5 py-2 text-slate-100 font-bold text-lg text-center\">\n          {Array.isArray(fetcher.data.error)\n            ? fetcher.data.error.map((err) => err.message)\n            : fetcher.data.error.message}\n        </div>\n      )}\n      <ol className=\"mt-5 flex items-center w-full text-sm font-medium text-center text-black mb-5\">\n        <li className=\"flex md:w-full items-center after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-200 after:border-1 after:hidden sm:after:inline-block after:mx-6 xl:after:mx-10 dark:after:border-gray-700\">\n          <span className=\"flex items-center after:content-['/'] sm:after:hidden after:mx-2 after:text-gray-200 dark:after:text-gray-500\">\n            <Button\n              onClick={() => handleTabClick('userAccount')}\n              name=\"userAccount\"\n              className={`${activeTab === 'userAccount' ? ' bg-zinc-700 text-white' : ''} whitespace-nowrap`}>\n              Account Information\n            </Button>\n          </span>\n        </li>\n        <li className=\"flex md:w-full items-center after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-200 after:border-1 after:hidden sm:after:inline-block after:mx-6 xl:after:mx-10 dark:after:border-gray-700\">\n         \n        </li>\n        <li className=\"flex md:w-full items-center after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-200 after:border-1 after:hidden sm:after:inline-block after:mx-6 xl:after:mx-10 dark:after:border-gray-700\">\n          <span className=\"flex items-center after:content-['/'] sm:after:hidden after:mx-2 after:text-gray-200 dark:after:text-gray-500\">\n            <Button\n              disabled={!isFormValid()}\n              onClick={() => handleTabClick('questionnaire')}\n              name=\"questionnaire\"\n              className={`whitespace-nowrap ${activeTab === 'questionnaire' ? ' bg-zinc-700 text-white' : ''} ${isFormValid() ? '' : 'cursor-not-allowed disabled'}`}>\n              Questionnaire\n            </Button>\n          </span>\n        </li>\n        <li className=\"flex items-center\">\n          <Button\n            disabled={!isFormValid()}\n            onClick={() => handleTabClick('confirmation')}\n            className={`whitespace-nowrap ${activeTab === 'confirmation' ? ' bg-zinc-700 text-white' : ''} ${isFormValid() ? '' : 'cursor-not-allowed disabled'}`}>\n            Confirmation\n          </Button>\n        </li>\n      </ol>\n      <fetcher.Form\n        method=\"post\"\n        className=\"flex flex-col lg:h-[600px] pt-5\"\n        id=\"registerForm\"\n        onKeyUp={handleKeyUp}>\n        {activeTab === 'userAccount' && (\n          <div className=\"grid mx-auto w-3/5 px-10 py-5 rounded-lg border border-1 shadow-lg\">\n            <h2 className=\"text-xl text-center font-bold mt-5 mb-5\">\n              Account Infomation\n            </h2>\n            <div className=\"mb-2\">\n              <label className=\"block mb-1 text-sm font-medium text-black\">\n                Select Rank\n              </label>\n              <select\n                name=\"rank\"\n                ref={userAccountTabFirstInput}\n                defaultValue={state.rank}\n                onChange={handleChange}\n                className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50\">\n                {Object.entries(UserRank).map((item, index) => (\n                  <option key={index} value={item[0]}>\n                    {item[1].name}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"mb-2\">\n              <Input.TextWithValidation\n                label=\"Full Name\"\n                type=\"text\"\n                validationFn={isNameValid}\n                validationMsg=\"Please enter a valid First and Last name\"\n                name=\"name\"\n                value={state.name}\n                onChange={handleChange}\n                required={true}/>\n            </div>\n            {/* <div className=\"mb-2 hidden\">\n             <label\n             htmlFor=\"text\"\n             className=\"block mb-1 text-sm font-medium text-gray-900 dark:text-black\">\n             DOD ID Number\n             </label>\n             <input\n             type=\"text\"\n             id=\"dod\"\n             name=\"dodId\"\n             value={state.dodId}\n             onChange={handleChange}\n             className={`bg-gray-50 border border-gray-300 text-gray-500 text-sm rounded-lg block w-full p-2.5 placeholder:text-black ${buttonClicked && !isDodIdValid() ? 'border border-red-500' : ''}`}\n             pattern=\"[0-9]{10}\"\n             required={allRequired} />\n             </div>\n             {!isDodIdValid() && buttonClicked ? <p className=\"text-red-500\">Please enter your valid DOD ID number</p> : null} */}\n            {/* <div className=\"mb-2\">\n             <label\n             htmlFor=\"email\"\n             className=\"block mb-1 text-sm font-medium text-gray-900 dark:text-black\">\n             Official Email address\n             </label>\n             <input\n             type=\"email\"\n             id=\"workEmail\"\n             name=\"workEmail\"\n             className={`placeholder:text-black bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 ${state.workEmail !== '' && (isWorkEmailValid() ? 'border border-green-500 shadow-[0_0_2px_1px_rgba(34,197,94,0.8)]' : 'border border-red-500 shadow-[0_0_2px_1px_rgba(235,10,10,0.5)]')}`}\n             value={state.workEmail}\n             onChange={handleChange}\n             required={allRequired} />\n             {state.workEmail !== '' && (!isWorkEmailValid() ? <p className=\"text-red-500\">Please enter a valid .mil email address.</p> : null)}\n             </div> */}\n            <div className=\"mb-2\">\n              <Input.TextInlineSelectWithValidation\n                label=\"Official Email Address\"\n                validationFn={isWorkEmailValid}\n                validationMsg=\"Please enter the beginning of your email address (first_name.last_name).\"\n                onSelectChange={handleChange}\n                name=\"workEmail\"\n                value={state.workEmail}\n                onChange={handleChange}\n                required={true}></Input.TextInlineSelectWithValidation>\n              <p className=\"text-sm mt-2\">\n                If your domain is missing please let us know{' '}\n                <a\n                  href=\"https://travisspark.atlassian.net/servicedesk/customer/portal/4/group/8/create/10032\"\n                  target=\"_blank\"\n                  className=\"underline\"\n                  rel=\"noreferrer\">\n                  here\n                </a>\n                .\n              </p>\n            </div>\n            {!currentOrg && (\n              <>\n                <hr className=\"my-4 h-px border-0 bg-gray-300\" />\n                <div className=\"mb-2\">\n                  <OrgCombobox\n                    name=\"org\"\n                    parentNode={orgParentNode}\n                    selected={orgFlatArray.find(org => org.uuid === state.org) ?? orgFlatArray[0]}\n                    orgArray={orgFlatArray}\n                    onChange={handleChange}\n                    isCreateAccountPage={true}\n                    label=\"Select Organization:\"/>\n                </div>\n              </>\n            )}\n            <hr className=\"my-4 h-px border-0 bg-gray-300\" />\n            <div className=\"mb-2\">\n              <Input.TextWithValidation\n                label=\"Password\"\n                type=\"password\"\n                validationFn={isPasswordValid}\n                validationMsg=\"The password needs a minimum of 10 characters.\"\n                name=\"password\"\n                value={state.password}\n                onChange={handleChange}\n                required={true} />\n            </div>\n            <div className=\"mb-2\">\n              <Input.TextWithValidation\n                label=\"Confirm Password\"\n                type=\"password\"\n                validationFn={isConfirmPasswordValid}\n                validationMsg=\"The passwords must match.\"\n                name=\"confirmPassword\"\n                value={state.confirmPassword}\n                onChange={handleChange}\n                required={true} />\n            </div>\n          </div>\n        )}\n        {activeTab === 'details' && (\n          <div className=\"grid mx-auto w-3/5 px-10 py-5 rounded-lg border border-1 shadow-lg\">\n           \n            <div className=\"mb-2\">\n              <label\n                htmlFor=\"phone\"\n                className=\"block mb-1 text-sm font-medium text-gray-900 dark:text-black\">\n                Work Phone number (Optional)\n                <span className=\"text-xs\" />\n              </label>\n              <input\n                type=\"tel\"\n                id=\"workPhone\"\n                name=\"workPhone\"\n                className=\"placeholder:text-black bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5\"\n                onChange={handleChange}\n                value={state.workPhone}\n                pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                required={allRequired}/>\n            </div>\n      \n            <div className=\"mb-2\">\n              <label\n                htmlFor=\"bio\"\n                className=\"block mb-1 text-sm font-medium text-gray-900 dark:text-black\">\n                Biography (Optional)\n              </label>\n              <textarea\n                id=\"bio\"\n                name=\"bio\"\n                className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5\"/>\n            </div>\n          </div>\n        )}\n        {activeTab === 'questionnaire' && (\n          <div className=\"grid mx-auto w-3/5 px-10 py-5 rounded-lg border border-1 shadow-lg\">\n            <h2 className=\"text-xl text-center font-bold mt-5 mb-5\">\n              Questionnaire\n            </h2>\n\n            <div className=\"mb-2\">\n              <h1>Are you currently a dorm resident?</h1>\n              <input\n                type=\"radio\"\n                ref={questionTabFirstInput}\n                id=\"dormResidentYes\"\n                name=\"isDormResident\"\n                defaultChecked={state.isDormResident}\n                onChange={(e) => handleRadioChange(e.currentTarget.name, true)}\n                required={allRequired}/>\n              <label className=\"ml-1\" htmlFor=\"dormResidentYes\">\n                Yes\n              </label>\n              <input\n                className=\"ml-3\"\n                type=\"radio\"\n                id=\"dormResidentNo\"\n                name=\"isDormResident\"\n                defaultChecked={!state.isDormResident}\n                onChange={(e) => handleRadioChange(e.currentTarget.name, false)}\n                required={allRequired}/>\n              <label className=\"ml-1\" htmlFor=\"dormResidentNo\">\n                No\n              </label>\n            </div>\n\n            <div className=\"mb-2\">\n              <h1>Do you currently have any dependents?</h1>\n              <input\n                type=\"radio\"\n                id=\"hasDependentsYes\"\n                name=\"hasDependents\"\n                defaultChecked={state.hasDependents}\n                onChange={(e) => handleRadioChange(e.currentTarget.name, true)}\n                required={allRequired}/>\n              <label className=\"ml-1\" htmlFor=\"hasDependentsYes\">\n                Yes\n              </label>\n              <input\n                className=\"ml-3\"\n                type=\"radio\"\n                id=\"hasDependentsNo\"\n                name=\"hasDependents\"\n                defaultChecked={!state.hasDependents}\n                onChange={(e) => handleRadioChange(e.currentTarget.name, false)}\n                required={allRequired}/>\n              <label className=\"ml-1\" htmlFor=\"hasDependentsNo\">\n                No\n              </label>\n            </div>\n\n            {/* <div className=\"mb-2\">\n              <h1>Have you been contacted by your sponsor?</h1>\n              <input\n                type=\"radio\"\n                id=\"sponsorContactYes\"\n                name=\"sponsorReach\"\n                defaultChecked={state.sponsorReach}\n                onChange={(e) => handleRadioChange(e.currentTarget.name, true)} />\n              <label\n                className=\"ml-1\"\n                htmlFor=\"sponsorContactYes\">Yes</label>\n              <input\n                className=\"ml-3\"\n                type=\"radio\"\n                id=\"sponsorContactNo\"\n                name=\"sponsorReach\"\n                defaultChecked={!state.sponsorReach}\n                onChange={(e) => handleRadioChange(e.currentTarget.name, false)} />\n              <label\n                className=\"ml-1\"\n                htmlFor=\"sponsorContactNo\">No</label>\n            </div> */}\n\n            <div className=\"mb-2\">\n              <h1>\n                Is any member of your family enrolled in the Exceptional Family\n                Member Program (EFMP)?*\n              </h1>\n              <div className=\"text-xs mb-1\">\n                <p>\n                  *Service members on active duty enroll in the program if they\n                  have a Family member with a physical, emotional,\n                  developmental, or intellectual disorder requiring specialized\n                  services so their needs can be considered in the military\n                  personnel assignment process.\n                </p>\n              </div>\n              <input\n                type=\"radio\"\n                id=\"hasEFMPYes\"\n                name=\"hasEFMP\"\n                defaultChecked={state.hasEFMP}\n                onChange={(e) => handleRadioChange(e.currentTarget.name, true)}/>\n              <label className=\"ml-1\" htmlFor=\"hasEFMPYes\">\n                Yes\n              </label>\n\n              <input\n                className=\"ml-3\"\n                type=\"radio\"\n                id=\"hasEFMPNo\"\n                name=\"hasEFMP\"\n                defaultChecked={!state.hasEFMP}\n                onChange={(e) => handleRadioChange(e.currentTarget.name, false)}/>\n              <label className=\"ml-1\" htmlFor=\"hasEFMPNo\">\n                No\n              </label>\n            </div>\n            <div></div>\n          </div>\n        )}\n        {activeTab === 'confirmation' && (\n          <div className=\"container grid grid-cols-3\">\n            <div className=\"col-start-2 text-xl text-center font-bold mt-5 mb-5\">\n              <h2>\n                {registerOrCreate === 'create'\n                  ? 'Confirm Information'\n                  : 'Confirm Your Information'}\n              </h2>\n            </div>\n            <div className=\"col-start-2 rounded-lg border border-neutral mx-auto w-[510px]\">\n              <table className=\"table w-full \">\n                <tbody>\n                  <tr className=\"border-b even:bg-zinc-100\">\n                    <td className=\"pl-2 py-2\">Rank:</td>\n                    <td className=\"font-bold py-2 pr-2\">\n                      {UserRank[state.rank].name}\n                    </td>\n                  </tr>\n                  <tr className=\"border-b even:bg-zinc-100\">\n                    <td className=\"pl-2 py-2\">Name:</td>\n                    <td className={`font-bold py-2 pr-2`}>{state.name}</td>\n                  </tr>\n                  {!currentOrg && (\n                    <tr className=\"border-b even:bg-zinc-100\">\n                      <td className=\"pl-2 py-2\">Organization:</td>\n                      <td className=\"font-bold py-2 pr-2\">\n                        {orgs.filter((org) => org.uuid === state.org)[0]?.name}\n                      </td>\n                    </tr>\n                  )}\n                  {/* <tr className=\"border-b even:bg-zinc-100\">\n                    <td className=\"pl-2 py-2\">DoD ID:</td>\n                    <td className={`font-bold py-2 pr-2`}>{state.dodId ? '':'n/a'}</td>\n                  </tr> */}\n                  <tr className=\"border-b even:bg-zinc-100\">\n                    <td className=\"pl-2 py-2\">Official Email:</td>\n                    <td className={`font-bold py-2 pr-2`}>\n                      {state.workEmail}@{state.emailDomain}\n                    </td>\n                  </tr>\n                \n                  {state.workPhone && (\n                    <tr className=\"border-b even:bg-zinc-100\">\n                      <td className=\"pl-2 py-2\">Work Phone:</td>\n                      <td className=\"font-bold py-2 pr-2\">{state.workPhone}</td>\n                    </tr>\n                  )}\n              \n                  {/* <tr className=\"border-b even:bg-zinc-100\">\n                     <td className=\"pl-2 py-2\">Biography:</td>\n                     <td className=\"font-bold py-2 pr-2\">Add your biography content here</td>\n                  </tr> */}\n                  <tr className=\"border-b even:bg-zinc-100\">\n                    <td className=\"pl-2 py-2\">\n                      Are {registerOrCreate === 'create' ? 'they' : 'you'}{' '}\n                      currently a dorm resident?\n                    </td>\n                    <td className=\"font-bold py-2 pr-2\">\n                      {state.isDormResident ? 'Yes' : 'No'}\n                    </td>\n                  </tr>\n                  <tr className=\"border-b even:bg-zinc-100\">\n                    <td className=\"pl-2 py-2\">\n                      Do {registerOrCreate === 'create' ? 'they' : 'you'}{' '}\n                      currently have any dependents?\n                    </td>\n                    <td className=\"font-bold py-2 pr-2\">\n                      {state.hasDependents ? 'Yes' : 'No'}\n                    </td>\n                  </tr>\n                  {/* <tr className=\"border-b even:bg-zinc-100\">\n                    <td className=\"pl-2 py-2\">Have you been contacted by your sponsor?</td>\n                    <td className=\"font-bold py-2 pr-2\">{state.sponsorReach ? 'Yes' : 'No'}</td>\n                  </tr> */}\n                  <tr className=\"border-b even:bg-zinc-100\">\n                    <td className=\"pl-2 py-2\">\n                      Do {registerOrCreate === 'create' ? 'they' : 'you'}{' '}\n                      qualify for EFMP?\n                    </td>\n                    <td className=\"font-bold py-2 pr-2\">\n                      {state.hasEFMP ? 'Yes' : 'No'}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n            <Transition show={registerOrCreate === 'create'}>\n              <div className=\"col-start-2 my-5 justify-self-center\">\n                <Input.Checkbox\n                  name=\"assignChecklist\"\n                  onChange={(e) => {\n                    setShowMove((prev) => {\n                      handleRadioChange(\n                        'moveType',\n                        !prev ? MoveType.PCS : undefined\n                      );\n                      return !prev;\n                    });\n                    console.log(e.target.checked);\n                    handleRadioChange(e.target.name, e.target.checked);\n                  }}\n                  defaultChecked={showMove}\n                  variant=\"textLg\"\n                  label={`Would you like to assign a checklist to ${state.name}?`}/>\n                <Transition\n                  show={showMove}\n                  as=\"div\"\n                  enter=\"transition duration-200\"\n                  enterFrom=\"opacity-0 -translate-y-10\"\n                  enterTo=\"opacity-100 translate-y-0\"\n                  leaveTo=\"opacity-0 -translate-y-10\"\n                  leave=\"transition duration-200\">\n                  <p className=\"mb-2 text-base text-center text-zinc-600\">\n                    What type of checklist would you like to assign?\n                  </p>\n                  <div className=\"flex gap-10 justify-center\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"moveType\"\n                        value=\"PCS\"\n                        required={showMove}\n                        onChange={(e) =>\n                          handleRadioChange('moveType', MoveType.PCS)\n                        }\n                        defaultChecked={true}\n                        id=\"pcsMoveType\"\n                        className=\"border sr-only peer border-zinc-400 rounded px-6\"/>\n                      <span className=\"border hover:bg-blue-200 hover:cursor-pointer peer-checked:text-white border-zinc-400 rounded-lg px-6 py-1 text-sm peer select-none peer-checked:bg-blue-500 peer-checked:font-bold font-medium text-gray-900 dark:text-gray-300\">\n                        PCS\n                      </span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"moveType\"\n                        value=\"PCA\"\n                        required={showMove}\n                        onChange={(e) =>\n                          handleRadioChange('moveType', MoveType.PCA)\n                        }\n                        id=\"pcaMoveType\"\n                        className=\"border sr-only peer border-zinc-400 rounded px-6\"/>\n                      <span className=\"border hover:bg-blue-200 hover:cursor-pointer peer-checked:text-white border-zinc-400 rounded-lg px-6 py-1 text-sm peer select-none peer-checked:bg-blue-500 peer-checked:font-bold font-medium text-gray-900 dark:text-gray-300\">\n                        PCA\n                      </span>\n                    </label>\n                  </div>\n                </Transition>\n              </div>\n            </Transition>\n            <div className=\"col-start-2 mt-20\">\n              <AcceptButton\n                className=\"bg-green-400 w-full\"\n                ref={summaryTabFirstInput}\n                name=\"_action\"\n                value={btnAction}\n                type=\"button\"\n                onClick={handleSubmit}>\n                Submit\n              </AcceptButton>\n            </div>\n          </div>\n        )}\n      </fetcher.Form>\n      <div className=\"flex justify-between w-full mt-20\">\n        <div>\n          <Button\n            onClick={handlePreviousClick}\n            disabled={activeTab === 'userAccount'}\n            className=\"inline-flex items-center\"\n            name=\"previous\"\n            type=\"button\">\n            <ChevronLeftIcon className=\"h-5 w-5\"></ChevronLeftIcon> Previous\n          </Button>\n        </div>\n        <div>\n          <Button\n            onClick={() => {\n              setButtonClicked(true);\n              handleNextClick();\n            }}\n            disabled={!isFormValid() || activeTab === 'confirmation'}\n            className={`inline-flex items-center ${isFormValid() && !buttonClicked ? '' : 'bg-blue-500'}`}\n            name=\"next\"\n            type=\"button\">\n            Next <ChevronRightIcon className=\"h-5 w-5\"></ChevronRightIcon>\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default RegisterForm;\n","import { Models } from '@lib/models.server';\n\nexport async function getRootNode(orgId: string) {\n  return Models.org.findDescendantsTree(orgId);\n}\n\nexport async function getRoot() {\n  return Models.org.findRoot();\n}\nexport async function getRootTree() {\n  const id = (await Models.org.findRoot()).uuid;\n\n  return Models.org.findDescendantsTree(id);\n}\n\nexport async function getRootDescendants() {\n  const id = (await Models.org.findRoot()).uuid;\n\n  return Models.org.findDescendants(id);\n}\n","import type {\n  AttributeKeys,\n  CategoryPermission,\n  RolePermissionsEnum,\n} from '@lib/types';\nimport { isValueInEnum } from '@lib/utils';\n\nexport enum AttributeCategory {\n  ADMIN = 'admin',\n  SUPERADMIN = 'superadmin',\n  CHECKLISTS = 'checklists',\n  MEMBERS = 'members',\n  METRICS = 'metrics',\n  MOVES = 'moves',\n  ORGS = 'orgs',\n  ORGROLES = 'orgroles',\n  ROLES = 'roles',\n  TASKS = 'tasks',\n  TEMPLATES = 'templates',\n  UNITS = 'units',\n  BASES = 'bases',\n}\n\nexport enum Operation {\n  READ = 'READ',\n  WRITE = 'WRITE',\n  DELETE = 'DELETE',\n}\n\nexport function createPermission(\n  category: AttributeCategory,\n  ...attributes: Operation[]\n): CategoryPermission {\n  return {\n    category,\n    attributes: attributes.length === 1 ? attributes[0] : attributes,\n  };\n}\n\nexport function generateAttributes<T extends object>(categoryEnum: T): Record<keyof AttributeKeys, CategoryPermission> {\n  const categories = Object.keys(categoryEnum);\n  let categoryPermissions: Record<string, CategoryPermission> = {};\n  for (const category of categories) {\n    categoryPermissions[`${ category }_READ`] = createPermission(\n      category.toLowerCase() as AttributeCategory,\n      Operation.READ\n    );\n    categoryPermissions[`${ category }_READWRITE`] = createPermission(\n      category.toLowerCase() as AttributeCategory,\n      Operation.READ,\n      Operation.WRITE\n    );\n    categoryPermissions[`${ category }_READWRITEDELETE`] = createPermission(\n      category.toLowerCase() as AttributeCategory,\n      Operation.READ,\n      Operation.WRITE,\n      Operation.DELETE\n    );\n  }\n\n  return categoryPermissions;\n}\n\nexport const Attribute: AttributeKeys = {...generateAttributes(AttributeCategory)} as const;\n\nconst cssPermissions = [\n  Attribute.TASKS_READWRITEDELETE,\n  Attribute.CHECKLISTS_READWRITEDELETE,\n  Attribute.METRICS_READ,\n  Attribute.TEMPLATES_READWRITEDELETE,\n  Attribute.ORGS_READWRITEDELETE,\n  Attribute.MOVES_READWRITEDELETE,\n  Attribute.MEMBERS_READWRITEDELETE,\n  Attribute.ORGROLES_READWRITE,\n];\n\nconst adminPermissions = [...cssPermissions, Attribute.ROLES_READWRITEDELETE, Attribute.ADMIN_READWRITEDELETE];\n\nconst superAdminPermissions = [...adminPermissions, Attribute.SUPERADMIN_READWRITEDELETE];\n\nexport const RolePermissions: RolePermissionsEnum = {\n  APPROVER: [Attribute.TASKS_READWRITEDELETE, Attribute.METRICS_READ],\n  COMMANDER: [Attribute.MEMBERS_READ, Attribute.METRICS_READ],\n  CSS: cssPermissions,\n  ADMIN: adminPermissions,\n  SUPERADMIN: superAdminPermissions,\n} as const;\n\n/**\n * Compares two maps, checking if the userMap contains all the required values specified in the reqdMap for each category.\n *\n * @param userMap - The user map to be compared.\n * @param reqdMap - The map containing required values for each category.\n * @returns {boolean} Returns true if userMap contains all the required values for each category, otherwise false.\n */\nexport function compareMaps(\n  userMap: Map<string, Operation[] | Operation>,\n  reqdMap: Map<string, Operation[] | Operation>\n): boolean {\n  for (const [category, requiredValues] of reqdMap) {\n    if (!userMap.has(category)) {\n      return false;\n    }\n\n    const userValues = userMap.get(category);\n    if (Array.isArray(requiredValues)) {\n      for (const requiredValue of requiredValues) {\n        if (!userValues?.includes(requiredValue)) {\n          return false;\n        }\n      }\n    } else {\n      if(!userValues?.includes(requiredValues))\n        return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Verifies the attributes in the provided userMap to ensure they are valid role attributes.\n * Throws a TypeError if any attribute is not READ, WRITE, or DELETE.\n *\n * @param {Map<AttributeCategory, Operation[]>} userMap - The map containing role categories and their associated attributes.\n * @throws {TypeError} Throws a TypeError if any attribute is not READ, WRITE, or DELETE.\n */\nexport function verifyAttributes(userMap: Map<string, Operation[] | Operation>) {\n  const isOperation = isValueInEnum(Operation);\n  for (const [key, attributes] of userMap) {\n    if (key && attributes) {\n      if (Array.isArray(attributes)) {\n        for (const attribute of attributes) {\n          if (!attribute || !isOperation(attribute)) {\n            // Check if the user category has the requested attribute\n            throw new TypeError(\n              `Role attribute ${attribute} should be READ, WRITE, or DELETE`\n            );\n          }\n        }\n      }\n      else {\n        if (!attributes || !isOperation(attributes)) {\n          // Check if the user category has the requested attribute\n          throw new TypeError(\n            `Role attribute ${attributes} should be READ, WRITE, or DELETE`\n          );\n        }\n      }\n    } else {\n      throw new TypeError(\n        `Role attribute ${attributes} should be READ, WRITE, or DELETE`\n      );\n    }\n  }\n}\n\n/**\n * Verifies that the provided operations are valid Operation types.\n * Throws a TypeError if any operation is invalid.\n *\n * @param operations - The operation(s) to verify.\n * @throws {TypeError} Throws a TypeError if any operation is not a valid Operation type.\n */\nexport function verifyOperations(operations: Operation | Operation[]) {\n  const isOperation = isValueInEnum(Operation);\n  if (Array.isArray(operations)) {\n    for (const op of operations) {\n      if (!op || !isOperation(op)) throw new TypeError(`${op} is not an Operation type.`);\n    }\n  } else if (!operations || !isOperation(operations)) throw new TypeError(`${operations} is not an Operation type.`);\n}\n\n/**\n * Converts an object or array of objects representing category permissions into a Map.\n *\n * @param permObject - The object or array of objects representing category permissions.\n * @returns The map containing category permissions.\n * @throws {TypeError} Throws a TypeError if any category or operation is invalid.\n */\nexport function objectToMap(permObject: CategoryPermission | CategoryPermission[]) {\n  const isRoleCategory = isValueInEnum(AttributeCategory);\n\n  const requiredPermissions = new Map<AttributeCategory, Operation[]>();\n\n  function setMap(\n    category: AttributeCategory,\n    operations: Operation | Operation[]\n  ) {\n    if (!category || !isRoleCategory(category)) throw new TypeError(`${category} is not a valid category.`);\n\n    verifyOperations(operations);\n\n    if (Array.isArray(operations))\n      requiredPermissions.set(category, operations);\n    else requiredPermissions.set(category, [operations]);\n  }\n\n  if (Array.isArray(permObject)) {\n    for (const requiredPerm of permObject) {\n      setMap(requiredPerm.category, requiredPerm.attributes);\n    }\n  } else {\n    setMap(permObject.category, permObject.attributes);\n  }\n\n  return requiredPermissions;\n}\n","import { UserRank, type UserSessionData } from '@lib/constants';\nimport {\n  Attribute,\n  AttributeCategory,\n  compareMaps,\n  objectToMap,\n  Operation,\n  RolePermissions,\n  verifyAttributes,\n} from '@lib/utils/utils.permissions';\n\nimport type { Prisma, Rank } from '@prisma/client';\nimport type { SessionData } from '@remix-run/node';\n\nexport const isInputType = (target: unknown): target is HTMLInputElement =>\n  target instanceof HTMLInputElement;\n\nexport const isSelectType = (target: unknown): target is HTMLSelectElement =>\n  target instanceof HTMLSelectElement;\n\n/**\n * A generic function to determine if a value is in the given enum\n * @param {Record<string, E>} strEnum An enum that has strings as values\n * @returns {(value: (string | string[])) => value is E[] | E}\n */\nexport const isValueInEnum = <E extends string>(\n  strEnum: Record<string, E>\n): ((value: string | string[]) => value is E[] | E) => {\n  if (!strEnum) throw new Error('no enum');\n  const enumValues = Object.values(strEnum) as string[];\n\n  return (value: string | string[]): value is E | E[] => {\n    if (!value) throw new Error('in the callback');\n    if (Array.isArray(value)) return enumValues.includes(value[0]);\n    return enumValues.includes(value);\n  };\n};\n\nexport function isPrismaKnownError(\n  err: unknown\n): err is Prisma.PrismaClientKnownRequestError {\n  return !!(err as Prisma.PrismaClientKnownRequestError).code;\n}\n\nexport {\n  Attribute,\n  RolePermissions,\n  AttributeCategory,\n  Operation,\n  compareMaps,\n  objectToMap,\n  verifyAttributes,\n};\n\n// Verifies obj is of type { roles, permissions, ...user data}\nexport function isUserSessionData(obj: unknown): obj is UserSessionData {\n  return (\n    Array.isArray((obj as UserSessionData).roles) &&\n    (obj as UserSessionData).roles.every(\n      (role: any) => typeof role === 'object' && typeof role.name === 'string'\n    ) && // Check if roles array contains objects with a 'name' property of type string\n    typeof (obj as UserSessionData).permissions === 'string' &&\n    typeof (obj as UserSessionData).email === 'string' &&\n    typeof (obj as UserSessionData).id === 'string'\n  );\n}\n\n// Verifies obj is of type { roles, permissions, user }\nexport function isUserLayoutData(obj: unknown): obj is SessionData {\n  return (\n    Array.isArray((obj as SessionData).roles) &&\n    (obj as SessionData).roles.every(\n      (role: any) => typeof role === 'object' && typeof role.name === 'string'\n    ) && // Check if roles array contains objects with a 'name' property of type string\n    typeof (obj as SessionData).permissions === 'string' &&\n    typeof (obj as SessionData).user.workEmail === 'string' &&\n    typeof (obj as SessionData).user.id === 'string'\n  );\n}\n\nexport enum PasswordError {\n  None,\n  Spaces,\n  Length,\n  Mismatch,\n}\n\nexport function isValidPassword(password: string, comparePassword?: string):  PasswordError[] {\n  const errors = [];\n  if (comparePassword)\n    if (comparePassword !== '' &&\n        comparePassword !== password) errors.push(PasswordError.Mismatch);\n\n  let hasNoSpaces = !/\\s/.test(password);\n  if (!hasNoSpaces) errors.push(PasswordError.Spaces);\n\n  const isLongEnough = password.length >= 10;\n  if (!isLongEnough) errors.push(PasswordError.Length);\n\n  return errors;\n}\n\n// Helper function to get the display name for a rank\nexport const getRankDisplay = (\n  rank: Rank,\n  useAbbreviation: boolean = false\n): string => {\n  return useAbbreviation ? UserRank[rank].abb : UserRank[rank].name;\n};\n","import { Models } from '@lib/models.server';\nimport { MoveType, Organization } from '@prisma/client';\nimport { json } from '@remix-run/node';\nimport type { Params } from '@remix-run/react';\nimport type {\n  OrganizationCreateDto,\n  OrganizationUpdateDto,\n} from '@repositories/dtos';\n\nexport async function getOutboundMembers(orgId: string) {\n  return Models.org.getOutboundMembers(orgId);\n}\n\ntype HeadersAndSearchParams = {\n  defaultOrgId: string;\n  searchParams: URLSearchParams;\n  params?: Params<string>;\n};\n\nexport async function getOrgBeingViewed(\n  { defaultOrgId, searchParams, params }: HeadersAndSearchParams,\n  includeTemplates = false,\n): Promise<{\n  orgBeingViewed: Organization & { templates?: any[] };\n  orgParam: string;\n}> {\n  let orgId;\n\n  if (!searchParams || !defaultOrgId)\n    throw json({ error: 'org or search params not found' });\n  const orgIdSearchParam = searchParams.get('org');\n\n  //console.log('.........', orgIdSearchParam)\n\n  if (params && params.orgId) {\n    orgId = params.orgId;\n  } else if (orgIdSearchParam) {\n    orgId = orgIdSearchParam;\n  } else {\n    orgId = defaultOrgId;\n  }\n\n  let orgBeingViewed;\n\n  if (includeTemplates) {\n    orgBeingViewed = await Models.org.getWithTemplates(orgId);\n  } else {\n    orgBeingViewed = await Models.org.get(orgId);\n  }\n\n  if (!orgBeingViewed) throw json({ error: 'org not found' });\n\n  return { orgBeingViewed, orgParam: orgId };\n}\n\nexport async function cancelMemberMove(userId: string) {\n  await Models.userProfile.cancelMove(userId);\n}\n\nexport async function getOrg(id: string) {\n  return Models.org.get(id);\n}\n\nexport async function getOrgsByBase(baseId: string) {\n  return Models.org.getAllAtBase(baseId);\n}\n\nexport async function getOrgDescendants(parentId: string) {\n  return Models.org.findDescendants(parentId);\n}\n\nexport async function getOrgDescendantsTree(parentId: string) {\n  return Models.org.findDescendantsTree(parentId);\n}\n\nexport async function getAncestorTree(parentId: string) {\n  return Models.org.findAncestorsTree(parentId);\n}\n\nexport async function getAncestors(parentId: string) {\n  return Models.org.countAncestors(parentId);\n}\n\nexport async function getClosure(descendantIds: string[]) {\n  return Models.org.getClosureData(descendantIds);\n}\n\nexport async function createClosure(\n  ancestorId: string,\n  descendantId: string,\n  length: number,\n) {\n  return Models.org.createClosureEntryAtDepth(ancestorId, descendantId, length);\n}\n\nexport async function getAllOrgs() {\n  return Models.org.getAll({ excludeDaf: true });\n}\n\nexport async function getOrgsByMoveType(moveType: MoveType, baseId: string) {\n  const orgs = await Models.org.getAllByMoveType(moveType, baseId);\n  return orgs.filter((org) => org.uuid !== baseId);\n}\n\nexport async function getAllBases() {\n  return Models.base.getAll();\n}\n\nexport async function updateMemberMove(\n  userId: string,\n  data: { nextOrg: string | undefined; moveType: MoveType },\n) {\n  await Models.userProfile.editMove(userId, data);\n}\n\nexport async function acceptMemberMove(\n  userId: string,\n  currentOrgId: string,\n  previousOrgId: string,\n) {\n  await Models.userProfile.acceptMove(userId, currentOrgId, previousOrgId);\n}\n\nexport async function getUserChecklist(id: string) {\n  return Models.checklist.getChecklistItems(id);\n}\n\nexport async function getChecklistsCount(templateId: string) {\n  return Models.checklist.getChecklistsCount(templateId);\n}\n\n// inprocessing checklist completion percentage\nexport async function getChecklistItems(userId: string) {\n  return Models.checklist.getChecklistItems(userId);\n}\n\ntype getInprocessMembersReturnType = {\n  user: {\n    id: string;\n    name: string;\n  };\n  checklist: {\n    id: string;\n    type: string;\n    lastUpdated: string;\n    lastUpdate: {\n      date: string;\n      by: {\n        id: string;\n        name: string;\n      };\n    };\n    count: {\n      totalItems: number;\n      completedItems: number;\n    };\n  };\n};\nexport async function getInprocessingMembers(orgId: string) {\n  return Models.org.getInprocessMembers(orgId);\n}\nexport async function getArchivedMembers(orgId: string) {\n  return Models.org.getArchivedMembers(orgId);\n}\nexport async function getCompletedMembers(orgId: string) {\n  return Models.org.getCompletedMembers(orgId);\n}\n// Supervisor Page\nexport async function getSponsorsByOrg(orgId: string) {\n  return Models.org.getSponsorsByOrg(orgId);\n}\nexport async function getSponsors(userId: string) {\n  return Models.org.getSponsors(userId);\n}\nexport async function getSupervisors(orgId: string) {\n  return Models.org.getSupervisors(orgId);\n}\nexport async function getSubordinates(orgId: string) {\n  return Models.org.getSubordinates(orgId);\n}\n\nexport async function getInboundMembers(orgId: string) {\n  return Models.org.getInboundMembers(orgId);\n}\n\nexport async function getOrgWithTemplates(orgId: string, moveType: MoveType) {\n  return Models.org.getTemplatesByMoveType(moveType, orgId);\n}\n\nexport async function createOrg(data: OrganizationCreateDto) {\n  // Create the org\n  const orgId = await Models.org.create(data);\n  // Create empty PCS and PCA templates\n  // await Models.template.create({\n  //   type: MoveType.PCS,\n  //   name: `${data.name} PCS Checklist`,\n  //   description: '',\n  //   owningOrganizationId: orgId,\n  // });\n  // await Models.template.create({\n  //   type: MoveType.PCA,\n  //   name: `${data.name} PCA Checklist`,\n  //   description: '',\n  //   owningOrganizationId: orgId,\n  // });\n}\n\nexport async function getDafOrg() {\n  return Models.org.getDafOrg();\n}\n\nexport async function updateOrg(id: string, data: OrganizationUpdateDto) {\n  await Models.org.update(id, data);\n}\n\nexport async function moveOrgs(orgId: string, newParent: string) {\n  await Models.org.moveOrg(orgId, newParent);\n}\n\nexport async function deleteOrg(id: string) {\n  await Models.org.delete(id);\n}\n\nexport async function removeOrgFromClosureTree(descendantId: string) {\n  await Models.org.removeFromClosureTree(descendantId);\n}\n\nexport async function getAllBasesFromOrg() {\n  return Models.org.getAllBasesFromOrgs();\n}\n","import type { UserSessionData } from '@lib/constants';\nimport type { CategoryPermission } from '@lib/types';\nimport {\n  type AttributeCategory,\n  compareMaps,\n  isUserSessionData,\n  objectToMap,\n  type Operation,\n  verifyAttributes,\n} from '@lib/utils';\nimport { Models } from '@lib/models.server';\nimport { authenticator } from '@services/auth.server';\nimport { destroySession, getSession } from '@services/session.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { redirectWithError } from 'remix-toast';\n\ntype RequireUserOptions = {\n  failureRedirect?: string;\n  redirectOnFailure?: boolean;\n  returnUserObject?: boolean;\n};\n\ntype RequireUserProps = {\n  options?: RequireUserOptions;\n  permissions?: CategoryPermission | CategoryPermission[];\n};\n\n// Define Content Security Policy (CSP) directives\nconst cspDirectives = [\n  'default-src \\'self\\'',\n  'object-src \\'none\\'',\n  'upgrade-insecure-requests',\n];\n\nconst cspHeader = cspDirectives.join('; ');\n\nexport async function requireUser<T extends RequireUserProps>(\n  request: Request,\n  props?: T\n): Promise<T['options'] extends { returnUserObject: true } ? UserSessionData : string> {\n  const { permissions, options = {} } = props ?? { options: {} };\n  const { failureRedirect = '/', redirectOnFailure = true } = options;\n\n  const { userId } = await authenticator.isAuthenticated(request, {\n    failureRedirect: '/login',\n  });\n\n  let user;\n\n  try {\n    user = await Models.userProfile.getSessionObject(userId);\n  } catch (e) {\n    if (redirectOnFailure && failureRedirect) {\n      const headers = new Headers();\n\n      headers.append('Set-Cookie', await destroySession(await getSession(request.headers.get('cookie'))));\n      headers.append('Content-Security-Policy', cspHeader); // Apply CSP header\n\n      throw await redirectWithError(\n        failureRedirect,\n        'Access Denied: You do not have permission to view this page or perform this action. Please contact the administrator for assistance.',\n        { headers }\n      );\n    } else {\n      throw new AuthorizationError('User not authorized.');\n    }\n  }\n\n  if (permissions) {\n    if (!user.permissions) {\n      if (redirectOnFailure) {\n        throw redirectWithError(\n          failureRedirect,\n          'Access Denied: You do not have permission to view this page or perform this action. Please contact the administrator for assistance.'\n        );\n      } else throw new AuthorizationError('User not authorized.');\n    }\n\n    // Convert strings to Map()s\n    const userPermissions = new Map<AttributeCategory, Operation[]>(JSON.parse(user.permissions));\n\n    // Convert object to map\n    const requiredPermissions = objectToMap(permissions);\n\n    verifyAttributes(userPermissions);\n\n    if (!compareMaps(userPermissions, requiredPermissions)) {\n      if (redirectOnFailure) {\n        throw redirectWithError(\n          failureRedirect,\n          'Access Denied: You do not have permission to view this page or perform this action. Please contact the administrator for assistance.'\n        );\n      } else throw new AuthorizationError('User not authorized.');\n    }\n  }\n\n  // Apply CSP when returning user data\n  const headers = new Headers();\n  headers.append('Content-Security-Policy', cspHeader);\n\n  if (options.returnUserObject) {\n    const hasAdmin = user.roles.find((orgRole) => orgRole.abbreviation === 'ADMIN');\n\n    if (hasAdmin) {\n      user.currentOrg = await Models.org.get(hasAdmin?.owningOrgId);\n    }\n\n    return user as T['options'] extends { returnUserObject: true } ? UserSessionData : never;\n  }\n\n  return userId as T['options'] extends { returnUserObject?: true } ? never : never;\n}\n\nexport async function requireUserAsObject(\n  request: Request,\n  {\n    options,\n    permissions,\n  }: {\n    options?: RequireUserOptions;\n    permissions?: CategoryPermission | CategoryPermission[];\n  } = { options: { returnUserObject: true } }\n): Promise<UserSessionData> {\n  try {\n    if (!options) options = {};\n\n    options.returnUserObject = true;\n\n    const userData = await requireUser(request, { options, permissions });\n\n    if (!isUserSessionData(userData)) {\n      throw new Error('User data is not an object');\n    }\n\n    return userData;\n  } catch (e) {\n    throw e;\n  }\n}\n\n","import { type ChecklistWithTemplate } from '@lib/constants';\nimport { Attribute } from '@lib/utils';\nimport { handleActionError } from '@lib/utils/utils.server';\nimport { Checklist, MoveType } from '@prisma/client';\nimport type { UserRegisterDto, UserUpdateDto } from '@repositories/dtos';\nimport { Models } from '@lib/models.server';\nimport type { GetUserOptions, MoveData } from '@repositories/user.server';\nimport { getAllOrgs } from '@routes/_withNav+/_withSideBar+/_manage+/.server/org.queries';\nimport { ActionFunctionArgs, json, LoaderFunctionArgs } from '@remix-run/node';\nimport { requireUser } from '@services/user.server';\nimport { z } from 'zod';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\n\nexport async function EditActionFn({ request, params }: ActionFunctionArgs) {\n  const orgParam = new URL(request.url).searchParams.get('org');\n\n  const { userId } = params;\n  if (!userId)\n    return jsonWithError(\n      { status: 'error', message: 'No user id.' },\n      'There was an error!'\n    );\n\n  const userEditSchema = z.object({\n    userId: z.string().min(1),\n    name: z.string().min(1),\n    workEmail: z.string().email(),\n    password: z.string().optional(),\n    confirmPassword: z.string().optional(),\n    hasDependents: z.preprocess((value) => value === 'on', z.boolean()),\n    isDormResident: z.preprocess((value) => value === 'on', z.boolean()),\n    hasEFMP: z.preprocess((value) => value === 'on', z.boolean()),\n    hasGraduated: z.preprocess((value) => value === 'on', z.boolean()),\n    assignedOrg: z.string().optional(),\n    moveType: z.nativeEnum(MoveType).optional(),\n    assignChecklist: z.preprocess((value) => value === 'on', z.boolean()),\n    _action: z.union([z.literal('onboard'), z.literal('edit'), z.literal('deleteSuper'), z.literal('deleteSponsor')]),\n    supervisorId: z.string().optional(),\n    sponsorsId: z.string().optional(),\n  });\n\n  try {\n    const {\n      userId,\n      name,\n      workEmail,\n      password,\n      hasDependents,\n      isDormResident,\n      hasEFMP,\n      hasGraduated,\n      assignedOrg,\n      moveType,\n      assignChecklist,\n      supervisorId,\n      sponsorsId,\n      _action,\n    } = userEditSchema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n\n    let data: {\n      cssVerified: Date;\n      hasDependents: boolean;\n      hasEFMP: boolean;\n      hasGraduated: boolean;\n      isDormResident: boolean;\n      name: string;\n      password?: string;\n      personalEmail: null;\n      personalPhone: null;\n      sponsor: null;\n      workEmail: string;\n      workPhone: null\n      assignedOrg?: string;\n      supervisorId?: string;\n      sponsorsId?: string;\n    } = {\n      name,\n      workEmail,\n      password,\n      hasDependents,\n      isDormResident,\n      hasEFMP,\n      hasGraduated,\n      personalEmail: null,\n      personalPhone: null,\n      workPhone: null,\n      sponsor: null,\n      supervisorId,\n      sponsorsId,\n      cssVerified: new Date(Date.now()),\n    };\n\n    let attribute = Attribute.MEMBERS_READWRITE;\n\n    if (_action === 'edit' && assignedOrg && assignedOrg !== 'default') {\n      data.assignedOrg = assignedOrg;\n      attribute = Attribute.ADMIN_READWRITE;\n    }\n\n    const loggedInUserId = await requireUser(request, {\n      options: {\n        redirectOnFailure: false,\n      },\n      permissions: attribute,\n    });\n\n    if(_action === 'deleteSuper'){\n      await removeSupervisorId(userId);\n      return new Response(JSON.stringify({ success: true}),\n      {headers: {\"Content-Type\": \"application/json\"},}\n    )}\n\n    if(_action === 'deleteSponsor'){\n      await removeSponsorId(userId);\n      return new Response(JSON.stringify({ success: true}),\n      {headers: {\"Content-Type\": \"application/json\"},}\n    )}\n\n    if (_action === 'onboard') {\n      if(supervisorId !== \"default\"){\n        await updateSubordinateWithSupervisorId(supervisorId, userId);\n      }\n      if (!assignedOrg) throw new Error('Assigned organization is required.')\n      await onboardUser({ userId, userData: data, moveType, assignedById: loggedInUserId, orgId: assignedOrg });\n      return redirectWithSuccess(\n        `/user/onboard${orgParam ? `?org=${orgParam}` : ''}`,\n        'Member Saved!'\n      );\n    } else {\n      if(supervisorId !== \"default\"){\n        await updateSubordinateWithSupervisorId(supervisorId, userId);\n      }\n      if(sponsorsId !== \"default\"){\n        await updateProfileWithSponsorsId(sponsorsId, userId);\n      }\n      await updateProfile(userId, data);\n      return redirectWithSuccess(\n        `/user${orgParam ? `?org=${orgParam}` : ''}`,\n        'Member Saved!'\n      );\n    }\n\n    \n  } catch (err) {\n    if (err.message === 'Please select an org') {\n      return jsonWithError(\n        { status: 'error', message: 'Invalid assigned organization.' },\n        'Please select an organization.'\n      );\n    }\n    return handleActionError(err, 'There was an error onboarding the Member.');\n  }\n}\n\nconst hasDetails = (org: unknown): org is { uuid: string; name: string } =>\n  !!(org as { uuid: string; name: string }).name &&\n  !!(org as { uuid: string; name: string }).uuid;\n\nexport async function EditLoaderFn({params, request}: LoaderFunctionArgs) {\n  const loggedIn = await requireUser(request, { permissions: Attribute.MEMBERS_READWRITE });\n  const loggedInOrgId = await getUser(loggedIn);\n\n  const { userId: userIdParam } = params;\n\n  if (!userIdParam)\n    throw json({ status: 'error', message: 'ID is required' }, { status: 400 });\n\n  const user = await getUser(userIdParam);\n  if (!user.currentOrg || !hasDetails(user.currentOrg))\n    throw new Error('User\\'s assigned org not found');\n\n  // TODO: This is a band-aid for VIP-57, VIP-59, and VIP-60. The list should be grouped by base and searchable\n  const orgs = await getAllOrgs();\n\n  const allUsers = await getAllUsers(loggedInOrgId.currentOrgId);\n\n  return json({\n    user,\n    allUsers,\n    loggedIn,\n    currentOrg: user.currentOrg,\n    orgs: orgs.sort((a,b) => a.name.localeCompare(b.name)),\n  });\n}\n\nexport async function getUsersByBase(id: string, options?: GetUserOptions) {\n  return Models.userProfile.getAllByBase(id, options);\n}\nexport async function getUsersByOrg(id: string, options?: GetUserOptions) {\n  return Models.userProfile.getAllByOrg(id, options);\n}\n\nexport async function getUsersFromOrgTree(id: string, options?: GetUserOptions) {\n  return Models.userProfile.getAllFromOrgTree(id, options);\n}\n\nexport async function getOnboardingUsers() {\n  return Models.userProfile.getAllOnboardingUsers();\n}\n\nexport async function getAllUserProfiles() {\n  return Models.userProfile.getAll();\n}\n\nexport async function getAllUsers(orgId: string){\n  return Models.userProfile.getAllUser(orgId);\n}\n\nexport async function getUser(id: string) {\n  return Models.userProfile.get(id);\n}\n\nexport async function getUserWithNextOrg(id: string) {\n  return Models.userProfile.getWithNextOrg(id);\n}\n\nexport async function registerUser(data: UserRegisterDto) {\n  const userData = await Models.userProfile.register(data);\n}\n\nexport async function updateProfile(id: string, data: UserUpdateDto) {\n  await Models.userProfile.update(id, data);\n}\n\nexport async function updateSubordinateWithSupervisorId(supervisorId: string, userId: string) {\n  await Models.userProfile.updateSub(supervisorId, userId);\n}\n\nexport async function updateProfileWithSponsorsId(sponsorsId: string, userId: string) {\n  await Models.userProfile.updateProfileWithSponsor(sponsorsId, userId);\n}\n\n// export async function onboardUser(id: string, data: UserUpdateDto, moveType: MoveType) {\n//   updateProfile(id, data);\n//   await Service.userRepository.startMove(id, {moveType, nextOrg: data.assignedOrg})\n// }\n\nexport async function deleteAccount(id: string) {\n  await Models.userProfile.deleteUserAccount(id);\n}\n\nexport async function startMemberMove(userId: string, data: MoveData) {\n  await Models.userProfile.startMove(userId, data);\n}\n\n\nfunction checklistTypeExists(checklists: any[] = [], moveType: MoveType | null) {\n  return (\n    checklists.findIndex(\n      (checklist: ChecklistWithTemplate) =>\n        checklist.template.type === moveType\n    ) === -1\n  );\n}\n\ntype AssignFunctionArgs = {\n  orgId: string;\n  userId: string;\n  assignedById: string;\n  moveType?: MoveType;\n  userData: UserUpdateDto;\n};\n\nexport async function onboardUser({\n  orgId,\n  userId,\n  assignedById,\n  moveType,\n  userData,\n}: AssignFunctionArgs) {\n  userData.nextOrg = orgId;\n  if (moveType)\n    userData.moveType = moveType;\n\n  const userProfile = await Models.userProfile.update(userId, userData);\n\n  //The above statement updates the userProfile with the hasGraduated checkbox if selected\n  //This might be a good place to send the email and so on...\n\n  await assignChecklist(userProfile, moveType, assignedById, { orgId });\n\n  await Models.userProfile.acceptMove( userId, orgId );\n}\n\nexport async function removeSupervisorId(userId: string){\n  await Models.userProfile.removeSuper( userId );\n}\nexport async function removeSponsorId(userId: string){\n  await Models.userProfile.removeSponsor( userId );\n}\n\nexport async function assignChecklist(\n  userProfile: {\n    id: string;\n    checklists?: Partial<Checklist>[];\n    hasDependents?: boolean | null;\n    isDormResident?: boolean | null;\n    hasEFMP?: boolean | null;\n  },\n  moveType: MoveType | undefined | null,\n  assignedById: string,\n  { orgId, templateId }: { orgId?: string; templateId?: string },\n) {\n  if (moveType) {\n    let template\n    if (orgId)\n      template = await Models.template.findByOrgAndType(orgId, moveType);\n    if (templateId)\n      template = { id: templateId };\n\n    if (!template) throw new Error('orgId or templateId are required.')\n\n    if (checklistTypeExists(userProfile.checklists, moveType)) {\n      let templates\n      if (orgId && !templateId)  templates = await Models.template.getInheritedItems(template.id);\n      if (templateId && !orgId) templates = await Models.template.getInheritedItems(templateId);\n\n      if(!templates) throw new Error('orgId or templateId are required.');\n\n      const filteredItems = templates.templateItems.filter((item) => {\n        if (item.forHasEFMP || item.forHasDependents || item.forDormResidents) {\n          if (item.forHasDependents && userProfile.hasDependents) return true;\n          else if (item.forDormResidents && userProfile.isDormResident)\n            return true;\n          else if (item.forHasEFMP && userProfile.hasEFMP) return true;\n\n          return false;\n        } else {\n          return true;\n        }\n      });\n\n      await Models.checklist.create({\n        name: templates.type.toString(),\n        assignedById,\n        userId: userProfile.id,\n        templateItems: filteredItems,\n        templateId: templates.templateId,\n      });\n    } else {\n      throw new Error('Checklist type already exists.');\n    }\n  }\n}\n","import { Models } from '@lib/models.server';\nimport { MoveType, Rank } from '@prisma/client';\nimport { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';\nimport { json, redirect } from '@remix-run/node';\nimport type { UserRegisterDto } from '@repositories/dtos';\nimport { assignChecklist } from '@routes/_withNav+/_withSideBar+/_manage+/user+/.server/user.queries';\nimport { commitDataSession, getDataSession } from '@services/cookie.server';\nimport type { ZodTypeAny } from 'zod';\nimport { z, ZodError } from 'zod';\n\nexport async function getOrgs() {\n  return Models.org.getAll({ excludeDaf: true });\n}\n\nexport async function registerUser(data: UserRegisterDto, loggedInUser?: string, currentOrg?: string) {\n  if (loggedInUser && currentOrg) {\n    const user = await Models.userProfile.create( data );\n    if (data.assignChecklist)\n    {\n      await assignChecklist(user, data.moveType, loggedInUser, { orgId: currentOrg });\n    }\n    return user.id;\n  }\n  return Models.userProfile.register(data);\n}\n\nexport enum ErrorType {\n  Generic,\n  AlreadyExists,\n  Validation,\n}\n\nexport async function registerUserActionFn(\n  request: Request,\n  redirectUrl: string,\n  loggedInUser?: string,\n  orgId?: string\n) {\n  try {\n    const account = validateRequest(\n      Object.fromEntries((await request.formData()).entries())\n    );\n    // return json(account);\n    await registerUser(account, loggedInUser, orgId);\n    const session = await getDataSession(request.headers.get('cookie'));\n\n    session.flash(\n      'message',\n      'Account created successfully. Please wait for CSS Verification.'\n    );\n\n    return redirect(redirectUrl, {\n      headers: {\n        'Set-Cookie': await commitDataSession(session),\n        'X-Frame-Options': 'SAMEORIGIN',\n        'Content-Security-Policy': 'frame-ancestors: none',\n      },\n    });\n  } catch (err) {\n    console.error(err);\n    if (err instanceof ZodError) {\n      return json({ status: 'error', error: err.errors }, {\n        headers: {\n          'X-Frame-Options': 'SAMEORIGIN',\n        },\n        status: 422,\n      });\n    } else if (err instanceof PrismaClientKnownRequestError) {\n      return json(\n        {\n          status: 'error',\n          error: {\n            type: ErrorType.AlreadyExists,\n            message: `The email provided is already in use.`,\n          },\n        },\n        {\n          headers: {\n            'X-Frame-Options': 'SAMEORIGIN',\n          },\n          status: 400,\n        }\n      );\n    } else {\n      return json(\n        {\n          status: 'error',\n          error: {\n            type: ErrorType.Generic,\n            message: `The email provided is already in use.`,\n          },\n        },\n        {\n          headers: {\n            'X-Frame-Options': 'SAMEORIGIN',\n          },\n          status: 400,\n        }\n      );\n    }\n  }\n}\n\nconst zodRadioButton: [ZodTypeAny, ZodTypeAny, ...ZodTypeAny[]] = [\n  z.literal('true').transform(() => true),\n  z.literal('false').transform(() => false),\n];\n\nexport const registerSchema = z.object({\n  name: z.string(),\n  org: z.string(),\n  personalPhone: z.string().nullable(),\n  workPhone: z.string().nullable(),\n  workEmail: z.string(),\n  personalEmail: z.string().optional(),\n  hasDependents: z.union(zodRadioButton),\n  isDormResident: z.union(zodRadioButton),\n  hasEFMP: z.union(zodRadioButton),\n  password: z.string(),\n  rank: z.nativeEnum(Rank),\n  sponsor: z.string().optional(),\n  supervisor: z.string().optional(),\n  assignedOrg: z.string().optional(),\n  moveType: z.nativeEnum(MoveType).optional(),\n  assignChecklist: z.preprocess((value) => value === 'true', z.boolean()),\n  emailDomain: z.union([\n    z.literal('us.af.mil'),\n    z.literal('us.navy.mil'),\n    z.literal('uscg.mil'),\n    z.literal('mail.mil'),\n    z.literal('health.mil'),\n    z.literal('spaceforce.mil'),\n    z.literal('army.mil'),\n    z.literal('usmc.mil'),\n  ]),\n});\n\nexport function validateRequest(obj: { [p: string]: FormDataEntryValue }) {\n  const {\n    assignChecklist,\n    assignedOrg,\n    emailDomain,\n    hasDependents,\n    hasEFMP,\n    isDormResident,\n    moveType,\n    name,\n    org,\n    password,\n    // personalEmail,\n    // personalPhone,\n    rank,\n    // sponsor,\n    // supervisor,\n    workEmail,\n    workPhone,\n  } = registerSchema.parse(obj);\n\n  return {\n    password,\n    moveType,\n    assignChecklist,\n    profile: {\n      rank,\n      name,\n      workEmail: workEmail + '@' + emailDomain,\n      currentOrgId: org,\n      workPhone,\n      image: '',\n      hasDependents,\n      isDormResident,\n      hasEFMP,\n      sponsorReach: false,\n      assignedOrg,\n    },\n  };\n}\n","import ErrorReport from '@components/ui/ErrorReport';\nimport RegisterForm from '@components/ui/forms/RegisterForm';\nimport type { ActionFunctionArgs} from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Link, useLoaderData } from '@remix-run/react';\nimport { getRootDescendants, getRootTree } from '@routes/_withNav+/_withSideBar+/_manage+/.server/manage.queries';\nimport {\n  getOrgs, registerUserActionFn,\n} from './register.queries.server';\n\n\nexport const loader = async () => {\n  const orgs = await getOrgs();\n  const parentNode = await getRootTree();\n  const orgFlatArray = await getRootDescendants();\n  return json({ orgs, parentNode, orgFlatArray }, {\n    headers: {\n      'X-Frame-Options': 'SAMEORIGIN',\n      'Content-Security-Policy': 'frame-ancestors: none',\n    },\n  });\n};\n\nexport async function action({ request }: ActionFunctionArgs) {\n  return registerUserActionFn(request, '/login');\n}\n\nconst AccountRegister = () => {\n  const { orgs, parentNode, orgFlatArray } = useLoaderData<typeof loader>();\n\n  return (\n    <main className=\"container mx-auto h-full p-5\">\n      <div className=\"flex gap-x-4 flex-col items-center\">\n        <Link to=\"/login\" className=\"hover:underline underline-offset-2 border-0 border-zinc-300 rounded-lg px-3 py-2 hover:bg-zinc-200\">Back to Login</Link>\n      </div>\n      <h1 className=\"text-2xl text-gray-900\">\n        Register for an account\n      </h1>\n      <RegisterForm orgs={orgs} btnAction=\"create\" registerOrCreate=\"register\" orgParentNode={parentNode} orgFlatArray={orgFlatArray} />\n    </main>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default AccountRegister;\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { type LoaderFunctionArgs, redirect } from '@remix-run/node';\nimport { destroyDataSession, getDataSession } from '@services/cookie.server';\nimport { destroySession, getSession } from '@services/session.server';\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const headers = new Headers();\n  headers.append(\n    'Set-Cookie',\n    await destroyDataSession(\n      await getDataSession(request.headers.get('cookie'))\n    )\n  );\n  headers.append(\n    'Set-Cookie',\n    await destroySession(await getSession(request.headers.get('cookie')))\n  );\n  headers.append('Clear-Site-Data', '\"storage\", \"cookies\"');\n  headers.append('Cache-Control', 'no-store');\n\n  \n  headers.append('X-Frame-Options', 'SAMEORIGIN');\n  headers.append('Content-Security-Policy', 'frame-ancestors: none');\n\n  return redirect('/login', {\n    headers,\n  });\n};\nconst Signout = () => <h1>You have been signed out.</h1>;\n\nexport const ErrorBoundary = ErrorReport;\nexport default Signout;\n","import type { CategoryPermission } from '@lib/types';\nimport type { AttributeCategory, Operation } from '@lib/utils';\nimport { compareMaps, objectToMap, verifyAttributes } from '@lib/utils';\nimport { useCallback } from 'react';\n\n/**\n * Checks the user permissions for the required values\n * @param {string} userPermissionsString Provided from user object as a JSON parseable string that represents an array of arrays.\n * For example, '[['tasks', ['READ', 'WRITE']]]'\n * @param {CategoryPermission | CategoryPermission[]} requiredPermissionsObject\n * Example: 'chk:READ,WRITE'\n * @returns {boolean}\n */\nexport const permissionCallback = (\n  userPermissionsString: string,\n  requiredPermissionsObject: CategoryPermission | CategoryPermission[]\n): boolean => {\n  if (!userPermissionsString || !requiredPermissionsObject) return false;\n  // Convert strings to Map()s\n  const userPermissions = new Map<AttributeCategory, Operation[]>(\n    JSON.parse(userPermissionsString)\n  );\n\n  // object to map\n  const requiredPermissions = objectToMap(requiredPermissionsObject);\n\n  verifyAttributes(userPermissions);\n\n  return compareMaps(userPermissions, requiredPermissions);\n};\n\nconst UsePermissions = () => useCallback(permissionCallback, []);\n\nexport default UsePermissions;\n","import useGenerateSearchParams from '@lib/hooks/useGenerateSearchParams';\nimport usePermissions from '@lib/hooks/usePermissions';\nimport type { CategoryPermission, NavBarLink } from '@lib/types';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation } from '@remix-run/react';\n\ntype LinkWithPermissions = {\n  permissionRequired: CategoryPermission | CategoryPermission[];\n} & NavBarLink;\n\ntype RestrictedLinkProps = {\n  userPermissions: string;\n  link: LinkWithPermissions;\n} & MainNavLinkProps;\n\ntype MainNavLinkProps = {\n  link: NavBarLink;\n  isMenuShowing: boolean;\n  index: number;\n};\n\nfunction RestrictedLink({\n  userPermissions,\n  link,\n  isMenuShowing,\n  index,\n}: RestrictedLinkProps) {\n  const checkPermissions = usePermissions();\n\n  if (checkPermissions(userPermissions, link.permissionRequired))\n    return (\n      <MainNavLink link={link} isMenuShowing={isMenuShowing} index={index} />\n    );\n}\n\nfunction MainNavLink({ link, index, isMenuShowing }: MainNavLinkProps) {\n  function checkActive(pathname: string, link: NavBarLink) {\n    let isActive = false;\n    if (link.text === 'Home') {\n      isActive = pathname === '/' || pathname === '/profile';\n    } else {\n      if (pathname.includes(link.href)) isActive = true;\n      else if (link.activeText && link.activeText.length > 0) {\n        for (const str of link.activeText) {\n          if (pathname.includes(str)) isActive = true;\n        }\n      }\n    }\n\n    return isActive;\n  }\n\n  const { pathname } = useLocation();\n  const isActive = checkActive(pathname, link);\n  const searchParams = useGenerateSearchParams({keysToRemove: 'includeChildren'});\n\n  let mainNavLinkClass =\n    'flex items-center ';\n  if (link.text === 'Logout')\n    mainNavLinkClass += 'hover:bg-red-400/80';\n  else\n    mainNavLinkClass += 'hover:bg-slate-400 hover:text-black';\n  const mainNavLinkActive = 'bg-gray-200 text-black';\n  const mainMenuIconClasses = `h-[30px] w-[30px] ml-3 md:mr-6 my-3`;\n  return (\n    <li key={`${link.text}-${index}`} className={link.text === 'Logout' ? 'mt-28' : ''}>\n      <>\n        {link.href.startsWith('https://') ? (\n          <a\n            href={link.href}\n            target={link.href.startsWith('https://') ? '_blank' : '_self'}\n            className={`${mainNavLinkClass}${\n              isActive ? ` ${mainNavLinkActive}` : ''\n            }`}\n            rel=\"noreferrer\">\n            <link.icon className={mainMenuIconClasses} />\n            <span className={`${isMenuShowing ? 'block' : 'hidden'}`}>\n              {link.text}\n            </span>\n          </a>\n        ) : (\n          <Link\n            to={{\n              pathname: link.href,\n              search: searchParams,\n            }}\n            className={`${mainNavLinkClass}${\n              isActive ? ` ${mainNavLinkActive}` : ''\n            }`}>\n            <link.icon className={mainMenuIconClasses} />\n            <span className={`${isMenuShowing ? 'block' : 'hidden'}`}>\n              {link.text}\n            </span>\n          </Link>\n        )}\n      </>\n    </li>\n  );\n}\n\nfunction hasPermissionRequired(link: unknown): link is LinkWithPermissions {\n  return !!(link as LinkWithPermissions).permissionRequired;\n}\n\ntype MainNavBarProps = {\n  links: NavBarLink[];\n  userPermissions: string;\n};\n\nexport function useWindowSize() {\n  const [size, setSize] = useState<{\n    width: number | null;\n    height: number | null;\n  }>({\n    width: null,\n    height: null,\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setSize({\n        width: global.innerWidth,\n        height: global.innerHeight,\n      });\n    };\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n}\n\nconst MainNavBar = ({ links, userPermissions }: MainNavBarProps) => {\n  if (!userPermissions) return;\n\n  return (\n    // for fun :) style = {{ background: \"url(https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRpKqcxTIr8omvzr8-IkPHKlfNmQxp1SNTpfR2-f2781A&s)\" }}\n    <div\n      id=\"mainNav\"\n      className={`h-screen sticky top-0 flex-shrink-0 bg-slate-900 flex flex-col justify-between text-white py-4 w-[90px] focus:w-[280px] focus-within:w-[280px] hover:w-[280px] overflow-hidden transition-all`}>\n      <div className=\"h-[245px] px-2\">\n        <Link to=\"/\" className=\"flex flex-col items-center\">\n          <img\n            className={`w-40`}\n            alt=\"Virtual In-processing logo\"\n            src=\"/logo-light.png\"\n            width={60}\n            height={60}/>\n        </Link>\n      </div>\n      <ul className=\"ml-6 flex-grow w-[280px]\">\n        {links.map((link, index) => {\n          if (link.shouldShow !== undefined && !link.shouldShow) return null;\n          if (link.permissionRequired && hasPermissionRequired(link)) {\n            return (\n              <RestrictedLink\n                link={link}\n                userPermissions={userPermissions}\n                key={`link-${link.href}-${index}`}\n                isMenuShowing={true}\n                index={index}/>\n            );\n          }\n          return (\n            <MainNavLink\n              key={`link-${link.href}-${index}`}\n              link={link}\n              isMenuShowing={true}\n              index={index}/>\n          );\n        })}\n      </ul>\n      <div className={`m-3 text-sm`}>\n        <a href=\"https://travisspark.com\">\n          <img\n            className={`mx-auto pb-2`}\n            alt=\"Travis Air Force Base Phoenix Spark Innovation Lab Logo\"\n            src=\"/phoenix.png\"\n            width={60}\n            height={60}/>\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default MainNavBar;\n","import { Models } from '@lib/models.server';\n\nexport async function completeItem(itemId: string,userId: string,completedById: string,) {\n  await Models.checklistItem.markComplete(itemId, userId, completedById);\n}\n\nexport async function pauseChecklist(itemId: string,userId: string) {\n  await Models.checklist.pause(itemId, userId);\n}\n\nexport async function resumeChecklist(itemId: string,userId: string) {\n  await Models.checklist.resume(itemId, userId);\n}\n\nexport async function archiveChecklist(itemId: string,userId: string) {\n  await Models.checklist.archive(itemId, userId);\n}\n\nexport async function getChecklistItem(\n  itemId: string,\n  options?: { internalOnly: boolean },\n) {\n  return Models.checklistItem.getWithComments(itemId, options);\n}\n\nexport async function uncompleteItem(\n  itemId: string,\n  userId: string,\n  updatedById?: string,\n) {\n  await Models.checklistItem.markIncomplete(itemId, userId, updatedById);\n}\n\n\nexport async function denyTask(\n  itemId: string, \n  postedById: string, \n  message: string\n): Promise<void> {\n  await Models.checklistItem.denyTaskWithMessage(itemId, postedById, message);\n}\n\nexport async function getTask(taskId: string){\n  return Models.checklistItem.getTaskFromId(taskId);\n}\n\nexport async function getRoles(\n  orgId: string,\n  userRoles?: Array<string>,\n): Promise<Map<string, { name: string; id: string; description: string }>> {\n  // Get the roles for the orgId and its sub-organizations\n  const roles = await Models.orgRole.getChildOrgRoles(orgId, userRoles);\n\n  // Map to store an easier to use object with all the checklists and roles\n  let rolesMap = new Map<\n    string,\n    { name: string; id: string; description: string }\n  >();\n\n  /**\n   * For each role find the checklist items that have a required role that matches\n   * and add them to the Map\n   */\n  for (const orgRole of roles) {\n    rolesMap.set(orgRole.role.abbreviation, {\n      name: orgRole.role.name,\n      id: orgRole.uuid,\n      description: orgRole.role.description,\n    });\n  }\n\n  return rolesMap;\n}\n\nexport async function getItemCountByUserRole(userId: string, orgId: string) {\n  return Models.orgRole.getItemCountByRole(userId, orgId);\n}\n\nexport async function getItemCountForAllRoles(orgId: string) {\n  return Models.orgRole.getItemCountForAllRoles(orgId);\n}\n\nexport function hasCSSRole(userRoles: { abbreviation: string }[]) {\n  return userRoles.findIndex((role) => role.abbreviation === 'CSS') > -1;\n}\n\nexport async function getChecklistItemsByRole(roleId: string, orgId: string, userId: string) {\n  return Models.orgRole.getChecklistItems(roleId, orgId, userId);\n}\n","import {\n  type UserContextValue,\n} from '@components/providers/User';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport MainNavBar from '@components/ui/MainNavBar';\nimport { FolderOpenIcon } from '@heroicons/react/20/solid';\nimport {\n  BuildingLibraryIcon,\n  ClipboardDocumentCheckIcon,\n  InboxStackIcon,\n  PresentationChartLineIcon,\n  UserIcon,\n  UserCircleIcon,\n  ArrowLeftStartOnRectangleIcon,\n} from '@heroicons/react/24/solid';\nimport type { NavBarLink } from '@lib/types';\nimport { Attribute, RolePermissions } from '@lib/utils';\nimport type { LoaderFunctionArgs } from '@remix-run/node';\nimport { json, redirect } from '@remix-run/node';\nimport { Outlet, useLoaderData, useLocation } from '@remix-run/react';\nimport {\n  getRoles,\n  hasCSSRole,\n} from '@routes/_withNav+/_withSideBar+/.server/tasks.queries';\nimport { requireUserAsObject } from '@services/user.server';\nimport { useEffect } from 'react';\nimport { Slide, toast as notify, ToastContainer } from 'react-toastify';\nimport { getToast } from 'remix-toast';\nimport { AuthorizationError } from 'remix-auth';\nimport { isSuperAdmin } from '@lib/utils/utils.server';\nimport { getRootTree, getRootDescendants, getRootNode } from './_withSideBar+/_manage+/.server/manage.queries';\nimport { getOrgBeingViewed, getOrgDescendants } from './_withSideBar+/_manage+/.server/org.queries';\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  try {\n    const {\n      currentOrg: org,\n      roles,\n      permissions,\n      ...user\n    } = await requireUserAsObject(request);\n\n    let parentNode, orgFlatArray;\n\n    if (isSuperAdmin(roles)) {\n      parentNode = await getRootTree();\n      orgFlatArray = await getRootDescendants();\n    } else {\n      if (org) {\n        parentNode = await getRootNode(org.uuid);\n        orgFlatArray = await getOrgDescendants(org.uuid);\n      }\n    }\n\n    const UserContextData: UserContextValue = {\n      org,\n      permissions,\n      roles,\n      user: {\n        name: user.name,\n        image: user.image,\n        rank: user.rank,\n        id: user.id,\n        primaryEmail: user.workEmail,\n      },\n    };\n\n    let orgRoles:\n      | Map<string, { id: string; name: string; description: string }>\n      | undefined;\n\n    if (hasCSSRole(roles)) {\n      orgRoles = await getRoles(org.uuid);\n    } else {\n      orgRoles = await getRoles(\n        org.uuid,\n        roles.map((role) => role.abbreviation)\n      );\n    }\n\n    const { toast, headers } = await getToast(request);\n    // TODO: start using useMatches hook where possible to use this data here instead of grabbing the session in EVERY route.\n    return json(\n      { orgRoles: Array.from(orgRoles), toast, parentNode, orgFlatArray, ...UserContextData },\n      {\n        headers: {\n          ...headers,\n          'X-Frame-Options': 'SAMEORIGIN',\n        },\n      }\n    );\n  } catch (e) {\n    if (e instanceof AuthorizationError) return redirect('/signout');\n    else throw e;\n  }\n};\n\nfunction filterRoles(\n  roles: {\n    id: string;\n    name: string;\n    description: string;\n    abbreviation: string;\n    owningOrgId: string;\n    roleId: string;\n  }[]\n) {\n  const filteredRoles = roles.filter(\n    (orgRole) =>\n      orgRole.abbreviation !== 'ADMIN' && orgRole.abbreviation !== 'SUPERADMIN'\n  );\n\n  const hasRoles = filteredRoles && filteredRoles.length > 0;\n  return { filteredRoles, hasRoles };\n}\n\nexport const profileMenuLinks = [\n  /* Menu items go here */\n  { name: 'Profile', href: '/profile' },\n  { name: 'Sign out', href: '/signout' },\n];\n\nconst DefaultLayoutWithNavbar = () => {\n  const { toast, ...data } = useLoaderData<typeof loader>();\n\n  useEffect(() => {\n    if (toast) notify(toast.message, { type: toast.type });\n  }, [toast]);\n\n  if (!data) throw new Error('Missing data');\n\n  const { user, org, roles, permissions } = data;\n\n  const { filteredRoles, hasRoles } = filterRoles(roles);\n\n  const orgRoleHref = hasRoles ? `/tasks/${filteredRoles[0]?.roleId}` : '/tasks';\n\n  const links: NavBarLink[] = [\n    {\n      href: `/checklist`,\n      text: 'Your Checklist',\n      icon: ClipboardDocumentCheckIcon,\n    },\n    {\n      href: orgRoleHref,\n      text: 'Task Signing',\n      permissionRequired: RolePermissions.APPROVER,\n      icon: InboxStackIcon,\n      hasSideNav: true,\n      activeText: ['tasks'],\n      shouldShow: hasRoles,\n    },\n    {\n      href: `/metrics`,\n      text: 'Metrics Dashboard',\n      permissionRequired: Attribute.METRICS_READ,\n      icon: PresentationChartLineIcon,\n    },\n    {\n      href: `/user`,\n      text: 'Administration',\n      permissionRequired: [Attribute.ORGS_READ, Attribute.TEMPLATES_READ],\n      icon: BuildingLibraryIcon,\n      activeText: ['org', 'user', 'template', 'role', 'base', 'onboard'],\n      hasSideNav: true,\n    },\n    {\n      href: `/profile`,\n      text: 'Profile',\n      icon: UserCircleIcon,\n    },\n    {\n      href: '/signout',\n      text: 'Logout',\n      icon: ArrowLeftStartOnRectangleIcon,\n    },\n    {\n      href: 'https://travisspark.atlassian.net/servicedesk/customer/portal/4',\n      text: 'Feedback',\n      icon: FolderOpenIcon,\n    },\n  ];\n\n  const location = useLocation();\n  let width = 'grid-cols-[auto_300px_1fr]';\n\n  if (location.pathname.includes('checklist') || location.pathname.includes('metrics') || location.pathname.includes('profile')) {\n    width = 'grid-cols-[auto_1fr]';\n  }\n  return (\n    // <UserProvider value={{ user, org, roles, permissions }}>\n    <div className={`grid ${width}`}>\n      <MainNavBar links={links} userPermissions={permissions} />\n      <Outlet />\n      <ToastContainer\n        transition={Slide}\n        position=\"top-center\"\n        autoClose={1000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss={false}\n        draggable\n        pauseOnHover\n        theme=\"light\"\n        limit={3}/>\n    </div>\n    // </UserProvider>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default DefaultLayoutWithNavbar;\n","import TopBar from '@components/ui/TopBar';\nimport { useLocation } from '@remix-run/react';\n\nexport default function ContainerLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const location = useLocation();\n\n  let width = 'w-[calc(100vw_-_600px)]';\n\n  if (location.pathname.includes('checklist') || location.pathname.includes('metrics')) {\n    width = 'w-full';\n  }\n\n  return (\n    <main id=\"content\" className={'px-6 pt-5 pb-20'}>\n      {children}\n    </main>\n  );\n}\n","import ContainerLayout from '@components/ui/Container';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { Outlet } from '@remix-run/react';\n\nconst NoSideBarLayout = () => {\n  return (\n    <>\n      <ContainerLayout >\n        <Outlet />\n      </ContainerLayout>\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default NoSideBarLayout;\n","import type { GetUserChecklistsResponse } from '@repositories/checklist.server';\nimport { useState } from 'react';\n\nexport function CompleteChecklists( {\n  checklists,\n}: {\n  checklists: GetUserChecklistsResponse;\n} ) {\n  const [ expandedChecklistId, setExpandedChecklistId ] = useState<string | null>(\n    null\n  );\n  const toggleDropdown = ( checklistId: string ) => {\n    setExpandedChecklistId(\n      expandedChecklistId === checklistId ? null : checklistId\n    );\n  };\n\n  const filtered = checklists.filter( ( c ) => c.isComplete );\n\n  if ( filtered.length > 0 ) {\n    return (\n      <div className=\"mb-20\">\n        <span className=\"text-xl rounded-lg\">Completed Checklists</span>\n        <div className=\"overflow-x-auto pb-6 pt-4\">\n          <div className=\"grid grid-cols-3 text-left align-middle bg-gray-200\">\n            <p className=\"px-4 py-2 text-left font-bold\">Checklist Name</p>\n            <p className=\"px-4 py-2 text-left font-bold\">Date Assigned</p>\n            <p className=\"px-4 py-2 text-left font-bold\">Date Completed</p>\n          </div>\n          {/* TODO: Instead of loading every complete checklist the member has ever done we could use either another page or eager load it once they click the expand button. */ }\n          { filtered.map( ( checklist ) => (\n            <div key={ checklist.id } className=\"bg-gray-100\">\n              <button\n                className=\"grid grid-cols-3 text-left w-full\"\n                onClick={ () => toggleDropdown( checklist.id ) }>\n                <p className=\"px-4 py-2\">{ checklist.name }</p>\n                <p className=\"px-4 py-2\">\n                  { new Date( checklist.createdAt ).toLocaleString() }\n                </p>\n                <p className=\"px-4 py-2\">\n                  { new Date( checklist.dateCompleted ).toLocaleString() }\n                </p>\n              </button>\n\n              { expandedChecklistId === checklist.id && (\n                <div className=\"bg-gray-200 p-4\">\n                  { checklist.items.map( ( item ) => (\n                    <div\n                      key={ item.id }\n                      className=\"grid grid-cols-3 py-1 odd:bg-zinc-300 first:rounded-t-lg px-3 last:rounded-b-lg\">\n                      <p>Task Item: { item.reference.name ?? item.name }</p>\n                      <p className=\"ml-3\">\n                        Completed On:{ ' ' }\n                        { new Date( checklist.dateCompleted ).toLocaleString() }\n                      </p>\n                      <p className=\"ml-6\">Approved By: { item.role.name }</p>\n                    </div>\n                  ) ) }\n                </div>\n              ) }\n            </div>\n          ) ) }\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex border-b border-1 border-neutral-200 py-5 gap-5 justify-between mb-10\">\n      <h2 className=\"text-xl\">No Completed Checklists.</h2>\n    </div>\n  );\n}\n","import React, { forwardRef } from 'react';\n\nexport type BadgeProps = {\n  variant?: 'red' | 'green' | 'primary' | 'warning' | 'danger' | 'none';\n} & React.HTMLAttributes<HTMLSpanElement>;\n\nexport const Badge = forwardRef<HTMLSpanElement, BadgeProps>(\n  function BadgeComponent({ variant = 'primary', ...props }, ref) {\n    const pillClasses = [\n      'inline-flex',\n      'items-center',\n      'rounded-full',\n      'px-2',\n      'py-0.5',\n      'text-sm',\n      'font-semibold',\n      'text-nowrap',\n    ];\n\n    switch (variant) {\n      case 'none':\n        pillClasses.push('bg-zinc-100 text-zinc-700 ring-1 ring-zinc-400');\n        break;\n      case 'primary':\n        pillClasses.push('bg-primary-100 text-primary-700 ring-1 ring-primary-400');\n        break;\n      case 'green':\n        pillClasses.push('bg-green-50 text-green-800 ring-1 ring-green-300');\n        break;\n      case 'warning':\n        pillClasses.push('bg-yellow-50 text-yellow-700 ring-1 ring-yellow-400');\n        break;\n      case 'danger':\n      case 'red':\n        pillClasses.push('bg-red-50 text-red-800 ring-1 ring-red-300');\n        break;\n    }\n\n    return (\n      <span\n        ref={ref}\n        className={`${pillClasses.join(' ')}${props.className ? ` ${props.className}` : ''}`}>\n        {props.children}\n      </span>\n    );\n  }\n);\n","export function SolidCheckmark( {className, title} ) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={24}\n      height={24}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      className={className}>\n      {title ? <title>{title}</title> : null}\n      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M18.333 2c1.96 0 3.56 1.537 3.662 3.472l.005 .195v12.666c0 1.96 -1.537 3.56 -3.472 3.662l-.195 .005h-12.666a3.667 3.667 0 0 1 -3.662 -3.472l-.005 -.195v-12.666c0 -1.96 1.537 -3.56 3.472 -3.662l.195 -.005h12.666zm-2.626 7.293a1 1 0 0 0 -1.414 0l-3.293 3.292l-1.293 -1.292l-.094 -.083a1 1 0 0 0 -1.32 1.497l2 2l.094 .083a1 1 0 0 0 1.32 -.083l4 -4l.083 -.094a1 1 0 0 0 -.083 -1.32z\" />\n    </svg>\n  );\n}\n\nexport function CalendarCheckmark({ className }) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={className}>\n      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M10.5 21h-4.5a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v3\" />\n      <path d=\"M16 3v4\" />\n      <path d=\"M8 3v4\" />\n      <path d=\"M4 11h10\" />\n      <path d=\"M18 18m-4 0a4 4 0 1 0 8 0a4 4 0 1 0 -8 0\" />\n      <path d=\"M18 16.5v1.5l.5 .5\" />\n    </svg>\n  );\n}\n\nexport function StartTimer({ className, title }) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={24}\n      height={24}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      className={className}>\n      {title ? <title>{title}</title> : null}\n      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path\n        d=\"M11.5203 0.051814C11.7453 0.190813 11.9145 0.353312 12 0.60937C12.0222 0.827737 12.0177 1.0435 12.0117 1.26269C12.0109 1.32157 12.01 1.38046 12.0092 1.44113C12.007 1.58579 12.0039 1.73037 12 1.875C12.0279 1.87778 12.0559 1.88057 12.0847 1.88344C14.9864 2.18342 17.7006 3.53198 19.582 5.78906C19.6492 5.87437 19.7156 5.96036 19.7812 6.04687C19.8015 6.07344 19.8218 6.10001 19.8427 6.12739C21.2342 7.95844 22.1167 10.1821 22.1396 12.498C22.141 12.5442 22.1424 12.5904 22.1438 12.6379C22.1468 12.9889 22.0863 13.2393 21.85 13.5044C21.5374 13.7233 21.2327 13.7517 20.8594 13.6875C20.5549 13.5646 20.3777 13.376 20.25 13.0781C20.2031 12.8604 20.1905 12.6415 20.1752 12.4198C20.0891 11.2007 19.8026 10.0527 19.2656 8.95312C19.2495 8.91972 19.2334 8.88632 19.2168 8.85191C18.5857 7.55922 17.615 6.42373 16.4531 5.57812C16.4267 5.55875 16.4003 5.53939 16.3731 5.51943C15.2432 4.70162 13.9716 4.20206 12.6094 3.9375C12.5274 3.921 12.5274 3.921 12.4438 3.90417C10.4896 3.55664 8.43442 3.99089 6.70312 4.92187C6.67542 4.93641 6.64773 4.95095 6.61919 4.96593C5.99841 5.29301 5.43957 5.7121 4.92663 6.18988C4.83847 6.27165 4.74814 6.3485 4.65527 6.4248C4.47417 6.57991 4.32371 6.75408 4.17187 6.9375C4.15174 6.96123 4.13161 6.98497 4.11087 7.00943C2.9853 8.33994 2.28634 9.95405 2.01562 11.6719C2.00756 11.7209 1.9995 11.7699 1.99119 11.8203C1.96643 12.0186 1.96031 12.2114 1.95922 12.4109C1.95882 12.4694 1.95882 12.4694 1.95841 12.5292C1.95797 12.6118 1.95767 12.6943 1.95748 12.7769C1.95704 12.9 1.95558 13.0231 1.9541 13.1462C1.94969 13.8473 2.02726 14.5338 2.21484 15.2109C2.22464 15.247 2.23444 15.2831 2.24454 15.3202C2.43879 16.0129 2.70654 16.664 3.04687 17.2969C3.06141 17.3246 3.07595 17.3523 3.09093 17.3808C3.4188 18.0031 3.83906 18.5624 4.31799 19.0765C4.39146 19.1559 4.45944 19.2364 4.52636 19.3213C4.67549 19.4933 4.8417 19.6349 5.01562 19.7812C5.07725 19.835 5.07725 19.835 5.14013 19.8898C6.91158 21.4113 9.25902 22.1806 11.5884 22.0706C11.8656 22.062 12.114 22.1186 12.3292 22.2977C12.3501 22.3248 12.371 22.3519 12.3926 22.3799C12.4142 22.4069 12.4358 22.4339 12.4581 22.4617C12.6492 22.7446 12.6353 23.0088 12.6094 23.3437C12.5307 23.5984 12.3579 23.759 12.1406 23.9062C11.9368 24.009 11.7451 24.0143 11.5214 24.0141C11.4654 24.0145 11.4654 24.0145 11.4082 24.0149C11.2871 24.0155 11.166 24.0152 11.0449 24.0146C11.0036 24.0145 10.9622 24.0144 10.9196 24.0143C10.2709 24.0118 9.6379 23.987 9 23.8594C8.92999 23.8454 8.92999 23.8454 8.85857 23.8311C6.33168 23.3084 3.91663 21.9008 2.34375 19.8281C2.32347 19.8015 2.30319 19.775 2.28229 19.7476C1.26019 18.4027 0.541874 16.8885 0.187496 15.2344C0.177639 15.1891 0.167782 15.1439 0.157627 15.0973C-0.138137 13.6711 -0.124143 12.0622 0.187496 10.6406C0.197791 10.5936 0.208086 10.5467 0.218693 10.4983C0.77532 8.04762 2.17269 5.7606 4.17187 4.21875C4.19747 4.19894 4.22307 4.17914 4.24944 4.15873C5.96301 2.84193 7.97083 2.05723 10.125 1.875C10.1235 1.83886 10.122 1.80273 10.1205 1.76551C10.1146 1.59987 10.111 1.43425 10.1074 1.26855C10.1051 1.21172 10.1027 1.15489 10.1003 1.09634C10.0941 0.715366 10.144 0.47151 10.4062 0.187495C10.7097 -0.071674 11.1523 -0.095264 11.5203 0.051814Z\"\n        fill=\"currentColor\"/>\n      <path\n        d=\"M15.8145 12.7295C15.8634 12.7279 15.8634 12.7279 15.9132 12.7263C16.4362 12.7286 16.8696 13.0327 17.3027 13.2949C17.3596 13.329 17.4166 13.3631 17.4735 13.3972C17.7876 13.5856 18.1 13.7767 18.4097 13.9723C18.7123 14.1633 19.0182 14.3487 19.3242 14.5342C19.3523 14.5512 19.3803 14.5682 19.4093 14.5857C19.5537 14.6733 19.6981 14.7608 19.8425 14.8482C20.0104 14.9499 20.1782 15.0518 20.346 15.1536C20.3729 15.17 20.3999 15.1864 20.4276 15.2032C20.5633 15.2856 20.699 15.368 20.8347 15.4505C21.1144 15.6204 21.3942 15.79 21.6744 15.9591C21.949 16.1249 22.2232 16.2915 22.4969 16.4589C22.5876 16.5144 22.6783 16.5698 22.7692 16.6249C23.7691 17.2342 23.7691 17.2342 23.9707 17.8094C24.0831 18.361 24.0492 18.9003 23.7407 19.3764C23.4266 19.78 22.9699 20.013 22.5357 20.2677C22.3756 20.3618 22.2165 20.4576 22.0574 20.5534C21.9419 20.623 21.8261 20.6922 21.7103 20.7614C21.3143 20.9984 20.9206 21.2393 20.5266 21.4796C20.3066 21.6138 20.0864 21.7478 19.8662 21.8818C19.8004 21.9219 19.8004 21.9219 19.7333 21.9628C19.4859 22.1133 19.2384 22.2638 18.9908 22.4141C18.9634 22.4308 18.936 22.4474 18.9077 22.4646C18.7683 22.5492 18.6289 22.6338 18.4894 22.7184C18.2244 22.8792 17.9595 23.0403 17.6951 23.2022C17.6471 23.2316 17.5991 23.261 17.5497 23.2912C17.461 23.3455 17.3723 23.3999 17.2838 23.4544C16.6496 23.8422 16.1776 24.0813 15.4219 24C14.939 23.8728 14.6369 23.6393 14.3622 23.23C14.2057 22.9411 14.1352 22.6892 14.1381 22.3614C14.1378 22.3259 14.1376 22.2903 14.1373 22.2536C14.1367 22.1353 14.137 22.0171 14.1373 21.8989C14.137 21.8137 14.1367 21.7285 14.1363 21.6433C14.1355 21.4126 14.1356 21.1819 14.1358 20.9512C14.136 20.7583 14.1357 20.5654 14.1354 20.3725C14.1347 19.9173 14.1348 19.462 14.1353 19.0068C14.1359 18.5378 14.1352 18.0689 14.134 17.5999C14.1329 17.1967 14.1326 16.7934 14.1329 16.3901C14.1331 16.1495 14.1329 15.909 14.1321 15.6684C14.1314 15.4421 14.1316 15.2158 14.1325 14.9895C14.1326 14.9067 14.1325 14.8239 14.132 14.7411C14.1287 14.1387 14.1863 13.6242 14.625 13.1719C14.9959 12.8685 15.3379 12.739 15.8145 12.7295ZM16.0313 14.8125C16.0313 17.1638 16.0313 19.515 16.0313 21.9375C16.4441 21.7016 16.8524 21.4646 17.2559 21.2139C17.3625 21.1479 17.4692 21.082 17.5759 21.0161C17.6031 20.9993 17.6302 20.9826 17.6582 20.9653C17.9568 20.781 18.2566 20.5989 18.5566 20.417C18.5838 20.4005 18.611 20.384 18.639 20.3671C18.777 20.2834 18.9151 20.1997 19.0532 20.116C19.2179 20.0162 19.3826 19.9162 19.5472 19.8162C19.5744 19.7998 19.6015 19.7833 19.6294 19.7664C19.765 19.684 19.9006 19.6016 20.0362 19.5191C20.2939 19.3623 20.552 19.2061 20.811 19.0513C20.9343 18.9776 21.0574 18.9037 21.1805 18.8298C21.2396 18.7943 21.2987 18.7591 21.358 18.7239C21.4398 18.6753 21.5213 18.6264 21.6028 18.5773C21.6494 18.5495 21.6961 18.5217 21.7441 18.493C21.7934 18.4578 21.7934 18.4578 21.8438 18.4219C21.8438 18.3909 21.8438 18.36 21.8438 18.3281C21.7759 18.2744 21.7759 18.2744 21.6848 18.2239C21.6493 18.203 21.6138 18.182 21.5772 18.1604C21.5375 18.1375 21.4979 18.1145 21.457 18.0908C21.3706 18.0399 21.2843 17.9889 21.1979 17.9379C21.151 17.9103 21.1041 17.8827 21.0557 17.8542C20.8168 17.7126 20.5797 17.5683 20.3425 17.424C20.2582 17.3727 20.1738 17.3214 20.0893 17.2701C19.6083 16.9778 19.1274 16.6851 18.6466 16.3923C18.5134 16.3112 18.3802 16.2301 18.247 16.149C18.2023 16.1218 18.1577 16.0946 18.1117 16.0666C18.0222 16.0122 17.9328 15.9578 17.8434 15.9033C17.6094 15.7609 17.3754 15.6184 17.1416 15.4757C17.0931 15.4461 17.0445 15.4165 16.9945 15.386C16.9019 15.3295 16.8093 15.273 16.7167 15.2164C16.6747 15.1908 16.6327 15.1652 16.5894 15.1388C16.5528 15.1165 16.5162 15.0941 16.4785 15.0711C16.3306 14.9828 16.1808 14.8979 16.0313 14.8125Z\"\n        fill=\"currentColor\"/>\n      <path\n        d=\"M15.4578 7.17683C15.6775 7.31254 15.8691 7.47793 15.9375 7.73439C15.978 8.03196 16.0017 8.33375 15.835 8.59572C15.777 8.6693 15.7171 8.74135 15.6563 8.81252C15.6118 8.86774 15.5675 8.92312 15.5233 8.97859C15.3934 9.14098 15.2616 9.30176 15.1294 9.46224C14.9947 9.62594 14.8611 9.79053 14.7275 9.95509C14.7018 9.98673 14.6761 10.0184 14.6496 10.051C14.4866 10.2516 14.3247 10.4531 14.1636 10.6553C14.0291 10.8229 13.8934 10.9896 13.7578 11.1563C13.5299 11.4364 13.3032 11.7175 13.0781 12C13.0429 12.0371 13.0077 12.0741 12.9714 12.1123C12.8766 12.2282 12.8766 12.2282 12.9014 12.3642C12.9133 12.4142 12.9252 12.4642 12.9375 12.5156C12.9896 13.1521 12.94 13.6948 12.5144 14.2C12.1332 14.5993 11.7278 14.8126 11.1734 14.8346C10.5867 14.8418 10.1357 14.7098 9.70313 14.2969C9.29023 13.8644 9.15818 13.4133 9.16544 12.8267C9.18739 12.2723 9.40071 11.8668 9.79999 11.4857C10.1651 11.178 10.5083 11.055 10.9834 11.0772C11.2273 11.0668 11.3418 11.038 11.5131 10.8622C11.659 10.6923 11.7902 10.5122 11.9197 10.3297C12.0464 10.1547 12.1846 9.9896 12.3223 9.82326C12.373 9.76089 12.4237 9.69845 12.4743 9.63594C12.4976 9.60707 12.521 9.57819 12.5451 9.54844C12.6584 9.40807 12.7708 9.26704 12.8833 9.12599C13.0178 8.95837 13.1534 8.79171 13.2891 8.62502C13.4587 8.41655 13.6281 8.20795 13.7959 7.99806C13.8247 7.96229 13.8534 7.92652 13.8831 7.88966C13.9442 7.81236 14.0041 7.73412 14.0632 7.65529C14.4252 7.18003 14.8395 6.92969 15.4578 7.17683Z\"\n        fill=\"currentColor\"/>\n      <path\n        d=\"M4.45312 0.656253C4.69558 0.751467 4.91967 0.920221 5.03448 1.16053C5.11105 1.4478 5.11866 1.7572 5.02221 2.03998C4.8508 2.3336 4.56656 2.52665 4.29913 2.72718C4.13396 2.8511 3.97667 2.98241 3.82031 3.11719C3.58702 3.31713 3.34807 3.5082 3.10537 3.69655C2.88415 3.86905 2.66964 4.04854 2.458 4.23267C2.06071 4.57513 1.7853 4.67656 1.26562 4.64063C0.992066 4.55805 0.821405 4.35068 0.656244 4.125C0.567152 3.85773 0.560575 3.54102 0.640314 3.26972C0.819456 2.94208 1.16546 2.71336 1.45312 2.48438C1.51539 2.43416 1.51539 2.43416 1.57891 2.38294C1.65496 2.32185 1.73119 2.261 1.80761 2.20038C1.92661 2.1056 2.04446 2.00955 2.1621 1.91309C2.20476 1.87816 2.24742 1.84324 2.29138 1.80725C2.36937 1.74338 2.4473 1.67944 2.52516 1.6154C3.78323 0.58126 3.78323 0.58126 4.45312 0.656253Z\"\n        fill=\"currentColor\"/>\n      <path d=\"M18.4898 0.701487C18.6012 0.772495 18.6972 0.850727 18.7969 0.93751C18.8677 0.996243 18.8677 0.996243 18.9399 1.05616C19.0453 1.14393 19.1497 1.23267 19.2535 1.32221C19.3886 1.43848 19.5257 1.55176 19.6641 1.66407C19.8797 1.83958 20.0921 2.01855 20.3039 2.19859C20.4701 2.33957 20.6377 2.47854 20.8066 2.61622C20.8481 2.65018 20.8895 2.68414 20.9323 2.71913C21.0033 2.77704 21.0748 2.83451 21.1469 2.89125C21.3249 3.03502 21.4461 3.15005 21.5156 3.37501C21.5728 4.00597 21.5728 4.00597 21.375 4.26564C21.1218 4.51832 20.9531 4.64683 20.5869 4.65235C20.5392 4.65356 20.4916 4.65477 20.4424 4.65602C20.11 4.62089 19.8835 4.40297 19.6377 4.19532C19.6027 4.16616 19.5678 4.13699 19.5317 4.10694C19.4271 4.01953 19.3229 3.93173 19.2188 3.84376C19.1752 3.807 19.1752 3.807 19.1307 3.76949C19.0277 3.68241 18.9247 3.59525 18.8219 3.50785C18.6665 3.37586 18.5097 3.2459 18.3516 3.1172C18.1569 2.95852 17.9636 2.7984 17.7715 2.63673C17.7464 2.61573 17.7213 2.59473 17.6954 2.5731C17.1002 2.07051 17.1002 2.07051 17.0627 1.64576C17.0621 1.32956 17.1749 1.07281 17.3906 0.84376C17.6924 0.593358 18.1244 0.557552 18.4898 0.701487Z\" />\n    </svg>\n  );\n}\n\nexport function DatabaseUpdatedIcon({className, title}) {\n  return (\n\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={ 24 }\n      height={ 24 }\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={ 2 }\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={className}>\n      {title ? <title>{title}</title> : null}\n      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\n      <path d=\"M4 6c0 1.657 3.582 3 8 3s8 -1.343 8 -3s-3.582 -3 -8 -3s-8 1.343 -8 3\"/>\n      <path d=\"M4 6v6c0 1.657 3.582 3 8 3c.856 0 1.68 -.05 2.454 -.144m5.546 -2.856v-6\"/>\n      <path d=\"M4 12v6c0 1.657 3.582 3 8 3c.171 0 .341 -.002 .51 -.006\"/>\n      <path d=\"M19 22v-6\"/>\n      <path d=\"M22 19l-3 -3l-3 3\"/>\n    </svg>\n  );\n}\n\nexport function XMarkIcon({className, ...props}) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth=\"2.5\"\n      stroke=\"currentColor\"\n      className=\"w-10 h-10 hover:cursor-pointer\">\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M6 18 18 6M6 6l12 12\"/>\n    </svg>\n  );\n}\n","import { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/24/outline';\nimport { useState, useMemo, useEffect } from 'react';\nimport { useSearchParams } from '@remix-run/react';\n\nexport function usePagination(items: any[], initialPerPage: number) {\n  const [currentItems, setCurrentItems] = useState<any[]>([]);\n  const [currentParams, setSearchParams] = useSearchParams();\n  const pageParam = currentParams.get('page');\n  let page = 1;\n  if (pageParam) {\n    page = Number.parseInt(pageParam);\n  }\n  const [currentPage, setCurrentPage] = useState<number>(page);\n  const itemParam = currentParams.get('items');\n  let itemsToShow = initialPerPage;\n  if (itemParam) {\n    itemsToShow = Number.parseInt(itemParam);\n  }\n  const [itemsPerPage, setItemsPerPage] = useState<number>(itemsToShow);\n\n  function setPageParam(page: number) {\n    setSearchParams((prev) => {\n      prev.set('page', String(page));\n      return prev;\n    });\n  }\n\n  function setItemParam(toShow: number) {\n    setSearchParams((prev) => {\n      prev.set('items', String(toShow));\n      return prev;\n    });\n  }\n\n  useEffect(() => {\n    if (pageParam) setCurrentPage(Number.parseInt(pageParam));\n    else setCurrentPage(1);\n  }, [pageParam]);\n\n  useEffect(() => {\n    if (itemParam) {\n      setItemsPerPage(Number.parseInt(itemParam));\n      setPageParam(1);\n    } else setItemsPerPage(initialPerPage);\n  }, [itemParam, initialPerPage]);\n\n  const totalItemsLength = items.length;\n\n  // Memoize derived values to avoid unnecessary recalculations\n  const totalPages = useMemo(\n    () => Math.ceil(totalItemsLength / itemsPerPage),\n    [totalItemsLength, itemsPerPage]\n  );\n  const indexOfLastItem = useMemo(\n    () => currentPage * itemsPerPage,\n    [currentPage, itemsPerPage]\n  );\n  const indexOfFirstItem = useMemo(\n    () => indexOfLastItem - itemsPerPage,\n    [indexOfLastItem, itemsPerPage]\n  );\n\n  useEffect( () => {\n    if (items && items.length > 0) {\n      setCurrentItems(items.slice(indexOfFirstItem, indexOfLastItem));\n    } else {\n      setCurrentItems([]);\n    }\n  }, [indexOfFirstItem, indexOfLastItem, items] );\n\n  return {\n    currentItems,\n    currentPage,\n    totalPages,\n    itemsPerPage,\n    setItemsPerPage: setItemParam,\n    itemPos: {\n      length: totalItemsLength,\n      first: indexOfFirstItem + 1,\n      last:\n        totalItemsLength > itemsPerPage\n          ? indexOfFirstItem + itemsPerPage\n          : totalItemsLength,\n    },\n    setCurrentPage: setPageParam,\n    nextPage: () => setPageParam(Math.min(currentPage + 1, totalPages)),\n    prevPage: () => setPageParam(Math.max(currentPage - 1, 1)),\n  };\n}\n\ninterface PaginationProps {\n  currentPage: number;\n  totalPages: number;\n  setCurrentPage: (page: number) => void;\n  setItemsPerPage: (page: number) => void;\n  itemsPerPage: number;\n  nextPage: () => void;\n  prevPage: () => void;\n  itemPos: {\n    first: number;\n    last: number;\n    length: number;\n  };\n}\n\nexport function Pagination({\n  currentPage,\n  totalPages,\n  setCurrentPage,\n  nextPage,\n  prevPage,\n  itemPos,\n  setItemsPerPage,\n  itemsPerPage,\n}: PaginationProps) {\n  const pages = useMemo(() => {\n    let pageNumbers: Array<string | number> = [];\n\n    if (totalPages < 10) {\n      pageNumbers = Array.from({ length: totalPages }, (_, i) => i + 1);\n    } else {\n      if (currentPage < 6) {\n        pageNumbers = Array.from<unknown, string | number>(\n          { length: 7 },\n          (_, i) => i + 1\n        ).concat(['...'], [totalPages]);\n      } else if (currentPage >= 6 && currentPage <= totalPages - 5) {\n        pageNumbers = [1, '...'].concat(\n          Array.from({ length: 5 }, (_, i) => currentPage - 2 + i),\n          ['...'],\n          [totalPages]\n        );\n      } else {\n        pageNumbers = [1, '...'].concat(\n          Array.from({ length: 6 }, (_, i) => totalPages - 6 + i),\n          totalPages\n        );\n      }\n    }\n\n    return pageNumbers;\n  }, [currentPage, totalPages]);\n\n  function handleChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    setCurrentPage(+e.target.value);\n    // navigate(`?page=${e.target.value}`);\n  }\n\n  function handleClick(page: number) {\n    setCurrentPage(page);\n  }\n\n  const arrowButtonStyle =\n    'flex w-14 items-center justify-center border border-gray-300 bg-white disabled:bg-zinc-300 px-2 py-2 font-medium text-gray-500 hover:bg-gray-50';\n\n  function handlePerPageChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    setItemsPerPage(+e.target.value);\n  }\n\n  return (\n    <div className=\"flex flex-col justify-center items-center gap-2 mt-5\">\n      <div className=\"flex items-center gap-16 text-sm\">\n        <div>\n          Showing <span className=\"font-bold\">{itemPos.first}</span> to{' '}\n          <span className=\"font-bold\">{itemPos.last}</span> of{' '}\n          <span className=\"font-bold\">{itemPos.length}</span> items\n        </div>\n        <div>\n          Go to page:\n          <select\n            onChange={handleChange}\n            value={currentPage}\n            disabled={totalPages === 1}\n            className=\"ml-3 rounded-md border-gray-300 text-xs shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50\">\n            {Array.from({ length: totalPages }, (_, i) => i + 1).map(\n              (page, index) => (\n                <option key={`goto-${page}-${index}`} value={page}>\n                  {page}\n                </option>\n              )\n            )}\n          </select>\n        </div>\n        <div>\n          Items per page:\n          <select\n            value={itemsPerPage}\n            onChange={handlePerPageChange}\n            className=\"ml-3 rounded-md border-gray-300 text-xs shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50\">\n            <option value={10}>10</option>\n            <option value={20}>20</option>\n            <option value={50}>50</option>\n            <option value={100}>100</option>\n          </select>\n        </div>\n      </div>\n      <nav aria-label=\"Pagination\">\n        <ul className=\"inline-flex items-center -space-x-px rounded-md text-sm shadow-sm\">\n          <li>\n            <button\n              onClick={prevPage}\n              disabled={currentPage === 1}\n              className={arrowButtonStyle + ' rounded-l-md'}>\n              <span className=\"sr-only\">Previous</span>\n              <ChevronLeftIcon className=\"w-5 h-5\" />\n            </button>\n          </li>\n          {pages.map((page, index) => (\n            <li key={index}>\n              {typeof page === 'number' ? (\n                <button\n                  onClick={() => {\n                    handleClick(page);\n                  }}\n                  disabled={currentPage === page}\n                  className={`flex w-14 justify-center items-center border border-gray-300 px-4 py-2 font-medium disabled:border-x-zinc-400 ${\n                    currentPage === page\n                      ? 'bg-zinc-200 text-gray-700'\n                      : 'bg-white text-gray-500 hover:bg-gray-50'\n                  }`}\n                  aria-current={currentPage === page ? 'page' : undefined}>\n                  {page}\n                </button>\n              ) : (\n                <span className=\"flex justify-center w-14 items-center border border-gray-300 px-4 py-2 font-medium bg-white text-gray-500\">\n                  ...\n                </span>\n              )}\n            </li>\n          ))}\n          <li>\n            <button\n              onClick={nextPage}\n              disabled={currentPage === totalPages}\n              className={\n                arrowButtonStyle + ' rounded-r-md disabled:border-l-zinc-400'\n              }>\n              <span className=\"sr-only\">Next</span>\n              <ChevronRightIcon className=\"w-5 h-5\" />\n            </button>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n}\n","import {\n  BuildingLibraryIcon,\n  CheckCircleIcon,\n  ClockIcon,\n  XCircleIcon,\n} from '@heroicons/react/24/solid';\nimport React from 'react';\nimport { ChecklistItemStatus } from '@prisma/client';\n\nexport function Status({\n  status,\n  isSlideOver = false,\n}: {\n  status: ChecklistItemStatus;\n  isSlideOver?: boolean;\n}) {\n  const statusMap = new Map<\n    ChecklistItemStatus,\n    { text: string; bgColor: string; bdColor: string; icon: React.ReactNode }\n  >();\n  statusMap.set(ChecklistItemStatus.WaitingApproval, {\n    text: 'Awaiting Approval',\n    bgColor: 'bg-blue-300',\n    bdColor: 'border-blue-400',\n    icon: <BuildingLibraryIcon className=\"w-4 h-4\" />,\n  });\n  statusMap.set(ChecklistItemStatus.Completed, {\n    text: 'Complete',\n    bgColor: 'bg-green-300',\n    bdColor: 'border-green-400',\n    icon: <CheckCircleIcon className=\"w-5 h-5\" />,\n  });\n  statusMap.set(ChecklistItemStatus.WaitingMember, {\n    text: 'Awaiting Member',\n    bgColor: 'bg-yellow-300',\n    bdColor: 'border-yellow-400',\n    icon: <ClockIcon className=\"w-5 h-5\" />,\n  });\n  statusMap.set(ChecklistItemStatus.Denied, {\n    text: 'Approval Denied',\n    bgColor: 'bg-red-300',\n    bdColor: 'border-red-400',\n    icon: <XCircleIcon className=\"w-5 h-5\" />,\n  });\n\n  const currentStatus = statusMap.get(status) ?? {\n    text: 'Default',\n    bgColor: 'bg-yellow-300',\n    bdColor: 'border-yellow-400',\n    icon: <ClockIcon className=\"w-5 h-5\" />,\n  };\n\n  if (isSlideOver)\n    return (\n      // <div className=\"flex\">\n      //   <p>Status: </p>\n      <div\n        className={`ml-3 font-semibold ${currentStatus.bgColor} border ${currentStatus.bdColor} justify-center flex gap-1 items-center px-5 py-4 rounded-2xl h-[24px] text-base`}>\n        {currentStatus.icon}\n        {currentStatus.text}\n      </div>\n      // </div>\n    );\n\n  if (status !== ChecklistItemStatus.WaitingMember)\n    return (\n      <span\n        className={`${currentStatus.bgColor} ${currentStatus.bdColor} w-fit px-3 py-1 text-sm rounded-full flex items-center gap-x-1`}>\n        {currentStatus.icon}\n        <span className=\"text-center py-1\">{currentStatus.text}</span>\n      </span>\n    );\n}\n","import { DeleteButton, PrimaryButton } from '@components/ui/Buttons';\nimport { DatabaseUpdatedIcon, SolidCheckmark, StartTimer } from '@components/ui/Icons';\nimport { ChevronRightIcon, CalendarDaysIcon } from '@heroicons/react/24/solid';\nimport { ChatBubbleBottomCenterTextIcon } from '@heroicons/react/24/outline';\nimport { Link, useFetcher } from '@remix-run/react';\nimport type { GetUserChecklistsResponse } from '@repositories/checklist.server';\nimport { Status } from '@routes/_withNav+/_noSideBar+/checklist.$itemId+/status';\nimport { ChecklistItemStatus } from '@prisma/client';\n\nconst ChecklistItemCard = ({\n  item,\n  loggedInUser,\n}: {\n  item: GetUserChecklistsResponse[number]['items'][number];\n  loggedInUser: string;\n}) => {\n  const itemCompletedByMember = (itemRequiredRole: string) =>\n    itemRequiredRole === 'USER';\n  const notCompletedByMember = (itemRequiredRole: string) =>\n    itemRequiredRole !== 'USER';\n\n  const dueDate = new Date(item.createdAt);\n  dueDate.setDate(dueDate.getDate() + 30);\n\n  const markCompleteFetcher = useFetcher();\n  const markInCompleteFetcher = useFetcher();\n  const userRequestApprovalFetcher = useFetcher();\n\n  const unread = (comments: any) => {\n    let total = 0;\n    for (const item of comments) {\n      if (!item.readBy.includes(loggedInUser)) total++;\n    }\n    return total;\n  };\n\n  return (\n    <li key={item.id} className=\" border-b border-1 border-neutral-200\">\n      <div className=\"flex items-stretch gap-y-5 gap-x-10 py-3 pl-2 pr-3\">\n        <div className=\"flex flex-col basis-5/6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex-grow pr-10\">\n              <h3 className=\"font-bold mb-1 w-full pb-3 pl-2 border-b\">\n                {item.reference.name ?? item.name}\n              </h3>\n              <div className=\"text-sm text-zinc-600 pt-2 pl-5 flex items-center gap-x-2\">\n                <div className=\"inline-flex items-center gap-1 text-nowrap\">\n                  <StartTimer className=\"size-6\" title=\"Date Started\" />\n                  {new Date(item.createdAt).toDateString()}\n                </div>\n                <div className=\"inline-flex items-center gap-1.5 text-nowrap\">\n                  <CalendarDaysIcon title=\"Due Date\" className=\"size-6\" />\n                  {dueDate.toDateString()}\n                </div>\n                <div className=\"inline-flex gap-1.5 items-center text-nowrap\">\n                  <DatabaseUpdatedIcon className=\"size-6\" title=\"Date Last Updated\" />\n                  {new Date(item.updatedAt).toDateString()}\n                </div>\n                <div className=\"inline-flex gap-1.5 items-center text-nowrap\">\n                  {item.status === ChecklistItemStatus.Completed && (\n                    <SolidCheckmark title=\"Date Completed\" className=\"size-6 text-green-500\"/>\n                  )}\n                  {item.status === ChecklistItemStatus.Completed && (\n                    new Date(item.dateCompleted ?? dueDate).toDateString()\n                  )}\n                </div>\n                <Link\n                  className=\"inline-flex items-center gap-1.5 hover:bg-zinc-300 hover:rounded-lg p-1\"\n                  to={`${item.id}/comments`}>\n                  <ChatBubbleBottomCenterTextIcon title=\"Comments\" className=\"size-6\" />\n                  {item.comments && (\n                    <>\n                      {item.comments.length}\n                      {unread(item.comments) > 0 && (\n                        <span className=\"relative flex size-2\">\n                          <span className=\"animate-[ping_1s_ease-in-out_5] absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75\"></span>\n                          <span className=\"relative inline-flex rounded-full size-2 bg-red-500\"></span>\n                        </span>\n                      )}\n                    </>\n                  )}\n                  {!item.comments && '0'}\n                </Link>\n              </div>\n            </div>\n            <Status status={item.status}></Status>\n          </div>\n        </div>\n        <div className=\"basis-1/6 flex items-center\">\n          {itemCompletedByMember(item.role.abbreviation) && (\n            <>\n              {item.status === ChecklistItemStatus.WaitingMember && (\n                <markCompleteFetcher.Form method=\"POST\" className=\"w-full\">\n                  <input type=\"hidden\" value={item.id} name=\"itemId\" />\n                  <input type=\"hidden\" value={loggedInUser} name=\"userId\" />\n                  <PrimaryButton\n                    type=\"submit\"\n                    value=\"update\"\n                    name=\"_action\"\n                    className=\"w-full py-1\">\n                    { markCompleteFetcher.state === 'idle'\n                      ? 'Mark Complete'\n                      : 'Processing...' }\n                  </PrimaryButton>\n                </markCompleteFetcher.Form>\n              )}\n              {item.status === ChecklistItemStatus.Completed && (\n                <div className=\"flex flex-col justify-between w-full\">\n                  <div>\n                    <markInCompleteFetcher.Form method=\"POST\">\n                      <input type=\"hidden\" value={ item.id } name=\"itemId\"/>\n                      <input\n                        type=\"hidden\"\n                        value={ loggedInUser }\n                        name=\"userId\"/>\n                      <DeleteButton\n                        type=\"submit\"\n                        name=\"_action\"\n                        value=\"incomplete\"\n                        disabled={ markInCompleteFetcher.state !== 'idle' }\n                        className=\"w-full\">\n                        { markInCompleteFetcher.state === 'idle'\n                          ? 'Unsign'\n                          : 'Processing...' }\n                      </DeleteButton>\n                    </markInCompleteFetcher.Form>\n                  </div>\n                </div>\n              ) }\n            </>\n          ) }\n          { notCompletedByMember( item.role.abbreviation ) && (\n            <>\n              { item.status === ChecklistItemStatus.WaitingMember && (\n                <userRequestApprovalFetcher.Form\n                  method=\"POST\"\n                  className=\"text-white text-center rounded-lg p-2 w-full\">\n                  <input type=\"hidden\" name=\"itemId\" value={ item.id }/>\n                  <input type=\"hidden\" name=\"userId\" value={ loggedInUser }/>\n                  <PrimaryButton\n                    type=\"submit\"\n                    value=\"markready\"\n                    name=\"_action\"\n                    className=\"w-full\">\n                    { userRequestApprovalFetcher.state === 'idle'\n                      ? 'Mark Ready'\n                      : 'Processing...' }\n                  </PrimaryButton>\n                </userRequestApprovalFetcher.Form>\n              ) }\n              { (item.status !== ChecklistItemStatus.WaitingMember) && (\n                <dl className=\"\">\n                  <dt className=\"font-bold\">{item.status === ChecklistItemStatus.Completed ? 'Completed by' : 'Point of Contact'}:</dt>\n                  <dd>{item.role.name}</dd>\n                </dl>\n              )}\n            </>\n          )}\n        </div>\n        <div className=\"flex items-center\">\n          <Link\n            to={`${item.id}`}\n            className=\"hover:ring-1 rounded py-1.5 px-1 hover:bg-zinc-200\">\n            <ChevronRightIcon className=\"h-10 w-10\" />\n          </Link>\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default ChecklistItemCard;\n","import { Badge, type BadgeProps } from '@components/ui/Badge';\nimport { CalendarCheckmark, StartTimer } from '@components/ui/Icons';\nimport { Pagination, usePagination } from '@lib/hooks/usePagination';\nimport type { GetUserChecklistsResponse } from '@repositories/checklist.server';\nimport ChecklistItemCard from './ItemCard';\n\nconst ChecklistView = ({\n  checklist,\n  loggedInUser,\n}: {\n  checklist: GetUserChecklistsResponse[0];\n  loggedInUser: string;\n}) => {\n  const {\n    currentItems,\n    currentPage,\n    totalPages,\n    setCurrentPage,\n    nextPage,\n    prevPage,\n    itemPos,\n    setItemsPerPage,\n    itemsPerPage,\n  } = usePagination(checklist.items, 10);\n\n  const totalItems = checklist.items.length;\n  const completeItemsCount = checklist.items.filter(\n    (item) => item.isComplete\n  ).length;\n  const totalPercentage = (completeItemsCount / totalItems) * 100;\n\n  const startDate = new Date(checklist.createdAt);\n  const dueDate = new Date(startDate);\n  dueDate.setDate(dueDate.getDate() + 30);\n\n  const today = new Date(Date());\n  const thirtyDays = new Date();\n  thirtyDays.setDate(today.getDate() + 30);\n  const twoWeeks = new Date();\n  twoWeeks.setDate(today.getDate() + 14);\n  const fiveDays = new Date();\n  fiveDays.setDate(today.getDate() + 5);\n  let dateBadgeVariant: BadgeProps['variant'] = 'none';\n  if (dueDate < thirtyDays) {\n    if (dueDate < twoWeeks) {\n      if (dueDate < fiveDays) {\n        if (dueDate < today) {\n          dateBadgeVariant = 'danger';\n        } else dateBadgeVariant = 'warning';\n      } else dateBadgeVariant = 'primary';\n    }\n  }\n  return (\n    <>\n      <section key={ checklist.id } className=\"pt-3 mb-20 pb-5\">\n        <div className=\"pb-2 border-b-1 border-b border-gray-300\">\n          <div className=\"space-y-1\">\n            <ul className=\"flex items-center justify-between\">\n              <li className=\"font-medium text-secondary-700\">Progress</li>\n              <li className=\"text-sm text-secondary-500\">\n                { completeItemsCount } / { totalItems } Completed\n              </li>\n              <li className=\"text-sm text-secondary-500\">\n                { totalPercentage.toFixed() }%\n              </li>\n            </ul>\n            <div className=\"relative flex h-2 w-full overflow-hidden rounded-full bg-secondary-200\">\n              <div\n                role=\"progressbar\"\n                aria-valuenow={ totalPercentage }\n                aria-valuemin={ 0 }\n                aria-valuemax={ 100 }\n                style={ { width: `${ totalPercentage }%` } }\n                className=\"flex h-full items-center justify-center bg-green-500 text-xs text-white\"></div>\n            </div>\n          </div>\n          <h2 className=\"text-2xl font-bold mt-5\">\n            Checklist: { checklist.name }\n          </h2>\n          <div className=\"text-sm px-2 flex gap-x-2 items-center my-2\">\n            <Badge className=\"gap-x-2\"><StartTimer className=\"size-4\"/>\n              Started { startDate.toLocaleString( 'en-US', {\n                month: 'numeric',\n                day: 'numeric',\n                year: 'numeric',\n              } ) }</Badge>\n            <Badge className=\"gap-x-2\" variant={ dateBadgeVariant }>\n              <CalendarCheckmark className=\"size-5\" />\n              Due { dueDate.toLocaleString( 'en-US', {\n                month: 'numeric',\n                day: 'numeric',\n                year: 'numeric',\n              } ) }</Badge>\n          </div>\n        </div>\n\n        <ul className=\"list-none\">\n          { currentItems.map( ( item ) => (\n            <ChecklistItemCard\n              key={ item.id }\n              item={ item }\n              loggedInUser={ loggedInUser }/>\n          ) ) }\n        </ul>\n\n        <Pagination\n          currentPage={ currentPage }\n          totalPages={ totalPages }\n          setCurrentPage={ setCurrentPage }\n          itemsPerPage={ itemsPerPage }\n          setItemsPerPage={ setItemsPerPage }\n          itemPos={ itemPos }\n          nextPage={ nextPage }\n          prevPage={ prevPage }/>\n      </section>\n    </>\n  );\n};\n\nexport default ChecklistView;\n","import type { Models } from '@lib/models.server';\nimport type { Organization } from '@prisma/client';\nimport { useMatches } from '@remix-run/react';\nimport type { OrganizationWithChildren } from '@repositories/organization.server';\n\nexport type RootLayoutData = {\n  user: {\n    name: string;\n    image: string | null;\n    rank: string;\n    id: string;\n    primaryEmail: string;\n  };\n  roles: Array<{\n    abbreviation: string;\n    description: string;\n    id: string;\n    name: string;\n    owningOrgId: string;\n    roleId: string;\n  }>;\n  permissions: string;\n  org: Organization;\n  parentNode: OrganizationWithChildren,\n  orgFlatArray: Array<Organization>\n};\n\nfunction isValidReturnKey(returnKey: unknown): returnKey is keyof RootLayoutData {\n  return ['user', 'roles', 'permissions', 'org', 'parentNode', 'orgFlatArray'].includes(returnKey);\n}\n\nfunction isRootLayoutData(data: unknown): data is RootLayoutData {\n  return !!(data as RootLayoutData).user && !!(data as RootLayoutData).roles && !!(data as RootLayoutData).permissions && !!(data as RootLayoutData).org;\n}\n\ntype DataOrKeyValue<T extends keyof RootLayoutData | string> = T extends keyof RootLayoutData ? RootLayoutData[T] : RootLayoutData\n\nexport function useRootLayoutData<K extends keyof RootLayoutData | string>(\n  returnKey?: K\n): DataOrKeyValue<K> {\n  const data = useMatchesData('routes/_withNav+/_layout');\n  let errMsg = '';\n\n  if (!data || !isRootLayoutData(data)) {\n    // Handle case when data is not available\n    errMsg = 'No layout data available.';\n    console.error(errMsg);\n    throw new Error(errMsg);\n  }\n\n  if (!returnKey) {\n    return data as DataOrKeyValue<K>;\n  }\n\n  if (!isValidReturnKey(returnKey)) {\n    errMsg = `Invalid key ${returnKey}.`;\n    console.error(errMsg);\n    throw new Error(errMsg);\n  }\n\n  return (data[returnKey] as DataOrKeyValue<K>);\n}\n\nexport function useManageLayoutData() {\n  const data = useMatchesData('routes/_withNav+/_withSideBar+/_manage+/_layout');\n\n  return (\n      data as {\n        parentNode: OrganizationWithChildren,\n        orgFlatArray: Array<Organization>,\n        orgBeingViewed: Organization;\n        orgSelected: Organization;\n      }\n  );\n}\nexport type ChecklistLayoutData = {item: Awaited<ReturnType<typeof Models.checklistItem.getWithComments>>[0]; comments: Awaited<ReturnType<typeof Models.checklistItem.getWithComments>>[1]; loggedInUser: string;}\n\nexport function useChecklistLayoutData() {\n  const data = useMatchesData('routes/_withNav+/_noSideBar+/checklist.$itemId+/_layout');\n  return (\n    data as ChecklistLayoutData\n  );\n}\n\nexport function useManageTemplateData() {\n  const data = useMatchesData('routes/_withNav+/_withSideBar+/_manage+/template');\n\n  type TemplateType = {\n    id: string,\n    createdAt: string,\n    updatedAt: string,\n    isDeleted: boolean,\n    createdBy: string,\n    updatedBy: string,\n    name: string,\n    abbreviation: string,\n    isWingLevel: boolean,\n    parentOrgId: string,\n    parentId: string,\n    baseId: string,\n    templates: Array<{\n      id: string,\n      name: string,\n      description: string,\n      isDeleted: boolean,\n      organizationId: string,\n      type: string,\n    }>;\n  }\n\n  return (\n      data as {\n        orgBeingViewed: TemplateType;\n      }\n  );\n}\n\nexport default function useMatchesData(id: string) {\n  const matches = useMatches();\n  const match = matches.find(\n    (match) => match.id === id\n  );\n  if (match?.data)\n    return match.data;\n}\n","import ChecklistView from '@components/Checklist/View';\nimport { Badge, type BadgeProps } from '@components/ui/Badge';\nimport { StartTimer } from '@components/ui/Icons';\nimport { useRootLayoutData } from '@lib/hooks/useMatchesData';\nimport type { GetUserChecklistsResponse } from '@repositories/checklist.server';\n\nexport function InProgressChecklists( {\n  checklists,\n}: {\n  checklists: GetUserChecklistsResponse;\n} ) {\n  const user = useRootLayoutData( 'user' );\n\n  const filtered = checklists.filter( ( c ) => !c.isComplete );\n\n\n\n  if ( filtered.length > 0 )\n    return (\n      <div className=\"mt-3\">\n        <h1 className=\"text-xl px-2 py-1 rounded-xl\">\n          In Progress Checklist\n        </h1>\n        { filtered.map( ( checklist ) => (\n          <ChecklistView\n            key={ checklist.id }\n            checklist={ checklist }\n            loggedInUser={ user.id }/>\n        ) ) }\n      </div>\n    );\n\n  return (\n    <div className=\"flex border-b border-1 border-neutral-200 py-5 gap-5 justify-between mb-10\">\n      <h3 className=\"text-xl\">No Active Checklists.</h3>\n    </div>\n  );\n}\n","import { Models } from '@lib/models.server';\nimport exp from 'constants';\n\nexport async function getUserChecklists(userId: string) {\n  return Models.checklist.getUserChecklists(userId);\n}\n\nexport async function completeItem(itemId: string, userId: string) {\n  await Models.checklistItem.markComplete(itemId, userId);\n}\n\nexport async function sendMessage(itemId: string, userId: string, postedById: string, internal: boolean) {\n  await Models.checklistItem.sendMessage(itemId, userId, postedById, internal);\n}\n\nexport async function markRead(commentIds: number[], userId: string){\n  await Models.checklistItem.markRead(commentIds, userId);\n}\n\nexport async function sendUserMessage(itemId: string, userId: string, postedById: string) {\n  await Models.checklistItem.sendUserMessage(itemId, userId, postedById);\n}\n\nexport async function userApprovalRequest(itemId: string) {\n  await Models.checklistItem.userApprovalRequest(itemId);\n}\n\nexport async function userApprovalRequestUnMark(itemId: string) {\n  await Models.checklistItem.userApprovalRequestUnMark(itemId);\n}\n","import { CompleteChecklists } from '@components/Checklist/completeChecklists';\nimport { InProgressChecklists } from '@components/Checklist/inProgressChecklists';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json, redirect } from '@remix-run/node';\nimport { Outlet, useLoaderData } from '@remix-run/react';\nimport { requireUser } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, jsonWithSuccess } from 'remix-toast';\nimport z from 'zod';\nimport { uncompleteItem } from '../_withSideBar+/.server/tasks.queries';\nimport {\n  completeItem,\n  getUserChecklists,\n  markRead,\n  sendUserMessage,\n  userApprovalRequest,\n  userApprovalRequestUnMark,\n} from './.server/checklist.queries';\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const userId = await requireUser(request);\n  const checklists = await getUserChecklists(userId);\n\n  return json({ checklists }, {\n    headers: {\n      'Content-Security-Policy': 'frame-ancestors: none',\n      'X-Frame-Options': 'SAMEORIGIN',\n    },\n  });\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const cookieUserId = await requireUser(request);\n  // const schema = z.object({\n  //   itemId: z.string(),\n  //   userId: z.literal(cookieUserId),\n  // });\n  const updateTaskSchema = z.object({\n    itemId: z.string(),\n    postedById: z.string().optional(),\n    userId: z.literal(cookieUserId),\n    content: z.string().optional(),\n    commentId: z.string().optional(),\n    _action: z.union([\n      z.literal('update'),\n      z.literal('incomplete'),\n      z.literal('send'),\n      z.literal('markready'),\n      z.literal('notready'),\n      z.literal('markRead'),\n      z.literal('notready'),\n    ]), // with more actions this needs to be z.union([z.literal('update'), z.literal('otherAction')])\n  });\n\n  try {\n    const { userId, itemId, _action, content, postedById, commentId } =\n      updateTaskSchema.parse(\n        Object.fromEntries((await request.formData()).entries())\n      );\n\n    if (_action === 'update') {\n      await completeItem(itemId, userId);\n      return jsonWithSuccess({ status: 'success' }, 'Task Signed!');\n    }\n    if (_action === 'incomplete') {\n      await uncompleteItem(itemId, userId);\n      return jsonWithSuccess({ status: 'success' }, 'Task Unsigned');\n    }\n    if (_action === 'send') {\n      await sendUserMessage(itemId, postedById ?? '', content ?? '');\n      return jsonWithSuccess({ status: 'success' }, 'Message sent!');\n    }\n    if (_action === 'markready') {\n      await userApprovalRequest(itemId);\n      return jsonWithSuccess({ status: 'success' }, 'Item awaiting approval.');\n    }\n    // TODO: implement user not ready\n    if (_action === 'notready') {\n      await userApprovalRequestUnMark(itemId);\n      return jsonWithSuccess({ status: 'success'}, 'Task Unmarked');\n    }\n    if (_action === 'markRead') {\n      const items: number[] = Array.from(\n        JSON.parse(decodeURIComponent(commentId ?? ''))\n      );\n      await markRead(items, userId);\n      return json({ status: 'success' });\n    }\n  } catch (error) {\n    console.error('Error during approval: ', error);\n    if (error instanceof TypeError) {\n      if (error instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', error: error.message || 'TypeError.' },\n        'The URL provided for the request is invalid.'\n      );\n    } else if (error instanceof Error) {\n      return jsonWithError(\n        { status: 'error', error: error.message || 'Unknown Error.' },\n        'An error occurred.'\n      );\n    }\n  }\n}\n\nconst ChecklistLayout = () => {\n  const { checklists } = useLoaderData<typeof loader>();\n\n  return (\n    <>\n      <div className=\"rounded-lg bg-zinc-50 drop-shadow-xl container mx-auto px-5 pt-2 mt-5\">\n        <InProgressChecklists checklists={checklists} />\n      </div>\n      <div className=\"rounded-lg bg-zinc-50 drop-shadow-xl container mx-auto px-5 pt-2\">\n        <CompleteChecklists checklists={checklists} />\n      </div>\n      <Outlet />\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default ChecklistLayout;\n","import { useFetcher } from '@remix-run/react';\n\ntype ToggleButtonTypeOptions = {\n  text: string;\n  styles: string;\n  formValue: string;\n};\n\ntype ToggleButtonType = {\n  complete: ToggleButtonTypeOptions;\n  incomplete: ToggleButtonTypeOptions;\n  ready: ToggleButtonTypeOptions;\n  notReady: ToggleButtonTypeOptions;\n};\n\nexport function ToggleButton({\n  type,\n  itemId,\n  loggedInUser,\n}: {\n  type: keyof ToggleButtonType;\n  itemId: string;\n  loggedInUser: string;\n}) {\n  const fetcher = useFetcher();\n\n  const baseClasses =\n    'inline-flex disabled:cursor-not-allowed flex-1 justify-center items-center rounded-md px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2';\n\n  const redButtonClasses = `${baseClasses} disabled:bg-red-400 bg-red-600 hover:bg-red-500 focus-visible:outline-red-600`;\n  const greenButtonClasses = `${baseClasses} disabled:bg-green-300 bg-green-600 hover:bg-green-500 focus-visible:outline-green-600`;\n\n  const types = {\n    complete: {\n      text: 'Mark Complete',\n      styles: greenButtonClasses,\n      formValue: 'update',\n    },\n    incomplete: {\n      text: 'Unsign',\n      styles: redButtonClasses,\n      formValue: 'incomplete',\n    },\n    ready: {\n      text: 'Mark Ready',\n      styles: greenButtonClasses,\n      formValue: 'markready',\n    },\n    notReady: {\n      text: 'Mark Not Ready',\n      styles: redButtonClasses,\n      formValue: 'notready',\n    },\n  };\n\n  return (\n    <fetcher.Form\n      method=\"POST\"\n      className=\"text-white text-center flex-1 inline-flex\"\n      action=\"/checklist\">\n      <input type=\"hidden\" value={itemId} name=\"itemId\" />\n      <input type=\"hidden\" value={loggedInUser} name=\"userId\" />\n      <button\n        type=\"submit\"\n        name=\"_action\"\n        value={types[type].formValue}\n        disabled={fetcher.state !== 'idle'}\n        className={`${baseClasses} ${types[type].styles}`}>\n        {fetcher.state === 'idle' ? types[type].text : 'Processing...'}\n      </button>\n    </fetcher.Form>\n  );\n}\n","import { Link, useLocation } from '@remix-run/react';\nimport { ToggleButton } from '@components/Checklist/Slideover/ToggleCompleteButton';\nimport { ChecklistItemStatus } from '@prisma/client';\n\nexport function DetailsCommentsButton() {\n  const location = useLocation();\n\n  let text = 'View Messages';\n  let link = 'comments';\n  if (location.pathname.endsWith('comments')) {\n    text = 'Back to Details';\n    link = '.';\n  }\n\n  return (\n    <Link\n      className=\"flex-1 inline-flex justify-center shadow-[0px_6px_8px_-3px_rgba(0,0,0,0.3)] transition-all items-center rounded-md border-0 border-primary-500 hover:border-primary-600 bg-primary-600 px-3.5 py-2.5 text-sm font-semibold text-white hover:bg-primary-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600  \"\n      to={link}>\n      {text}\n    </Link>\n  );\n}\n\nexport function ToggleReadyButton({\n  status,\n  itemId,\n  loggedInUser,\n}: {\n  status: ChecklistItemStatus;\n  itemId: string;\n  loggedInUser: string;\n}) {\n  if (status === ChecklistItemStatus.WaitingApproval)\n    return (\n      <ToggleButton\n        type=\"notReady\"\n        itemId={itemId}\n        loggedInUser={loggedInUser}/>\n    );\n\n  if (\n    status === ChecklistItemStatus.WaitingMember ||\n    status === ChecklistItemStatus.Denied\n  )\n    return (\n      <ToggleButton type=\"ready\" itemId={itemId} loggedInUser={loggedInUser} />\n    );\n\n  return null;\n}\n\nexport function ToggleCompleteButton({\n  status,\n  itemId,\n  loggedInUser,\n}: {\n  status: ChecklistItemStatus;\n  itemId: string;\n  loggedInUser: string;\n}) {\n  if (status === ChecklistItemStatus.Completed)\n    return (\n      <ToggleButton\n        type=\"incomplete\"\n        itemId={itemId}\n        loggedInUser={loggedInUser}/>\n    );\n\n  if (status === ChecklistItemStatus.WaitingMember)\n    return (\n      <ToggleButton\n        type=\"complete\"\n        itemId={itemId}\n        loggedInUser={loggedInUser}/>\n    );\n\n  return null;\n}\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { SolidCheckmark, DatabaseUpdatedIcon, XMarkIcon } from '@components/ui/Icons';\nimport { Dialog, DialogTitle } from '@headlessui/react';\nimport { CalendarDaysIcon } from '@heroicons/react/24/solid';\nimport { ChatBubbleBottomCenterTextIcon } from '@heroicons/react/24/outline';\nimport { useChecklistLayoutData } from '@lib/hooks/useMatchesData';\nimport { Link, Outlet, useNavigate } from '@remix-run/react';\nimport type { LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Models } from '@lib/models.server';\nimport { requireUserAsObject } from '@services/user.server';\nimport { Status } from './status';\nimport {\n  DetailsCommentsButton, ToggleCompleteButton,\n  ToggleReadyButton,\n} from '@components/Checklist/Slideover/Buttons';\nimport { ChecklistItemStatus } from '@prisma/client';\n\nexport async function loader({ request, params }: LoaderFunctionArgs) {\n  const { currentOrg, id: loggedInUser } = await requireUserAsObject(request);\n  const { itemId } = params;\n\n  if (!itemId) throw new Error('item id is required.');\n\n  const [item, comments] = await Models.checklistItem.getWithComments(itemId, {\n    internalOnly: false,\n    orgId: currentOrg.uuid,\n  });\n\n  if (!item) throw new Error('item not found');\n\n  return json({ item, comments, loggedInUser }, {\n    headers: {\n      'X-Frame-Options': 'SAMEORIGIN',\n    },\n  });\n}\n\nexport default function ChecklistSlideOutLayout() {\n  const navigate = useNavigate();\n  const { item, comments, loggedInUser } = useChecklistLayoutData();\n\n  const itemCompletedByMember = (itemRequiredRole: string) =>\n    itemRequiredRole === 'USER';\n  const notCompletedByMember = (itemRequiredRole: string) =>\n    itemRequiredRole !== 'USER';\n\n  const dueDate = new Date(item?.createdAt);\n  dueDate.setDate(dueDate.getDate() + 30);\n\n  const closeModal = () => {\n    navigate('..');\n  };\n\n  const unread = (comments: { readBy: string[] }[]) => {\n    let total = 0;\n    for (const item of comments) {\n      if (!item.readBy.includes(loggedInUser)) total++;\n    }\n    return total;\n  };\n\n  return (\n    <>\n      <Dialog\n        as=\"div\"\n        id=\"slideover\"\n        className=\"fixed inset-0\"\n        open={true}\n        onClose={closeModal}>\n        <div className=\"flex justify-end min-h-screen\">\n          <div\n            className=\"fixed inset-0 bg-black opacity-30\"\n            onClick={closeModal}/>\n          <div className=\"z-50 bg-white shadow-lg min-h-screen h-screen w-full md:w-5/12 grid grid-cols-1 grid-rows-[auto_minmax(14rem,1fr)] overflow-y-scroll\">\n            <div\n              className={`grid gap-y-2 grid-cols-2 grid-rows-[2rem_2rem_0.25rem_${\n                item.isComplete ? '4rem' : '2rem'\n              }_0.25rem]`}>\n              <div className=\"flex col-span-2 row-span-1 py-5 pl-3 pr-5 justify-between items-center bg-gradient-to-r from-blue-200 to-blue-100 border-b border-b-blue-500\">\n                <DialogTitle className=\"font-bold mb-1 text-2xl pl-2\">\n                  {item.templateItem.reference?.name ?? item.templateItem.name}\n                </DialogTitle>\n                <XMarkIcon\n                  className=\"w-10 h-10 hover:cursor-pointer\"\n                  onClick={ closeModal }/>\n              </div>\n              <div className=\"col-span-2 mx-5\">\n                <div className=\"col-span-2 flex my-3 flex-wrap gap-x-5\">\n                  <DetailsCommentsButton />\n                  {notCompletedByMember(\n                    item.templateItem.requiredRole.abbreviation\n                  ) && (\n                    <ToggleReadyButton\n                      status={item.status}\n                      itemId={item.id}\n                      loggedInUser={loggedInUser}/>\n                  )}\n                  {itemCompletedByMember(\n                    item.templateItem.requiredRole.abbreviation\n                  ) && (\n                    <ToggleCompleteButton\n                      status={item.status}\n                      itemId={item.id}\n                      loggedInUser={loggedInUser}/>\n                  )}\n                </div>\n              </div>\n              <div className=\"col-span-2\">\n                <hr className=\"h-px bg-zinc-100\" />\n              </div>\n              <div className=\"col-span-2 text-lg mx-5 my-2\">\n                <div className=\"flex gap-4 items-center justify-between\">\n                  <h4 className=\"font-bold text-xl\">Status</h4>\n                </div>\n                <div className=\"mt-2\">\n                  <Status status={item.status} isSlideOver></Status>\n                </div>\n                {item.isComplete &&\n                  notCompletedByMember(\n                    item.templateItem.requiredRole.abbreviation\n                  ) && (\n                  <div className=\"flex mt-2 mx-3\">\n                      Approved By:\n                    <p className=\"pl-4 font-semibold text-md place-content-center\">\n                      {item.completedBy?.name}\n                    </p>\n                  </div>\n                )}\n                <div className=\"text-sm text-zinc-600 mx-3 mt-4\">\n                  <div className=\"flex gap-5 justify-between\">\n                    <div className=\"inline-flex items-center\">\n                      {item.status === ChecklistItemStatus.Completed && (\n                        <SolidCheckmark className=\"size-6 text-green-500 mr-1\" />\n                      )}\n                      {!item.isComplete && !item.dateCompleted && (\n                        <CalendarDaysIcon className=\"size-6 mr-2\" />\n                      )}\n                      {new Date(item.dateCompleted ?? dueDate).toDateString()}\n                    </div>\n                    <Link\n                      className=\"inline-flex items-center gap-1.5 hover:bg-zinc-300 hover:rounded-lg p-1\"\n                      to={`/checklist/${item.id}/comments`}>\n                      <ChatBubbleBottomCenterTextIcon className=\"size-6\" />\n                      {comments && (\n                        <>\n                          {comments.length}\n                          {unread(comments) > 0 && (\n                            <span className=\"relative flex size-2\">\n                              <span className=\"animate-[ping_1s_ease-in-out_5] absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75\"></span>\n                              <span className=\"relative inline-flex rounded-full size-2 bg-red-500\"></span>\n                            </span>\n                          )}\n                        </>\n                      )}\n                      {!comments && '0'}\n                    </Link>\n                    <div className=\"inline-flex gap-1 ml-3\">\n                      <DatabaseUpdatedIcon className=\"size-6\" />\n                      {new Date(item.updatedAt).toDateString()}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-span-2\">\n                <hr className=\"h-px bg-zinc-100\" />\n              </div>\n              {notCompletedByMember(\n                item.templateItem.requiredRole.abbreviation\n              ) && (\n                <>\n                  <div className=\"col-span-2 mx-5\">\n                    <h4 className=\"text-xl font-bold\">\n                      {item.templateItem.requiredRole.name}\n                    </h4>\n                    <dl className=\"grid grid-cols-1 my-4 gap-y-3\">\n                      <div className=\"flex justify-between\">\n                        <dt>Email</dt>\n                        <dd>\n                          <a\n                            href={`mailto:${item.templateItem.requiredRole.orgRoles[0].contactEmail}`}\n                            className=\"underline underline-offset-2\">\n                            {\n                              item.templateItem.requiredRole.orgRoles[0]\n                                .contactEmail\n                            }\n                          </a>\n                        </dd>\n                      </div>\n                      <hr className=\"h-px bg-zinc-100\" />\n                      <div className=\"flex justify-between\">\n                        <dt>Phone</dt>\n                        <dd>\n                          {\n                            item.templateItem.requiredRole.orgRoles[0]\n                              .contactPhone\n                          }\n                        </dd>\n                      </div>\n                    </dl>\n                  </div>\n                  <div className=\"col-span-2\">\n                    <hr className=\"h-px bg-zinc-100\" />\n                  </div>\n                </>\n              )}\n            </div>\n            <Outlet context={{ item, comments, loggedInUser }} />\n            {/** This Outlet will show either the description from the index.tsx file or the Comments and TextBox from comments.tsx */}\n          </div>\n        </div>\n      </Dialog>\n    </>\n  );\n}\n\nexport const ErrorBoundary = ErrorReport;\n","import { useState, useEffect } from \"react\";\n\nconst useInView = (elementRef: React.MutableRefObject<HTMLElement | null>, containerRef: React.MutableRefObject<HTMLElement | null>) => {\n    const [isInView, setIsInView] = useState(false);\n  \n    useEffect(() => {\n      const handleScroll = () => {\n        const container = containerRef.current;\n        const element = elementRef.current;\n  \n        if (container && element) {\n          const containerRect = container.getBoundingClientRect();\n          const elementRect = element.getBoundingClientRect();\n  \n          // Container's scroll position\n          const scrollTop = container.scrollTop;\n          const scrollLeft = container.scrollLeft;\n  \n          // Calculate the visible area of the container\n          const containerVisibleTop =\n            containerRect.top + scrollTop;\n          const containerVisibleLeft = containerRect.left + scrollLeft;\n          const containerVisibleBottom =\n            containerVisibleTop + containerRect.height;\n          const containerVisibleRight =\n            containerVisibleLeft + containerRect.width;\n  \n          // Check if the item is in the visible area of the container\n          const elementTop = elementRect.top + scrollTop;\n          const elementLeft = elementRect.left + scrollLeft;\n          const elementBottom = elementTop + elementRect.height;\n          const elementRight = elementLeft + elementRect.width;\n  \n          setIsInView(\n            elementBottom > containerVisibleTop &&\n              elementTop < containerVisibleBottom &&\n              elementRight > containerVisibleLeft &&\n              elementLeft < containerVisibleRight,\n          );\n  \n  \n        }\n      };\n  \n      // Attach the scroll event listener to the container\n      const container = containerRef.current;\n      if (container)\n        container.addEventListener('scroll', handleScroll);\n  \n      // Initial check\n      handleScroll();\n  \n      // Cleanup\n      return () => {\n        container?.removeEventListener('scroll', handleScroll);\n      };\n    }, [elementRef, containerRef]);\n  \n    return isInView;\n  };\n\n  export default useInView;","import { UserCircleIcon, UserIcon } from '@heroicons/react/24/outline';\nimport useInView from '@lib/hooks/useInView';\nimport type { ChecklistItemComments } from '@prisma/client';\nimport {\n  useFetcher,\n  useLoaderData,\n  useMatches,\n  useParams,\n} from '@remix-run/react';\nimport type { GetUserChecklistsResponse } from '@repositories/checklist.server';\nimport { initOpenTelemetry } from '@sentry/remix';\nimport { useEffect, useRef, useState } from 'react';\n\ntype MessageProps = {\n  message: MessageContainerProps['comments'][number];\n  containerRef: React.MutableRefObject<HTMLElement | null>;\n  loggedInUser: string;\n  markRead: () => void;\n};\nexport function Message({\n  message,\n  containerRef,\n  loggedInUser,\n  markRead,\n}: MessageProps) {\n  const itemRef = useRef<null | HTMLLIElement>(null);\n  const [isVisible, setIsVisible] = useState(false);\n  const [viewStartTime, setViewStartTime] = useState<number | null>(null);\n\n  const isInView = useInView(itemRef, containerRef);\n  const [prevRead, setPrevRead] = useState([]);\n\n  const [intervalId, setIntervalId] = useState<number | null>(null);\n  const isMounted = useRef(true);\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [intervalId]);\n\n  useEffect(() => {\n    if (isVisible && viewStartTime) {\n      const id = window.setInterval(() => {\n        const viewDuration = Date.now() - viewStartTime;\n        if (viewDuration >= 2000 && !message.readBy.includes(loggedInUser)) {\n          if (isMounted.current) {\n            try {\n              markRead();\n            } catch (error) {\n              console.error('Error in markRead:', error);\n            }\n          }\n          clearInterval(id);\n        }\n      }, 100);\n\n      setIntervalId(id);\n    } else {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    }\n  }, [isVisible, viewStartTime, message.readBy, loggedInUser, markRead]);\n\n  useEffect(() => {\n    if (isInView) {\n      if (!isVisible) {\n        setIsVisible(true);\n        setViewStartTime(Date.now());\n      }\n    } else {\n      if (isVisible) {\n        setIsVisible(false);\n        setViewStartTime(null);\n      }\n    }\n  }, [isInView, isVisible]);\n\n  const messageClass = () => {\n    if (message.postedById === loggedInUser) return 'bg-gray-300';\n    if (message.isDenied) return 'bg-red-400';\n    if (isInView && message.readBy.includes(loggedInUser)) return 'bg-blue-300';\n    if (isInView && !message.readBy.includes(loggedInUser))\n      return 'bg-blue-500';\n  };\n\n  return (\n    <li\n      className={`mb-1.5 flex ${message.postedById === loggedInUser ? 'justify-end' : 'justify-start'}`}\n      ref={itemRef}>\n      {message.postedById === loggedInUser ? (\n        <UserCircleIcon className=\"h-7 w-7 min-w-7 min-h-7 mr-2\" />\n      ) : (\n        <UserIcon className=\"h-7 w-7 min-w-7 min-h-7 mr-2\" />\n      )}\n      <div>\n        <div\n          className={`flex w-80 gap-2 px-2 py-0.5 rounded-br-md rounded-tr-md rounded-bl-md ${messageClass()}`}>\n          <div className=\"flex flex-col w-full\">\n            <div className=\"flex justify-between items-center\">\n              <p className=\"mr-2\">{message.postedBy?.name}</p>\n              <p className=\"text-sm text-gray-500\">\n                {new Date(message.datePosted).toLocaleString()}\n              </p>\n            </div>\n            <span className=\"\" style={{ overflowWrap: 'break-word' }}>\n              {message.message}\n            </span>\n          </div>\n        </div>\n        {/* <p className=\"text-end pr-2 text-gray-500 text-[10pt]\">Seen</p> */}\n      </div>\n    </li>\n  );\n}\ntype MessageContainerProps = {\n  loggedInUser: string;\n  comments: ChecklistItemComments[];\n  isModal?: boolean;\n};\nexport function MessageContainer({\n  loggedInUser,\n  comments,\n  status,\n  isModal = false,\n}: MessageContainerProps) {\n  const containerRef = useRef(null);\n  const markReadFetcher = useFetcher();\n\n  //const loaderData = useLoader();\n\n  //console.log(\"comments:   \", loaderData);\n\n  function handleMarkRead() {\n    let messageId: Array<number> = [];\n\n    //console.log(loggedInUser, comments)\n\n    comments.forEach((comment) => {\n      if (!comment.readBy.includes(loggedInUser)) {\n        //console.log('mark as read', comment.id)\n        messageId.push(comment.id);\n      }\n    });\n    // for(const item of messageId){\n    // }\n    const formData = new FormData();\n    formData.append('commentId', encodeURIComponent(JSON.stringify(messageId)));\n    formData.append('userId', loggedInUser);\n    formData.append('_action', 'markRead');\n    markReadFetcher.submit(formData, { method: 'POST' });\n  }\n\n  // useEffect(() => {\n  //   handleMarkRead()\n  // },[])\n  return (\n    <div\n      className={`${isModal ? 'max-h-[75vh] h-52 ' : 'rounded-xl '}min-h-20 overflow-auto bg-slate-200 shadow-inner border-[1px] border-slate-300`}\n      ref={containerRef}>\n      <ul className=\"p-2\">\n        {!comments || comments.length === 0 ? (\n          <li className=\"flex justify-center items-center h-full text-lg text-gray-500\">\n            No messages\n          </li>\n        ) : (\n          comments.map((message) => (\n            <Message\n              key={message.id}\n              message={message}\n              containerRef={containerRef}\n              loggedInUser={loggedInUser}\n              markRead={handleMarkRead}/>\n          ))\n        )}\n      </ul>\n    </div>\n  );\n}\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { MessageContainer } from '@components/ui/Message';\nimport useMatchesData, {\n  type ChecklistLayoutData,\n  useChecklistLayoutData,\n  useRootLayoutData,\n} from '@lib/hooks/useMatchesData';\nimport {\n  Outlet,\n  useFetcher,\n  useLoaderData,\n  useMatches,\n  useOutletContext,\n  useParams,\n} from '@remix-run/react';\nimport { getChecklistItem } from '@routes/_withNav+/_withSideBar+/.server/tasks.queries';\nimport { requireUser } from '@services/user.server';\nimport { useState } from 'react';\nimport type { ActionFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Attribute } from '@lib/utils';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError } from 'remix-toast';\nimport { z } from 'zod';\nimport { sendMessage, markRead } from '../.server/checklist.queries';\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const cookieUserId = await requireUser(request);\n\n  const updateTaskSchema = z.object({\n    itemId: z.string().optional(),\n    postedById: z.string().optional(),\n    userId: z.literal(cookieUserId).optional(),\n    internal: z\n      .enum(['true', 'false'])\n      .transform((value) => value === 'true')\n      .optional(),\n    content: z.string().optional(),\n    commentId: z.string().optional(),\n    _action: z.union([z.literal('send'), z.literal('markRead')]),\n  });\n\n  try {\n    const {\n      itemId,\n      userId,\n      _action,\n      content,\n      postedById,\n      internal,\n      commentId,\n    } = updateTaskSchema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n\n    if (_action === 'send') {\n      await sendMessage(itemId, postedById ?? '', content ?? '', internal);\n      return json({ status: 'success' }, {\n        headers: {\n          'X-Frame-Options': 'SAMEORIGIN',\n        },\n      });\n    }\n\n    if (_action === 'markRead' && commentId) {\n      const items: number[] = Array.from(\n        JSON.parse(decodeURIComponent(commentId))\n      );\n      await markRead(items, userId as string);\n      return json({ status: 'success' }, {\n        headers: {\n          'X-Frame-Options': 'SAMEORIGIN',\n        },\n      });\n    }\n  } catch (error) {\n    console.error('Error during approval: ', error);\n    if (error instanceof Error) {\n      if (error instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.',\n          {\n            headers: {\n              'X-Frame-Options': 'SAMEORIGIN',\n            },\n          }\n        );\n      }\n      return jsonWithError(\n        { status: 'error', error: 'Failed to approve task' },\n        'There was an error.',\n        {\n          headers: {\n            'X-Frame-Options': 'SAMEORIGIN',\n          },\n        }\n      );\n    }\n  }\n}\n\nexport default function ChecklistSlideOutComments() {\n  const { item, comments, loggedInUser } = useOutletContext<ChecklistLayoutData>();\n\n  const sendMessageFetcher = useFetcher();\n  const [messageContent, setMessageContent] = useState('');\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setMessageContent(event.target.value);\n  };\n\n  const handleFormSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    sendMessageFetcher.submit(event.target as HTMLFormElement);\n    setMessageContent('');\n  };\n\n  return (\n    <div className=\"col-span-2 my-3 mx-5 grid grid-rows-[1fr_auto]\">\n      <div className=\"grid grid-rows-[auto_1fr_3rem] gap-3 overflow-y-scroll min-h-40\">\n        <h4 className=\"font-bold text-xl\">Comments</h4>\n        <MessageContainer\n          loggedInUser={loggedInUser}\n          comments={comments}\n          status={item.dateCompleted} />\n      <sendMessageFetcher.Form onSubmit={handleFormSubmit} method=\"POST\">\n        <input type=\"hidden\" value={item?.id} name=\"itemId\" />\n        <input type=\"hidden\" value={loggedInUser} name=\"userId\" />\n        <input type=\"hidden\" value={loggedInUser} name=\"postedById\" />\n        <input type=\"hidden\" name=\"_action\" value=\"send\" />\n        <div className=\"flex gap-2\">\n          <input\n            type=\"text\"\n            name=\"content\"\n            className=\"block w-full rounded p-2 text-sm border\"\n            placeholder=\"Type a message\"\n            value={messageContent}\n            onChange={handleInputChange}\n            required/>\n          <button\n            type=\"submit\"\n            className=\"bg-blue-500 text-white py-2 px-4 rounded w-40\">\n            Send\n          </button>\n        </div>\n      </sendMessageFetcher.Form>\n      </div>\n    </div>\n  );\n}\n\nexport const ErrorBoundary = ErrorReport;\n","import { EditorContent, useEditor } from '@tiptap/react';\nimport Document from '@tiptap/extension-document';\nimport Paragraph from '@tiptap/extension-paragraph';\nimport BulletList from '@tiptap/extension-bullet-list';\nimport ListItem from '@tiptap/extension-list-item';\nimport OrderedList from '@tiptap/extension-ordered-list';\nimport Bold from '@tiptap/extension-bold';\nimport Italic from '@tiptap/extension-italic';\nimport DropCursor from '@tiptap/extension-dropcursor';\nimport Text from '@tiptap/extension-text';\nimport Link from '@tiptap/extension-link';\nimport { useCallback, useEffect } from 'react';\n\nexport function RichTextView({ children, ...props }: React.PropsWithChildren<React.HTMLAttributes<HTMLElement>>) {\n  const getContent = useCallback((children: any) => {\n    let content;\n    try {\n      content = JSON.parse(children);\n    } catch {\n      content = children;\n    }\n    return content;\n  }, [children]);\n\n  const richTextView = useEditor({\n    extensions: [\n      BulletList.configure({ HTMLAttributes: { class: 'list-disc ml-5' } }),\n      ListItem,\n      OrderedList.configure({ HTMLAttributes: { class: 'list-decimal ml-5' } }),\n      Document,\n      // Paragraph.configure({ HTMLAttributes: { class: '' } }),\n      Paragraph,\n      Text,\n      Link.configure({\n        HTMLAttributes: { class: 'underline text-blue-600' },\n        openOnClick: false,\n      }),\n      Bold,\n      Italic,\n      DropCursor,\n    ],\n    content: getContent(children),\n    editable: false,\n  });\n\n  useEffect( () => {\n    richTextView?.commands.setContent(getContent(children));\n  }, [getContent, children] );\n\n  return <EditorContent {...props} editor={richTextView}></EditorContent>;\n}\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { RichTextView } from '@components/ui/RichText/Viewer';\nimport { useChecklistLayoutData } from '@lib/hooks/useMatchesData';\n\nexport default function ChecklistSlideOutIndex() {\n  const { item } = useChecklistLayoutData();\n  return (\n    <div className=\"col-span-2 my-3 mx-5 grid grid-rows-[auto_1fr] overflow-y-scroll min-h-[10rem]\">\n      <h4 className=\"font-bold text-xl mb-2\">Description</h4>\n      <RichTextView className=\"overflow-auto mt-3\">\n        { item.templateItem.description === ''\n          ? item.templateItem.reference?.description ?? ''\n          : item.templateItem.description }\n      </RichTextView>\n    </div>\n  );\n}\n\nexport const ErrorBoundary = ErrorReport;\n","type MetricTableProps = {\n  header: string;\n  targetLength?: number;\n  metricItems?: {\n    header: string;\n    metric: string | number;\n  }[];\n};\nexport function MetricTable({ header, metricItems, targetLength = 6 }: MetricTableProps) {\n  let items = metricItems ?? [];\n  const itemsNeeded = Math.max(0, targetLength - items.length);\n  const fillerItems: any[] = Array.from({ length: itemsNeeded });\n\n  items = items.concat(fillerItems);\n\n  return (\n    <div className=\"bg-gray-100 border-2 border-gray-200 row-span-1 flex flex-col items-center justify-between text-center col-span-3\">\n      <h3 className=\"text-center my-1.5\">{header}</h3>\n      <table className=\"table-auto w-full text-center\">\n        <tbody>\n          <tr>\n            <td className=\"text-sm\">\n              <ol>\n                {items.map((item, index) => {\n                  return (\n                    <li\n                      key={index}\n                      className={`flex items-center justify-between overflow-hidden odd:bg-neutral-200 bg-neutral-100 px-2 py-0.5`}>\n                      {item ? (\n                        <>\n                          <span className=\"px-1 flex-grow text-left overflow-hidden text-ellipsis whitespace-nowrap pr-4\">\n                            {item.header}\n                          </span>\n                          <span className=\"text-right px-1\">{item.metric}</span>\n                        </>\n                      ) : (\n                        <div className=\"flex justify-center items-center text-center w-full\">\n                          N/A\n                        </div>\n                      )}\n                    </li>\n                  );\n                })}\n              </ol>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport function MetricsTableRowSkeleton() {\n  return (\n    <div className=\"h-5 w-full bg-gradient-to-r from-zinc-50 to-zinc-200 rounded-full\"></div>\n  );\n}\n\nexport function MetricsTableSkeleton() {\n  return (\n    <div className=\"animate-pulse h-[186px] bg-gray-100 px-2 border-2 border-gray-200 row-span-1 flex flex-col items-center justify-center gap-1 text-center col-span-3\">\n      <div className=\"h-6 w-3/5 bg-gradient-to-r from-zinc-50 to-zinc-200 rounded-full\"></div>\n      {Array.from({length: 6}).map((_, index) => (\n        <MetricsTableRowSkeleton key={`${index}-metrics-table-row-skelly`} />\n      ))}\n    </div>\n  );\n}\n\n","type MetricsBoxProps = {\n  header: string;\n  metric: string | number;\n  colSpan?: number;\n}\n\nexport function MetricBox({ header, metric, colSpan }: MetricsBoxProps) {\n  return (\n    <div\n      className={`bg-gray-100 border-2 relative border-bg-gray-300 p-2${colSpan ? ` col-span-${colSpan}` : ''}`}>\n      <>\n        <h3 className=\"absolute w-[calc(100%_-_2px_-_1rem)]\">{header}</h3>\n        <p className=\"flex items-center justify-center h-full font-bold text-3xl\">\n          {metric}\n        </p>\n      </>\n    </div>\n  );\n}\n\nexport function MetricBoxSkeleton({ colSpan }: { colSpan?: number }) {\n  return (\n    <div\n      className={`bg-gray-100 h-[186px] border-2 border-bg-gray-300 p-2 col-span-${colSpan}`}>\n      <div className=\"animate-pulse h-full grid grid-rows-[2rem_1fr]\">\n        <div className=\"h-8 w-full bg-gradient-to-r from-zinc-50 to-zinc-200 rounded-full\"></div>\n        <div className=\"m-4 flex-grow flex flex-col items-center justify-center\">\n          <div className=\"h-12 w-1/3 bg-gradient-to-r from-zinc-50 to-zinc-200 rounded-full\"></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function MetricBoxesRowSkeleton() {\n  return Array.from({ length: 8 }).map((_, i, array) => (\n    <MetricBoxSkeleton\n      key={`skeleton-box-row-${i}`} />\n  ));\n}\n","import { Await, useNavigation } from '@remix-run/react';\nimport type { ReactNode} from 'react';\nimport { Suspense } from 'react';\n\ntype AwaitedMetricsProps<T> = {\n  resolve: Promise<T>;\n  fallback: ReactNode;\n  children: ( data: T ) => ReactNode;\n};\n\nexport function AwaitedMetric<T>( {\n  resolve,\n  fallback,\n  children,\n}: AwaitedMetricsProps<T> ) {\n  const { state: navState } = useNavigation();\n  return (\n    <>\n      { navState !== 'idle' && fallback }\n      { navState === 'idle' && (\n        <Suspense fallback={ fallback }>\n          <Await resolve={ resolve }>{ children }</Await>\n        </Suspense>\n      ) }\n    </>\n  );\n}","import { forwardRef } from 'react';\n\nexport const Heading1 = forwardRef<\n  HTMLHeadingElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(function Heading1(props, ref) {\n  return (\n    <h1\n      {...props}\n      ref={ref}\n      className={`${props.className ? `${props.className} ` : ''}text-2xl text-gray-900`}\n    />\n  );\n});\n\nexport const Heading2 = forwardRef<\n  HTMLHeadingElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(function Heading1(props, ref) {\n  return (\n    <h2\n      {...props}\n      ref={ref}\n      className={`${props.className ? `${props.className} ` : ''}text-xl text-gray-900`} />\n  );\n});\n","import { Heading1, Heading2 } from '@components/ui/Headers';\nimport useMatchesData, { useRootLayoutData } from '@lib/hooks/useMatchesData';\nimport { OrgCombobox } from 'app/components/OrgCombobox';\nimport { forwardRef } from 'react';\n\ntype PageHeaderProps = {\n  pageTitle: string;\n  showOrgCombo?: boolean;\n  org?: { id: number; uuid: string; name: string };\n  navigateTo?: 'inbound' | 'inprocess' | 'completed' | 'outbound' | 'supervisors';\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst PageHeaderRef = forwardRef<HTMLDivElement, PageHeaderProps>(\n  function PageHeader(\n    {\n      org,\n      pageTitle,\n      navigateTo,\n      showOrgCombo = true,\n      ...props\n    }: PageHeaderProps,\n    ref: React.Ref<HTMLDivElement>\n  ) {\n    const { parentNode, orgFlatArray } = useRootLayoutData();\n\n    return (\n      <div\n        {...props}\n        ref={ref}\n        className={`flex justify-between mb-5${props.className ? ` ${props.className}` : ''}`}>\n        <div className=\"flex flex-col\">\n          {org && (\n            <>\n              <h1 className=\"text-2xl text-gray-900 mt-2.5\">{org.name}</h1>\n              <Heading2>{pageTitle}</Heading2>\n            </>\n          )}\n          {!org && (\n            <h1 className=\"text-2xl text-gray-900\">{pageTitle}</h1>\n          )}\n        </div>\n        {showOrgCombo && org && (\n          <OrgCombobox\n            orgArray={orgFlatArray}\n            parentNode={parentNode}\n            navigateTo={navigateTo}\n            selected={{ id: org.id, uuid: org.uuid, name: org.name }}/>\n        )}\n      </div>\n    );\n  }\n);\n\nexport default PageHeaderRef;\n","import { Models } from '@lib/models.server';\n\nexport async function getAllItemTimes() {\n  return Models.checklistItem.getAllItemTimes();\n}\n\nexport async function getAllChecklistItems() {\n  return Models.checklistItem.getAll();\n}\n\n////////////////////////METRICS////////////////////////////\n\nexport async function getTotalUserStrings() {\n  // await new Promise(r => setTimeout(r, 1000));\n  return Models.metrics.getTotalUserStrings();\n}\n\n// export async function getAllChecklists() {\n//   return Models.metrics.getAllChecklists();\n// }\n//\n// export async function getAllItems() {\n//   return Models.metrics.getAllChecklistItems();\n// }\n//\n// export async function getInprocessing() {\n//   return Models.metrics.getInprocessingMembers();\n// }\n//\n// export async function getCompletedChecklists() {\n//   return Models.metrics.getCompletedChecklists();\n// }\n//\n// export async function getCompletedTasks() {\n//   return Models.metrics.getCompletedTasks();\n// }\n\nexport async function getTotalCounts() {\n  return Models.metrics.getTotalCounts();\n}\n\n// export async function getInprocessedMembers() {\n//   return Models.metrics.getInprocessedMembers();\n// }\n//\n// export async function getTotalInprocessingTime() {\n//   return Models.metrics.getTotalInprocessingTime();\n// }\n\nexport async function getAverageTaskTime() {\n  // await new Promise(r => setTimeout(r, 1000));\n  return Models.metrics.getAverageTaskTime();\n}\n\nexport async function getAverageChecklistTime() {\n  // await new Promise(r => setTimeout(r, 2000));\n  return Models.metrics.getAverageChecklistTime();\n}\n\nexport async function getAverageOverdueChecklist() {\n  // await new Promise(r => setTimeout(r, 1500));\n  return Models.metrics.getAverageOverdueChecklist();\n}\n\nexport async function getMostCompletedItems() {\n  // await new Promise(r => setTimeout(r, 500));\n  return Models.metrics.getMostCompletedItems();\n}\n\nexport async function getLeastCompletedItems() {\n  // await new Promise(r => setTimeout(r, 1000));\n  return Models.metrics.getLeastCompletedItems();\n}\n\n// export async function getSquadronRating() {\n//   return Models.metrics.getSquadronRating();\n// }\n//\n// export async function getDaysToCompletion() {\n//   return Models.metrics.getDaysToCompletion();\n// }\n\nexport async function getDaysToCompletionString() {\n  const result = await Models.metrics.getDaysToCompletion()\n\n  return Number.isFinite(parseFloat(result))\n     ? parseFloat(result).toFixed(2)\n     : '0.00'\n}\n\nexport async function getAverageUserEngagement() {\n  return Models.metrics.getAverageUserEngagement();\n}\n\nexport async function getAverageAdminEngagement() {\n  return Models.metrics.getAverageAdminEngagement();\n}\n\n// export async function getAllTemplates() {\n//   return Models.metrics.getAllTemplates();\n// }\n//\n// export async function getAllRoles() {\n//   return Models.metrics.getAllRoles();\n// }\n\n////////////////////////METRICS////////////////////////////\n\n// export async function countUsers() {\n//   return Models.userProfile.countAll();\n// }\n//\n// export async function countOrgUsers(id: string) {\n//   return Models.userProfile.countOrg(id);\n// }\n//\n// export async function countAllAccounts(id: string) {\n//   return Models.userProfile.countAll(id)\n// }\n//\n// export async function countNewUsers() {\n//   return Models.userProfile.countNew();\n// }\n//\n// export async function countChecklists() {\n//   return Models.checklist.countAll();\n// }\n\n// export async function getCompletedCount() {\n//   return Service.checklistItemRepository.getCompletedCount();\n// }","import {\n  MetricTable,\n  MetricBox,\n  MetricBoxSkeleton,\n  MetricBoxesRowSkeleton,\n  MetricsTableSkeleton,\n  AwaitedMetric, MetricsTableRowSkeleton,\n} from '@components/Metrics';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport PageHeader from '@components/ui/PageHeader';\nimport { CloudArrowDownIcon, FunnelIcon } from '@heroicons/react/24/outline';\nimport { Models } from '@lib/models.server';\nimport { Attribute } from '@lib/utils';\nimport { defer, type LoaderFunctionArgs } from '@remix-run/node';\nimport {\n  Await,\n  Outlet,\n  useLoaderData,\n  useNavigation,\n  useSearchParams,\n} from '@remix-run/react';\nimport {\n  getAverageAdminEngagement,\n  getAverageChecklistTime,\n  getAverageOverdueChecklist,\n  getAverageTaskTime,\n  getAverageUserEngagement,\n  getDaysToCompletionString,\n  getLeastCompletedItems,\n  getMostCompletedItems,\n  getTotalCounts,\n  getTotalUserStrings,\n} from '@routes/_withNav+/_noSideBar+/.server/metrics.queries';\nimport { getOrgBeingViewed } from '@routes/_withNav+/_withSideBar+/_manage+/.server/org.queries';\nimport { requireUserAsObject } from '@services/user.server';\nimport html2canvas from 'html2canvas';\nimport { Suspense, useMemo, useRef, useState } from 'react';\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const { currentOrg: org } = await requireUserAsObject(request, {\n    permissions: Attribute.METRICS_READ,\n  });\n\n  const { orgBeingViewed } = await getOrgBeingViewed({\n    defaultOrgId: org.uuid,\n    searchParams: new URL(request.url).searchParams,\n  });\n\n  Models.metrics.setOrgId(orgBeingViewed.uuid);\n  const url = new URL(request.url);\n  const includeChildren = url.searchParams.get('includeChildren') === 'true';\n  Models.metrics.setIncludeChildren(includeChildren);\n\n  const userStringsPromise = getTotalUserStrings();\n  const mostCompletedPromise = getMostCompletedItems();\n  const squadronCompletionPromise = getDaysToCompletionString();\n  const totalCountsPromise = getTotalCounts();\n  const leastCompletedPromise = getLeastCompletedItems();\n  const averageTaskTimePromise = getAverageTaskTime();\n  const averageChecklistTimePromise = getAverageChecklistTime();\n  const averageOverdueChecklistPromise = getAverageOverdueChecklist();\n  const averageUserEngagementPromise = getAverageUserEngagement();\n  const averageAdminEngagementPromise = getAverageAdminEngagement();\n\n  return defer({\n    orgBeingViewed,\n    averageTaskTimePromise,\n    averageChecklistTimePromise,\n    averageOverdueChecklistPromise,\n    averageUserEngagementPromise,\n    averageAdminEngagementPromise,\n    mostCompletedPromise,\n    leastCompletedPromise,\n    userStringsPromise,\n    squadronCompletionPromise,\n    totalCountsPromise,\n  });\n};\n\ntype ToDateProps = {\n  days: number;\n  hours: number;\n  minutes: number;\n};\n\nfunction toDateString({ days, hours, minutes }: ToDateProps) {\n  let dayWord = 'Days';\n  let hourWord = 'Hours';\n  let minuteWord = 'Minutes';\n\n  if (days === 1) dayWord = 'Day';\n  if (hours === 1) hourWord = 'Hour';\n  if (minutes === 1) minuteWord = 'Minute';\n\n  return `${days} ${dayWord} ${hours} ${hourWord} ${minutes} ${minuteWord}`;\n}\n\nconst MetricsIndex = () => {\n  const {\n    orgBeingViewed,\n    mostCompletedPromise,\n    leastCompletedPromise,\n    userStringsPromise,\n    squadronCompletionPromise,\n    totalCountsPromise,\n    averageAdminEngagementPromise,\n    averageChecklistTimePromise,\n    averageOverdueChecklistPromise,\n    averageUserEngagementPromise,\n    averageTaskTimePromise,\n  } = useLoaderData<typeof loader>();\n\n  const [searchParams, setSearchParms] = useSearchParams();\n\n  const averagePromises = [\n    { header: 'Task Completion', promise: averageTaskTimePromise },\n    { header: 'User Engagement', promise: averageChecklistTimePromise },\n    { header: 'Admin Engagement', promise: averageOverdueChecklistPromise },\n    { header: 'Checklist Completion', promise: averageUserEngagementPromise },\n    { header: ' Time users overdue', promise: averageAdminEngagementPromise },\n  ];\n\n  const showChildren = useMemo(() => {\n    const includeChildren = searchParams.get('includeChildren');\n    return includeChildren === 'true';\n  }, [searchParams]);\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n\n  const handleCheckboxChange = () => {\n    setSearchParms((prev) => {\n      prev.set('includeChildren', String(!showChildren));\n      return prev;\n    });\n  };\n\n  const captureRef = useRef(null);\n  const handleExport = () => {\n    setIsExporting(true);\n\n    const element = captureRef.current;\n    if (element) {\n      html2canvas(element).then((canvas) => {\n        const link = document.createElement('a');\n        link.href = canvas.toDataURL('image/png');\n        link.download = 'Metrics-Snapshot.png';\n        link.click();\n\n        setTimeout(() => {\n          setIsExporting(false);\n        });\n      });\n    } else {\n      setIsExporting(false);\n    }\n  };\n\n  const { state: navState } = useNavigation();\n\n  return (\n    <>\n      <div ref={captureRef}>\n        <div>\n          <PageHeader org={orgBeingViewed} pageTitle=\"\" />\n        </div>\n        <section className=\"container mx-auto rounded-2xl h-auto relative\">\n          <div className=\"flex justify-end mr-2\">\n            <div className=\"flex text-left gap-3 relative\">\n              <div>\n                <button\n                  type=\"button\"\n                  onClick={() => setIsOpen(!isOpen)}\n                  className=\"inline-flex justify-center w-full px-4 py-1 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white\"\n                  id=\"options-menu\"\n                  aria-expanded={isOpen}\n                  aria-haspopup=\"true\">\n                  <FunnelIcon className=\"w-5 h-5 mr-2\" />\n                  Filters\n                </button>\n              </div>\n              <div>\n                <button\n                  onClick={handleExport}\n                  type=\"button\"\n                  disabled={isExporting}\n                  className={`inline-flex justify-center w-full px-4 py-1 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white ${isExporting ? 'opacity-50 cursor-not-allowed' : ''}`}>\n                  <CloudArrowDownIcon className=\"w-5 h-5 mr-2\" />\n                  {isExporting ? 'Exporting...' : 'Export'}\n                </button>\n              </div>\n              {isOpen && (\n                <div\n                  className=\"absolute left-0 top-full mt-2 w-56 whitespace-nowrap rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-50\"\n                  role=\"menu\"\n                  aria-orientation=\"vertical\"\n                  aria-labelledby=\"options-menu\">\n                  <div className=\"py-1\" role=\"none\">\n                    <label className=\"ml-3\">Include</label>\n                    <div className=\"flex items-center px-4 py-2\">\n                      <input\n                        id=\"include-children-checkbox\"\n                        type=\"checkbox\"\n                        checked={showChildren}\n                        onChange={() => {\n                          setIsOpen(false);\n                          handleCheckboxChange();\n                        }}\n                        className=\"ml-6 w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"/>\n                      <label\n                        htmlFor=\"include-children-checkbox\"\n                        className=\"ml-2 text-sm font-medium text-gray-900 dark:text-gray-400\">\n                        Sub-Organizations\n                      </label>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-8 grid-rows-3 gap-2 text-center text-black h-full mt-2 justify-evenly\">\n            <AwaitedMetric\n              resolve={userStringsPromise}\n              fallback={\n                <>\n                  <MetricBoxesRowSkeleton />\n                  <MetricBoxSkeleton colSpan={2} />\n                </>\n              }>\n              {(countMetrics) => {\n                const metricsBoxes = [\n                  {\n                    header: 'Total Users',\n                    metric: countMetrics.allUsers,\n                  },\n                  {\n                    header: 'New Users',\n                    metric: countMetrics.newUsers,\n                  },\n                  {\n                    header: 'Active Checklists',\n                    metric: countMetrics.checklists,\n                  },\n                  {\n                    header: 'Active Tasks',\n                    metric: countMetrics.activeTasks,\n                  },\n                  {\n                    header: 'On-Time Checklists',\n                    metric: countMetrics.onTimeChecklist,\n                  },\n                  {\n                    header: 'Late Checklist',\n                    metric: countMetrics.lateChecklist,\n                  },\n                  {\n                    header: 'Users Over Standard',\n                    metric: countMetrics.overStandardChecklist,\n                  },\n                  {\n                    header: 'In-Processing Members',\n                    metric: countMetrics.inprocessing,\n                  },\n                  {\n                    header: 'Squadron Rating',\n                    metric: countMetrics.rating,\n                    colSpan: 2,\n                  },\n                ];\n\n                return metricsBoxes.map((metric) => (\n                  <MetricBox\n                    key={`${metric.header.toLocaleLowerCase().replace(' ', '-')}-metrics-box`}\n                    header={metric.header}\n                    metric={metric.metric}\n                    colSpan={metric.colSpan}/>\n                ));\n              }}\n            </AwaitedMetric>\n\n            <AwaitedMetric fallback={<MetricsTableSkeleton />} resolve={mostCompletedPromise}>\n              {(mostCompleted) => (\n                <MetricTable\n                  header=\"Fastest Completed Items\"\n                  metricItems={mostCompleted.slice(0, 6).map((item) => ({\n                    header: item.templateName,\n                    metric: toDateString(item.averageCompletionTime),\n                  }))}/>\n              )}\n            </AwaitedMetric>\n\n            <AwaitedMetric resolve={totalCountsPromise} fallback={<MetricsTableSkeleton />}>\n              {(totalCounts) => (\n                <MetricTable\n                  header=\"Totals\"\n                  metricItems={[\n                    {\n                      header: 'Checklists completed',\n                      metric: totalCounts.completedChecklists,\n                    },\n                    {\n                      header: 'Tasks completed',\n                      metric: totalCounts.completedTasks,\n                    },\n                    {\n                      header: 'Users In-processed',\n                      metric: totalCounts.inprocessedMembers,\n                    },\n                    {\n                      header: 'Templates',\n                      metric: totalCounts.allTemplates ?? 0,\n                    },\n                    { header: 'Roles', metric: totalCounts.allRoles ?? 0 },\n                    {\n                      header: 'Time Spent In-processing',\n                      metric: toDateString(totalCounts.totalInprocessingTime),\n                    },\n                  ]}/>\n              )}\n            </AwaitedMetric>\n\n            <AwaitedMetric resolve={squadronCompletionPromise} fallback={<MetricBoxSkeleton colSpan={2} /> }>\n              {(squadCompletion) => (\n                <MetricBox\n                  header=\"Est. days to 100%\"\n                  metric={squadCompletion}\n                  colSpan={2}/>\n              )}\n            </AwaitedMetric>\n\n            <AwaitedMetric resolve={leastCompletedPromise} fallback={<MetricsTableSkeleton />}>\n              {(leastCompleted) => (\n                <MetricTable\n                  header=\"Slowest Completed Items\"\n                  metricItems={leastCompleted.slice(0, 6).map((item) => ({\n                    header: item.templateName,\n                    metric: toDateString(item.averageCompletionTime),\n                  }))}/>\n              )}\n            </AwaitedMetric>\n\n            {navState !== 'idle' && <MetricsTableSkeleton />}\n            {navState === 'idle' && (\n              <div className=\"bg-neutral-100 border-2 border-gray-200 row-span-1 flex flex-col items-center justify-center text-center col-span-3\">\n                <h3 className=\"text-center my-1.5\">Averages</h3>\n                <table className=\"table-auto w-full min-w-full\">\n                  <thead>\n                    <tr className=\"bg-neutral-200\">\n                      <th className=\"text-sm font-normal text-left px-2\">\n                      Metric\n                      </th>\n                      <th className=\"text-sm font-normal text-right px-2\">\n                      Days\n                      </th>\n                      <th className=\"text-sm font-normal text-right px-2\">\n                      Hours\n                      </th>\n                      <th className=\"text-sm font-normal text-right px-2\">\n                      Minutes\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {averagePromises.map((average) => {\n                      return (\n                        <Suspense\n                          key={`${average.header.toLocaleLowerCase().replace(' ', '-')}-metric-row`}\n                          fallback={\n                            <tr>\n                              <td colSpan={4} className=\"animate-pulse\">\n                                <MetricsTableRowSkeleton />\n                              </td>\n                            </tr>\n                          }>\n                          <Await resolve={average.promise}>\n                            {(resolved) => {\n                              return (\n                                <tr className=\"bg-neutral-100 even:bg-neutral-200\">\n                                  <td className=\"text-sm whitespace-nowrap text-left px-2 py-0.5\">\n                                    {average.header}:\n                                  </td>\n                                  <td className=\"text-sm whitespace-nowrap text-right px-2\">\n                                    {resolved?.days ?? '0'}\n                                  </td>\n                                  <td className=\"text-sm whitespace-nowrap text-right px-2\">\n                                    {resolved?.hours ?? '0'}\n                                  </td>\n                                  <td className=\"text-sm whitespace-nowrap text-right px-2\">\n                                    {resolved?.minutes ?? '0'}\n                                  </td>\n                                </tr>\n                              );\n                            }}\n                          </Await>\n                        </Suspense>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </div>\n        </section>\n      </div>\n      <Outlet />\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default MetricsIndex;\n","import { CheckIcon } from '@heroicons/react/24/outline';\nimport { isValidPassword, PasswordError } from '@lib/utils';\nimport type { Dispatch, SetStateAction} from 'react';\nimport { useEffect, useState } from 'react';\n\nfunction handleChange(e: React.ChangeEvent<HTMLInputElement>, setPassword: Dispatch<SetStateAction<string>>) {\n  setPassword(e.currentTarget.value);\n}\n\nexport function PasswordInput({\n  password,\n  compareTo,\n  setPassword,\n  isConfirm,\n  setIsFormValid,\n}: {\n  password: string;\n  compareTo?: string;\n  setPassword: Dispatch<SetStateAction<string>>;\n  isConfirm?: boolean;\n  setIsFormValid: Dispatch<SetStateAction<boolean>>;\n}) {\n  const [message, setMessage] = useState<string[]>([]);\n  const baseStyles =\n    'placeholder:text-black col-span-2 bg-white border-none text-gray-900 text-sm rounded-none block w-full p-2.5 focus:ring-0 focus:outline-none focus:border-transparent';\n  const [styles, setStyles] = useState(baseStyles);\n\n  const validStyles =\n    ' border border-green-500 shadow-[0_0_2px_1px_rgba(34,197,94,0.8)]';\n  const invalidStyles =\n    ' border border-red-500 shadow-[0px_0px_2px_1px_rgba(235,10,10,0.5)]';\n\n  useEffect(() => {\n    let validationErrors: PasswordError[] = [];\n    if (password) {\n      if (compareTo) {\n        validationErrors = isValidPassword(password, compareTo);\n      } else {\n        validationErrors = isValidPassword(password);\n      }\n    }\n    if (validationErrors.length === 0) {\n      setStyles(`${baseStyles} ${validStyles}`);\n      setIsFormValid(true);\n      setMessage([]);\n    } else {\n      setStyles(`${baseStyles} ${invalidStyles}`);\n      setIsFormValid(false);\n      if (validationErrors && validationErrors.length > 0) {\n        setMessage([]);\n        validationErrors.forEach((err) => {\n          switch (err) {\n            case PasswordError.Spaces:\n              if (!isConfirm)\n                setMessage((prev) => [\n                  'Password must not contain only spaces.',\n                  ...prev,\n                ]);\n              break;\n            case PasswordError.Length:\n              if (!isConfirm)\n                setMessage((prev) => [\n                  'Password must be greater than 9 characters.',\n                  ...prev,\n                ]);\n              break;\n            case PasswordError.Mismatch:\n              if (isConfirm)\n                setMessage((prev) => ['Passwords must match.', ...prev]);\n              break;\n          }\n        });\n      }\n    }\n\n    if ((password === '' && compareTo) || (compareTo === '' && password)) {\n      setStyles(`${baseStyles} ${invalidStyles}`);\n      setIsFormValid(false);\n      if (isConfirm) setMessage((prev) => ['Passwords must match.', ...prev]);\n    }\n\n    if (password === '' && compareTo === '') {\n      setIsFormValid(true);\n      setStyles(baseStyles);\n      setMessage([]);\n    }\n  }, [password, compareTo]);\n\n  return (\n    <>\n      <input\n        type=\"password\"\n        id=\"password\"\n        name=\"password\"\n        value={password}\n        onChange={(e) => {\n          handleChange(e, setPassword);\n        }}\n        className={styles}/>\n      {message.length > 0 &&\n        message.map((msg) => <p className=\"text-red-500\">{msg}</p>)}\n    </>\n  );\n}\n","const PasswordRecommendation = () => {\n   \n  return(\n    <div className=\"w-full border rounded-xl p-5 mb-6 bg-yellow-50\">\n      <h3 className=\"text-sm font-medium text-gray-900\">Password Recommendations:</h3>\n      <ul className=\"text-sm text-gray-700 list-inside\">\n        <li>- Make sure your password is at least <strong>12 characters</strong> long to protect against brute-force attacks.</li>\n        <li>- Use a combination of <strong>uppercase letters, lowercase letters, numbers,</strong> and <strong>special characters</strong>.</li>\n        <li className=\"pl-6\"><strong>Example:</strong> {`3QQg[9mv/2>Dc5IU~}j67mID,E`}</li>\n        <li>- Avoid easily guessable information, like your name, username, or common words.</li>\n        <li>- Consider using a passphrase made up of random words or a memorable sentence.</li>\n        <li className=\"pl-6\"><strong>Example:</strong> Notice?Sent2?Creature?Waste?Cause?Car</li>\n        <li>- Always use unique passwords for each of your accounts to minimize risk.</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default PasswordRecommendation;","import { PasswordInput } from '@components/ui/forms/Password';\nimport type { AccountWithProfile } from '@lib/constants';\nimport { UserRank } from '@lib/constants';\nimport type { StringOrDate } from '@lib/types';\nimport { Form } from '@remix-run/react';\nimport ErrorReport from '../ErrorReport';\nimport React, { useState } from 'react';\nimport { UserIcon } from '@heroicons/react/24/outline';\nimport PasswordPolicy from '@components/Text/PasswordRecommendation';\n\ntype UserFormProps = {\n  account?: Omit<StringOrDate<AccountWithProfile>, 'password'>;\n  sub?: any,\n  airman?: any,\n  btnAction: 'create' | 'update';\n};\n\nconst ProfileForm = ({\n  account,\n  airman,\n  sub,\n  btnAction = 'create',\n}: UserFormProps) => {\n  const userData = account;\n  const [password, setPassword] = useState('');\n  const [confPassword, setConfPassword] = useState('');\n  const [isFormValid, setIsFormValid] = useState(true);\n  const [activeSection, setActiveSection] = useState('personal');\n\n  const setSection = (section: any) => {\n    setActiveSection(section);\n  };\n\n  const cleanedName = userData?.name?.replace(/\\s+/g, '.');\n\n  const filteredSubordinates = userData?.id\n    ? sub.filter((subordinate: any) => subordinate.supervisorId === userData.id)\n    : [];\n\n  const filteredAirman = userData?.id\n    ? airman.filter((airman: any) => airman.sponsorId === userData.id)\n    : [];\n\n\n  return (\n    <>\n      <div className=\"flex\">\n        <div>\n\n          <div className=\"flex ml-20 mt-10 flex-col\">\n            <UserIcon className=\"size-32 p-5 bg-gray-300 rounded-full\" />\n            <div className=\"mt-4\">\n              <div className=\"font-bold text-2xl block max-w-[300px] whitespace-nowrap truncate\">{userData?.name}</div>\n              <div className=\"font-light text-lg block\">{userData?.workEmail}</div>\n            </div>\n            <div className=\"mt-14 flex flex-col gap-2 space-y-2 whitespace-nowrap\">\n\n            \n              <div>\n                <button\n                  className={`transition-all text-xl text-left hover:font-bold ${activeSection === 'organization' ? 'font-bold' : ''}`}\n                  onClick={() => setSection('organization')}>\n              Organization Information\n                </button>\n              </div>\n              <div>\n                <button\n                  className={`transition-all text-xl text-left hover:font-bold ${activeSection === 'supervisor' ? 'font-bold' : ''}`}\n                  onClick={() => setSection('supervisor')}>\n              Supervisors & Sponsors\n                </button>\n              </div>\n              <div>\n                <button\n                  className={`transition-all text-xl text-left hover:font-bold ${activeSection === 'questions' ? 'font-bold' : ''}`}\n                  onClick={() => setSection('questions')}>\n              Account Questions\n                </button>\n              </div>\n              <div>\n                <button\n                  className={`transition-all text-xl text-left hover:font-bold ${activeSection === 'password' ? 'font-bold' : ''}`}\n                  onClick={() => setSection('password')}>\n              Account Password\n                </button>\n              </div>\n              <div>\n                <button\n                  className={`transition-all text-xl text-left hover:font-bold ${activeSection === 'settings' ? 'font-bold' : ''}`}\n                  onClick={() => setSection('settings')}>\n              Account Details\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <Form\n            method=\"post\"\n            className=\"p-8 mt-10 flex flex-col 2xl:w-[1200px]\"\n            id=\"registerForm\">\n            {userData?.id && (\n              <input type=\"hidden\" name=\"userId\" value={userData.id} />\n            )}\n\n            <div>\n              {activeSection === 'personal' && (\n                <div className=\"grid grid-cols-2 gap-10\">\n\n                  <div className=\"border rounded-xl p-5\">\n                    <label className=\"block text-sm font-medium text-black mb-4\">\n                    Select Rank\n                    </label>\n                    <select\n                      name=\"rank\"\n                      defaultValue={userData?.rank}\n                      className=\"transition-all border border-white text-gray-900 text-sm block w-full p-0 focus:outline-none focus:ring-0 focus:border-transparent\">\n                      {Object.entries(UserRank).map((item, index) => (\n                        <option key={`${index}-${item[0]}`} value={item[0]}>\n                          {item[1].name}\n                        </option>\n                      ))}\n                    </select>\n                  </div>           \n                  <div className=\"border rounded-xl p-5\">\n                    <label\n                      htmlFor=\"name\"\n                      className=\"block text-sm font-medium text-gray-900 dark:text-black mb-4\">\n                    Full Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"name\"\n                      id=\"name\"\n                      defaultValue={userData?.name}\n                      className=\"placeholder:text-zinc-500 bg-white border border-white text-gray-900 text-sm block w-full p-0 focus:ring-0 focus:outline-none focus:border-transparent\"\n                      required={true}/>\n                  </div>\n\n              \n          \n                </div>\n              )}\n\n              {activeSection === 'organization' && (\n                <div className=\"grid grid-cols-2 gap-10\">\n\n                  <div className=\"border rounded-xl p-5\">\n                    <label\n                      htmlFor=\"email\"\n                      className=\"block text-sm font-medium text-gray-900 dark:text-black mb-4\">\n                      Official Email address\n                    </label>\n                    <input\n                      type=\"email\"\n                      id=\"workEmail\"\n                      name=\"workEmail\"\n                      defaultValue={userData?.workEmail ?? ''}\n                      className=\"border-none text-gray-900 text-sm block w-full p-0 focus:ring-0 focus:outline-none focus:border-transparent\"\n                      required={true}/>\n                  </div>\n\n                  <div className=\"border rounded-xl p-5\">\n                    <label\n                      htmlFor=\"text\"\n                      className=\"block text-sm font-medium text-gray-900 dark:text-black mb-4\">\n                      Current Organization\n                    </label>\n                    <label\n                      className=\"border-none text-black text-sm block w-full p-0 focus:ring-0 focus:outline-none focus:border-transparent\">\n                      {userData?.currentOrg.name ?? ''}\n                    </label>\n                  </div>\n\n                  <div className=\"border rounded-xl p-5\">\n                    <label\n                      htmlFor=\"phone\"\n                      className=\"block text-sm font-medium text-gray-900 dark:text-black mb-4\">\n                      Work Phone number <span className=\"text-sm\" />\n                    </label>\n                    <input\n                      type=\"tel\"\n                      id=\"workPhone\"\n                      name=\"workPhone\"\n                      defaultValue={userData?.workPhone ?? ''}\n                      placeholder=\"000-000-0000\"\n                      className=\"border-none text-gray-900 text-sm block w-full p-0 focus:ring-0 focus:outline-none focus:border-transparent\"\n                      pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"/>\n                  </div>\n                </div>\n              )}\n\n              {activeSection === 'supervisor' && (\n                <div>\n                  {userData && (\n                    <>\n                      <div className=\"grid grid-cols-2 gap-10\">\n                        <div>\n                          <div className=\"border rounded-xl p-5 mb-10\">\n                            <label\n                              className=\"mb-2 text-sm font-medium text-gray-900 flex gap-2\">\n                              Supervisor Rank: <p className=\"font-normal\">{userData?.supervisor?.rank ?? ''}</p>\n                            </label>\n                          </div>\n\n                          <div className=\"border rounded-xl p-5 mb-10\">\n                            <label\n                              className=\"mb-2 text-sm font-medium text-gray-900 flex gap-2\">\n                              Supervisor Name: <p className=\"font-normal\">{userData?.supervisor?.name ?? ''}</p>\n                            </label>\n                          </div>\n\n                          <div className=\"border rounded-xl p-5 mb-10\">\n                            <label\n                              className=\"mb-2 text-sm font-medium text-gray-900 flex gap-2\">\n                              Supervisor Email: <p className=\"font-normal\">{userData?.supervisor?.workEmail ?? ''}</p>\n                            </label>\n                          </div>\n                        </div>\n\n                        <div>\n                          <div className=\"border rounded-xl p-5 mb-10\">\n                            <label\n                              className=\"mb-2 text-sm font-medium text-gray-900 flex gap-2\">\n                              Sponsor Rank: <p className=\"font-normal\">{userData?.sponsor?.rank ?? ''}</p>\n                            </label>\n                          </div>\n\n                          <div className=\"border rounded-xl p-5 mb-10\">\n                            <label\n                              className=\"mb-2 text-sm font-medium text-gray-900 flex gap-2\">\n                              Sponsor Name:<p className=\"font-normal\">{userData?.sponsor?.name ?? ''}</p>\n                            </label>\n                          </div>\n\n                          <div className=\"border rounded-xl p-5 mb-10\">\n                            <label\n                              className=\"mb-2 text-sm font-medium text-gray-900 flex gap-2\">\n                              Sponsor Email: <p className=\"font-normal\">{userData?.sponsor?.workEmail ?? ''}</p>\n                            </label>\n                          </div>\n                        </div>\n\n                        <div>\n                          <div className=\"border rounded-xl p-5\">\n                            <label\n                              className=\"mb-2 text-sm font-medium text-gray-900 gap-2\">\n                              Subordinates: <p className=\"font-normal\">\n                                <div className=\"text-center max-w-full mt-4 overflow-hidden\">\n                                  {filteredSubordinates ? (\n                                    <table className=\"w-full\">\n                                      <tbody>\n                                        {filteredSubordinates.map((sub) => (\n                                          <tr key={sub.id}>\n                                            <td className=\"px-4\">{sub.rank}</td>\n                                            <td\n                                              className=\"px-4 max-w-[250px] whitespace-nowrap truncate\"\n                                              title={sub.name}>\n                                              {sub.name}\n                                            </td>\n                                            <td\n                                              className=\"px-4 max-w-[200px] whitespace-nowrap truncate\"\n                                              title={sub.workEmail}>\n                                              {sub.workEmail}\n                                            </td>\n                                          </tr>\n                                        ))}\n                                      </tbody>\n                                    </table>\n                                  ) : (\n                                    <p>No subordinates are assigned to you.</p>\n                                  )}\n                                </div>\n\n                              </p>\n                            </label>\n                          </div>\n                        </div>\n\n                        <div>\n                          <div className=\"border rounded-xl p-5 mb-10\">\n                            <label\n                              className=\"mb-2 text-sm font-medium text-gray-900 gap-2\">\n                              Incoming Airman: <p className=\"font-normal\">\n                                <div className=\"text-center max-w-full mt-4 overflow-hidden\">\n                                  {filteredAirman ? (\n                                    <table className=\"w-full\">\n                                      <tbody>\n                                        {filteredAirman.map((airman) => (\n                                          <tr key={airman.id}>\n                                            <td className=\"px-4\">{airman.rank}</td>\n                                            <td\n                                              className=\"px-4 max-w-[250px] whitespace-nowrap truncate\"\n                                              title={airman.name}>\n                                              {airman.name}\n                                            </td>\n                                            <td\n                                              className=\"px-4 max-w-[200px] whitespace-nowrap truncate\"\n                                              title={airman.workEmail}>\n                                              {airman.workEmail}\n                                            </td>\n                                          </tr>\n                                        ))}\n                                      </tbody>\n                                    </table>\n                                  ) : (\n                                    <p>No subordinates are assigned to you.</p>\n                                  )}\n                                </div>\n                              </p>\n                            </label>\n                          </div>\n                        </div>\n                      </div>\n\n                    </>\n                  )}\n                </div>\n              )}\n                \n              {activeSection === 'questions' && (\n                <div>\n                  <div className=\"grid grid-cols-2 gap-10\">\n\n                    <div className=\"border rounded-xl p-5\">\n                      <h1>Are you currently a dorm resident?</h1>\n                      <input\n                        type=\"radio\"\n                        id=\"contactChoice1\"\n                        defaultChecked={userData?.isDormResident ?? false}\n                        value={'true'}\n                        name=\"isDormResident\"/>\n                      <label className=\"ml-1\" htmlFor=\"contactChoice1\">\n                        Yes\n                      </label>\n                      <input\n                        className=\"ml-3\"\n                        type=\"radio\"\n                        id=\"contactChoice2\"\n                        defaultChecked={!userData?.isDormResident}\n                        value={'false'}\n                        name=\"isDormResident\"/>\n                      <label className=\"ml-1\" htmlFor=\"contactChoice2\">\n                        No\n                      </label>\n                    </div>\n\n                    <div className=\"border rounded-xl p-5\">\n                      <h1>Do you currently have any dependents?</h1>\n                      <input\n                        type=\"radio\"\n                        id=\"contactChoice3\"\n                        defaultChecked={userData?.hasDependents ?? false}\n                        value={'true'}\n                        name=\"hasDependents\"/>\n                      <label className=\"ml-1\" htmlFor=\"contactChoice3\">\n                        Yes\n                      </label>\n                      <input\n                        className=\"ml-3\"\n                        type=\"radio\"\n                        defaultChecked={!userData?.hasDependents}\n                        value={'false'}\n                        id=\"contactChoice4\"\n                        name=\"hasDependents\"/>\n                      <label className=\"ml-1\" htmlFor=\"contactChoice4\">\n                        No\n                      </label>\n                    </div>\n\n                    <div className=\"border rounded-xl p-5\">\n                      <h1>\n                        Is any member of your family enrolled in the Exceptional Family\n                        Member Program (EFMP)?*\n                      </h1>\n                      <div className=\"text-xs mb-1\">\n                        <p>\n                          *Service members on active duty enroll in the program if they\n                          have a Family member with a physical, emotional, developmental,\n                          or intellectual disorder requiring specialized services so their\n                          needs can be considered in the military personnel assignment\n                          process.\n                        </p>\n                      </div>\n                      <input\n                        type=\"radio\"\n                        id=\"contactChoice7\"\n                        defaultChecked={userData?.hasEFMP ?? false}\n                        value={'true'}\n                        name=\"hasEFMP\"/>\n                      <label className=\"ml-1\" htmlFor=\"contactChoice7\">\n                        Yes\n                      </label>\n                      <input\n                        className=\"ml-3\"\n                        type=\"radio\"\n                        id=\"contactChoice8\"\n                        defaultChecked={!userData?.hasEFMP}\n                        value={'false'}\n                        name=\"hasEFMP\"/>\n                      <label className=\"ml-1\" htmlFor=\"contactChoice8\">\n                        No\n                      </label>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {activeSection === 'password' && (\n                <div className=\"flex flex-col items-center\">\n                  <PasswordPolicy/>\n                  <div className=\"w-full border rounded-xl p-5\">\n                    <label\n                      htmlFor=\"password\"\n                      className=\"block mb-1 text-sm font-medium text-gray-900 dark:text-black\">\n                      New Password\n                    </label>\n                    <PasswordInput\n                      password={password}\n                      setPassword={setPassword}\n                      compareTo={confPassword}\n                      setIsFormValid={setIsFormValid}/>\n                  </div>\n              \n                  <div className=\"w-full border rounded-xl mt-10 p-5\">\n                    <label\n                      htmlFor=\"confirmPassword\"\n                      className=\"block mb-1 text-sm font-medium text-gray-900 dark:text-black\">\n                      Confirm New Password\n                    </label>\n                    <PasswordInput\n                      password={confPassword}\n                      setPassword={setConfPassword}\n                      compareTo={password}\n                      isConfirm={true}\n                      setIsFormValid={setIsFormValid}/>\n                  </div>\n                </div>\n              \n              \n              )}\n\n              {activeSection === 'settings' && (\n                <div className=\"grid grid-cols-2 gap-10\">\n\n                  <div className=\"w-full border rounded-xl p-5\">\n                    <label\n                      htmlFor=\"password\"\n                      className=\"block mb-1 text-sm font-medium text-gray-900 dark:text-black\">\n                      Rownd Account Id: <p className=\"font-normal\">{userData?.accountId ?? ''}</p>\n                    </label>\n                  </div>\n\n                  <div className=\"w-full border rounded-xl p-5\">\n                    <label\n                      htmlFor=\"confirmPassword\"\n                      className=\"block mb-1 text-sm font-medium text-gray-900 dark:text-black\">\n                      User Id: <p className=\"font-normal\">{userData?.id ?? ''}</p>\n                    </label>\n                  </div>\n\n                  <div className=\"w-full border rounded-xl p-5\">\n                    <label\n                      htmlFor=\"confirmPassword\"\n                      className=\"block mb-1 text-sm font-medium text-gray-900 dark:text-black\">\n                      Current Organization Id: <p className=\"font-normal\">{userData?.currentOrg?.uuid ?? ''}</p>\n                    </label>\n                  </div>\n\n                  <div className=\"w-full border rounded-xl p-5\">\n                    <label\n                      htmlFor=\"confirmPassword\"\n                      className=\"block mb-1 text-sm font-medium text-gray-900 dark:text-black\">\n                      Supervisor Id: <p className=\"font-normal\">{userData?.supervisor?.id ?? ''}</p>\n                    </label>\n                  </div>\n\n                  <div className=\"w-full border rounded-xl p-5\">\n                    <label\n                      htmlFor=\"confirmPassword\"\n                      className=\"block mb-1 text-sm font-medium text-gray-900 dark:text-black\">\n                      Sponsor Id: <p className=\"font-normal\">{userData?.sponsor?.id ?? ''}</p>\n                    </label>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {activeSection !== 'settings' && activeSection !== 'supervisor' &&(\n              <div className=\"flex flex-col mt-10\">\n                <button\n                  name=\"_action\"\n                  value={btnAction}\n                  type=\"submit\"\n                  disabled={!isFormValid}\n                  className=\"mb-3 text-white bg-gray-800 hover:bg-gray-600 disabled:bg-slate-400 disabled:cursor-not-allowed font-medium rounded-lg text-sm sm:w-auto h-full py-2.5 text-center\">\n                Submit\n                </button>\n              </div>\n            )}\n          </Form>\n        </div>\n\n      </div>\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default ProfileForm;","import type { UserUpdateDto } from '@repositories/dtos';\nimport { Models } from '@lib/models.server';\n\n\nexport async function getUser(id: string) {\n  return Models.userProfile.get(id);\n}\n\nexport async function getAccount(profileId: string) {\n  return Models.userProfile.getAccountByProfile(profileId);\n}\n\nexport async function updateProfile(id: string, data: UserUpdateDto) {\n  return Models.userProfile.update(id, data);\n}\n","import ErrorReport from '@components/ui/ErrorReport';\nimport ProfileForm from '@components/ui/forms/ProfileForm';\nimport { isValidPassword } from '@lib/utils';\nimport { Rank } from '@prisma/client';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport {\n  getAccount,\n  updateProfile,\n} from './.server/profile.queries';\nimport { requireUser } from '@services/user.server';\nimport React from 'react';\nimport {\n  jsonWithError,\n  jsonWithSuccess,\n} from 'remix-toast';\nimport type { ZodTypeAny } from 'zod';\nimport z, { ZodError } from 'zod';\nimport { getSponsors, getSubordinates } from '../_withSideBar+/_manage+/.server/org.queries';\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n\n  const userId = await requireUser(request);\n  //const { workEmail } = await getUser(userId);\n  const account = await getAccount(userId);\n  const subordinates = await getSubordinates(account.currentOrg.uuid);\n  const sponsor = await getSponsors(userId);\n  return json({ account, subordinates, sponsor }, {\n    headers: {\n      'Content-Security-Policy': 'frame-ancestors: none',\n      'X-Frame-Options': 'SAMEORIGIN',\n    },\n  });\n};\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  const zodRadioButton: [ZodTypeAny, ZodTypeAny, ...ZodTypeAny[]] = [\n    z.literal('true').transform(() => true),\n    z.literal('false').transform(() => false),\n  ];\n  const updateSchema = z.object({\n    userId: z.string(),\n    name: z.string().optional(),\n    personalPhone: z.string().nullable().optional(),\n    workPhone: z.string().nullable().optional(),\n    workEmail: z.string().email().optional(),\n    personalEmail: z.string().optional(),\n    hasDependents: z.union(zodRadioButton).optional(),\n    isDormResident: z.union(zodRadioButton).optional(),\n    hasEFMP: z.union(zodRadioButton).optional(),\n    // sponsorReach: z.union(zodRadioButton),\n    password: z.string().optional().refine((val) => {if (val) return isValidPassword(val); else return true;}, {message: 'Not a valid password'}),\n    confirmPassword: z.string().optional().refine((val) => {if (val) return isValidPassword(val); else return true;} ),\n    rank: z.nativeEnum(Rank).optional(),\n    // dodId: z.string().min(10).max(10),\n    // sponsor: z.string().optional(),\n    // supervisor: z.string().optional(),\n  });\n\n  try {\n    const data = updateSchema.parse(Object.fromEntries((await request.formData()).entries()));\n    if (data.password){\n      if (!isValidPassword(data.password, data.confirmPassword))\n        return jsonWithError( {status: 'error'}, 'There was a validation error.');\n    }\n    await updateProfile(data.userId, data);\n    return jsonWithSuccess( { status: 'ok' }, 'Profile Saved!');\n\n\n  } catch (e) {\n    console.error(e);\n    if (e instanceof Error) {\n      if (e instanceof ZodError) return jsonWithError({ status: 'error', message: 'There was a validation error.', issues: e.issues }, 'There was a validation error.');\n      return jsonWithError({ status: 'error', error: e }, 'There was an error.');\n    }\n  }\n};\n\nconst ChecklistIndex = () => {\n  const { account, subordinates, sponsor } = useLoaderData<typeof loader>();\n\n  return (\n    <>\n      <ProfileForm\n        account={account}\n        sub={subordinates}\n        airman={sponsor}\n        btnAction=\"update\" />\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default ChecklistIndex;\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { Outlet } from '@remix-run/react';\nimport { createContext, useState } from 'react';\n\nexport const SearchContext = createContext<{\n  searchQuery: string;\n  setSearchQuery?: Function;\n}>({ searchQuery: '', setSearchQuery: undefined });\n\nconst WithSideBarLayout = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  return <SearchContext.Provider value={{searchQuery, setSearchQuery}}><Outlet /></SearchContext.Provider>;\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default WithSideBarLayout;\n","import useGenerateSearchParams from '@lib/hooks/useGenerateSearchParams';\nimport type { SideBarNavLink } from '@lib/types';\nimport {\n  Link,\n  useLocation,\n} from '@remix-run/react';\n\ntype SidebarLinkProps = {\n  links: SideBarNavLink['links'];\n  header: string;\n};\n\ntype IsActiveByPathFn = (path: string, pathToCompare: string) => boolean;\n\ntype IsActiveByStringFn = (\n  str: string | RegExp,\n  strToCompare: string,\n) => boolean;\n\nconst isPathEqual: IsActiveByPathFn = (href, pathToCompare) =>\n  pathToCompare.toLowerCase() === href;\n\nconst compareByRegex = (regex: RegExp, path: string) => !!path.match(regex);\n\nconst searchPath: IsActiveByStringFn = (urlPattern, path) => {\n  if (typeof urlPattern === 'string')\n    return path.toLowerCase().includes(urlPattern.toLowerCase());\n  else return compareByRegex(urlPattern, path);\n};\n\nexport default function SidebarLink({ links, header }: SidebarLinkProps) {\n  const location = useLocation();\n\n  let isActive: boolean;\n  const extraMenuListItemClasses = 'mt-4 mb-6';\n  const extraMenuListItemHeaderClasses = 'text-xl mb-2';\n  const extraNavLinkClass =\n    'flex items-center rounded p-2 px-4 hover:bg-slate-400';\n  const extraNavLinkActive = 'bg-gray-500 text-white';\n  const extraMenuIconClasses = 'h-6 w-6 mr-3';\n\n  const hasLinks = links.length > 0;\n\n  const searchParams = useGenerateSearchParams({keysToRemove: 'includeChildren'});\n\n  return (\n    hasLinks && (\n      <li className={extraMenuListItemClasses}>\n        <h3 className={extraMenuListItemHeaderClasses}>{header}</h3>\n        <ul>\n          {links.map((link, linkIndex) => {\n            if (link.urlPattern) {\n              isActive = searchPath(link.urlPattern, location.pathname);\n            } else {\n              isActive = isPathEqual(link.href, location.pathname);\n            }\n            return (\n              <li\n                key={`${link.text}-${linkIndex}`}\n                className={link.extraClasses ?? ''}>\n                <Link\n                  prefetch=\"intent\"\n                  to={ { pathname: link.href, search: searchParams }}\n                  className={`${extraNavLinkClass}${\n                    isActive ? ` ${extraNavLinkActive}` : ''\n                  } `}>\n                  {link.icon && <link.icon className={extraMenuIconClasses} />}\n                  {link.text}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </li>\n    )\n  );\n}\n","import { useRootLayoutData } from '@lib/hooks/useMatchesData';\nimport usePermissions from '@lib/hooks/usePermissions';\nimport type { SideBarNavLink } from '@lib/types';\nimport SidebarLink from './SidebarLink';\n\nexport type SideBarProps = {\n  navLinks: SideBarNavLink[];\n};\n\nexport default function SideBarNav({ navLinks }: SideBarProps) {\n  const permissions = useRootLayoutData('permissions');\n  const checkPermissions = usePermissions();\n\n  const actualLinks = new Map<string, SideBarNavLink['links']>();\n\n  for (const navLink of navLinks) {\n    let links: any[] = [];\n    navLink.links.forEach((link) => {\n      if (\n        link.permission &&\n        checkPermissions(permissions, link.permission)\n      )\n        links.push({ ...link });\n      else if (!link.permission) links.push({ ...link });\n    });\n\n    let key = navLink.header;\n    if (navLink.header === '') key = '';\n\n    if (links.length > 0) actualLinks.set(key, links);\n  }\n\n  return (\n    <div\n      id=\"extraMenu\"\n      className=\"w-[300px] h-screen top-0 sticky overflow-scroll no-scrollbar flex-shrink-0 bg-gray-200 py-8 pt-2 px-4\">\n      <ul>\n        {Array.from(actualLinks).map(\n          ([header, links], index) =>\n            links.length > 0 && (\n              <SidebarLink\n                key={`${header}-${index}`}\n                links={links}\n                header={header}/>\n            )\n        )}\n      </ul>\n    </div>\n  );\n}\n","import ContainerLayout from '@components/ui/Container';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport SideBarNav from '@components/SideBar';\nimport {\n  ArrowDownOnSquareIcon,\n  ArrowUpOnSquareIcon,\n  BriefcaseIcon,\n  BuildingOfficeIcon,\n  ClipboardDocumentListIcon,\n  CubeIcon,\n  DocumentDuplicateIcon,\n  GlobeAmericasIcon,\n  KeyIcon,\n  PlusCircleIcon,\n  UserGroupIcon,\n  UserPlusIcon,\n  Square3Stack3DIcon,\n} from '@heroicons/react/20/solid';\nimport type { SideBarNavLink } from '@lib/types';\nimport { Attribute, RolePermissions } from '@lib/utils';\nimport { isSuperAdmin } from '@lib/utils/utils.server';\nimport type { LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Outlet, useLoaderData } from '@remix-run/react';\nimport { getOrgBeingViewed, getOrgDescendants } from '@routes/_withNav+/_withSideBar+/_manage+/.server/org.queries';\nimport { requireUserAsObject } from '@services/user.server';\nimport { getRootDescendants, getRootNode, getRootTree } from './.server/manage.queries';\nimport React from 'react';\nimport { DocumentCheckIcon } from '@heroicons/react/24/outline';\nimport { ArchiveBoxIcon } from '@heroicons/react/16/solid';\n\n/*\n ** We can use this to make sure the user can view the admin board but each route is already\n ** ensuring the permissions in the respective loader\n *\n **/\nexport async function loader({ request, params }: LoaderFunctionArgs) {\n  const { currentOrg, roles } = await requireUserAsObject(request);\n\n  const { orgBeingViewed } = await getOrgBeingViewed({\n    defaultOrgId: currentOrg?.uuid,\n    params,\n    searchParams: new URL(request.url).searchParams,\n  });\n\n  let parentNode, orgFlatArray;\n\n  // TODO: If user is super admin show\n  const start = performance.now();\n  // rootNode = await getRootNode(currentOrg.id);\n  if (isSuperAdmin(roles)) {\n    parentNode = await getRootTree();\n    orgFlatArray = await getRootDescendants();\n  } else {\n    if (currentOrg) {\n      parentNode = await getRootNode(currentOrg.uuid);\n      orgFlatArray = await getOrgDescendants(currentOrg.uuid);\n    }\n  }\n\n  //console.log(\"PARENT NODE: \", parentNode)\n  const end = performance.now();\n\n  return json({ parentNode, time: (end - start).toFixed(2), orgFlatArray, orgBeingViewed });\n}\n\nconst ManageDashboard = () => {\n  // const { org } = useContext(UserContext);\n  const { orgBeingViewed: org } = useLoaderData<typeof loader>();\n\n  const sideBarLinks: SideBarNavLink[] = [\n    {\n      header: 'Manage',\n      links: [\n        {\n          text: 'Accounts',\n          href: '/user',\n          icon: UserGroupIcon,\n          permission: Attribute.MEMBERS_READWRITE,\n        },\n        {\n          text: 'Create New Account',\n          href: '/user/create',\n          icon: UserPlusIcon,\n          permission: Attribute.MEMBERS_READWRITE,\n        },\n        {\n          text: 'Bases',\n          href: '/base',\n          icon: GlobeAmericasIcon,\n          permission: RolePermissions.SUPERADMIN,\n        },\n        {\n          text: 'Onboarding Members',\n          href: `/user/onboard`,\n          icon: Square3Stack3DIcon,\n          permission: Attribute.MEMBERS_READWRITE,\n        },\n        {\n          text: 'Organizations',\n          href: '/org',\n          icon: BuildingOfficeIcon,\n          urlPattern: /org(?!\\/[^/]+\\/(inbound|outbound|inprocess|archived|completed|supervisors))/,\n          permission: Attribute.ORGS_READWRITE,\n        },\n        {\n          text: 'Permissions',\n          href: '/role/permissions',\n          icon: KeyIcon,\n          urlPattern: 'permissions',\n          permission: RolePermissions.SUPERADMIN,\n        },\n        {\n          text: 'Templates',\n          href: '/template',\n          icon: ClipboardDocumentListIcon,\n          urlPattern: /template(?!\\/assign)/,\n          permission: Attribute.TEMPLATES_READWRITE,\n        },\n        {\n          text: 'Unit Roles',\n          href: '/role',\n          icon: BriefcaseIcon,\n          urlPattern: /role(?!\\/(custom|permissions))/,\n          permission: Attribute.ORGS_READWRITE,\n        },\n      ],\n    },\n    {\n      header: 'View',\n      links: [\n        // {\n        //   text: 'Checklists',\n        //   href: `/org/${org.id}/inprocess`,\n        //   icon: DocumentDuplicateIcon,        // please find a better icon\n        //   urlPattern: 'checklists',\n        //   permission: Attribute.MOVES_READWRITE,\n        // },\n        // For admins, maybe CSS, to delete custom roles from organizations\n        {\n          text: 'Custom Roles',\n          href: '/role/custom',\n          icon: CubeIcon,\n          urlPattern: 'custom',\n          permission: Attribute.ROLES_READWRITE,\n        },\n        {\n          text: 'Inbound Members',\n          href: `/org/${org.uuid}/inbound`,\n          icon: ArrowDownOnSquareIcon, // please find a better icon\n          urlPattern: 'inbound',\n          permission: [Attribute.ORGS_READWRITE],\n        },\n        {\n          text: 'Inprocessing Members',\n          href: `/org/${org.uuid}/inprocess`,\n          icon: DocumentDuplicateIcon, // please find a better icon\n          urlPattern: 'inprocess',\n          permission: Attribute.MOVES_READWRITE,\n        },\n        {\n          text: 'Completed Checklists',\n          href: `/org/${org.uuid}/completed`,\n          icon: DocumentCheckIcon, // please find a better icon\n          urlPattern: 'completed',\n          permission: Attribute.MOVES_READWRITE,\n        },\n        {\n          text: 'Outbound Members',\n          href: `/org/${org.uuid}/outbound`,\n          icon: ArrowUpOnSquareIcon, // please find a better icon\n          urlPattern: 'outbound',\n          permission: Attribute.MOVES_READWRITE,\n        },\n        {\n          text: 'Supervisor Reports',\n          href: `/org/${org.uuid}/supervisors`,\n          icon: ClipboardDocumentListIcon,\n          urlPattern: 'supervisors',\n          permission: Attribute.MOVES_READWRITE,\n        },\n\n      ],\n    },\n    {\n      header: 'Assign',\n      links: [\n        {\n          text: 'Checklists',\n          href: '/template/assign',\n          icon: PlusCircleIcon,\n          urlPattern: 'assign',\n          permission: RolePermissions.SUPERADMIN,\n        },\n      ],\n    },\n    {\n      header: 'Roles',\n      links: [\n      ],\n    },\n  ];\n\n  return (\n    <>\n      <SideBarNav navLinks={sideBarLinks} />\n      <ContainerLayout>\n        <Outlet context={{orgBeingViewed: org}} />\n      </ContainerLayout>\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default ManageDashboard;\n","import type { BaseCreateDto, BaseUpdateDto, OrganizationCreateDto } from '@repositories/dtos';\nimport { Models } from '@lib/models.server';\n\nexport async function getBasesWithOrgs() {\n  return Models.base.getAllWithOrgs();\n}\n\nexport async function createBase(data: OrganizationCreateDto) {\n  await Models.org.create(data);\n}\n\nexport async function getBase(id: string) {\n  return Models.org.get(id);\n}\n\nexport async function updateBase(id: string, data: BaseUpdateDto) {\n  await Models.base.update(id, data);\n}\n","import { LinkButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { Attribute } from '@lib/utils';\nimport type { LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Outlet, useLoaderData } from '@remix-run/react';\nimport { requireUser } from '@services/user.server';\nimport { getBasesWithOrgs } from './.server/base.queries';\nimport PageHeader from '@components/ui/PageHeader';\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  await requireUser(request, { permissions: Attribute.BASES_READWRITE });\n  return json({ bases: await getBasesWithOrgs() }, {\n    headers: {\n      'X-Frame-Options': 'SAMEORIGIN',\n    },\n  });\n};\n\nconst BaseIndex = () => {\n  const { bases } = useLoaderData<typeof loader>();\n  return (\n    <>\n      <PageHeader pageTitle=\"Bases\" />\n      <LinkButton variant=\"green\" to={`/base/create`} className=\"mb-7\">\n        Add Base\n      </LinkButton>\n      <table className=\"text-left table-auto w-full border-neutral-300 border-1 mt-7\">\n        <thead>\n          <tr className=\"border-b border-black\">\n            <th className=\"pl-3\">Name</th>\n            <th>Organizations</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {bases.map((base) => (\n            <tr key={base.id} className=\"table-row border-b even:bg-zinc-50\">\n              <td className=\"py-4 pl-3\">{base.name}</td>\n              <td>{base.assignedOrganizations.length}</td>\n              <td className=\"text-right pr-5\">\n                <LinkButton variant=\"gray\" to={`/base/${base.uuid}/edit`}>\n                  Edit\n                </LinkButton>\n                <LinkButton\n                  variant=\"green\"\n                  className=\"ml-3\"\n                  to={`/base/${base.uuid}/add`}>\n                  Add Wing\n                </LinkButton>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <Outlet />\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default BaseIndex;\n","import { forwardRef } from 'react';\nimport type { FormProps } from '@remix-run/react';\nimport { Form as RemixForm } from '@remix-run/react';\n\ntype RemixFormFnProps = FormProps & React.RefAttributes<HTMLFormElement>;\n\ntype RemixFormFnRef = React.ForwardedRef<HTMLFormElement>;\n\nfunction RemixFormFn(props: RemixFormFnProps, ref: RemixFormFnRef) {\n  return (\n    <RemixForm {...props} ref={ref} />\n  );\n}\n\ntype FormRowFnProps = { spacing?: 'sm'|'md'|'lg'} & React.HTMLAttributes<HTMLDivElement>;\n\ntype FormRowFnRef = React.ForwardedRef<HTMLDivElement>;\n\nfunction FormRowFn(props: FormRowFnProps, ref: FormRowFnRef) {\n  return (\n    <div\n      ref={ref}\n      className={`${\n        props.className ? `${props.className} ` : ''\n      }mx-auto max-w-lg mb-5`}>\n      {props.children}\n    </div>\n  );\n}\n\nexport const Form = Object.assign(forwardRef(RemixFormFn), {\n  Row: forwardRef(FormRowFn),\n});\n","import React, { forwardRef } from 'react';\n\ntype LabelTextFnProps = {} & React.LabelHTMLAttributes<HTMLLabelElement>;\n\ntype LabelTextFnRef = React.ForwardedRef<HTMLLabelElement>;\n\nfunction LabelTextFn(props: LabelTextFnProps, ref: LabelTextFnRef) {\n  return (\n    <label\n      {...props}\n      ref={ref}\n      className=\"mb-1 block text-sm font-medium text-gray-700\"/>\n  );\n}\n\ntype LabelHeaderFnProps = {} & React.HTMLAttributes<HTMLHeadingElement>;\n\ntype LabelHeaderFnRef = React.ForwardedRef<HTMLHeadingElement>;\n\nfunction LabelHeaderFn(props: LabelHeaderFnProps, ref: LabelHeaderFnRef) {\n  return (\n    <h3\n      {...props}\n      ref={ref}\n      className=\"mb-2 block font-medium text-gray-700\" />\n  );\n}\n\nexport const Label = Object.assign(forwardRef(LabelTextFn), {\n  Heading: forwardRef(LabelHeaderFn),\n});\n","import { Dialog, DialogPanel, DialogTitle, Transition, TransitionChild } from '@headlessui/react';\nimport { useNavigate, useSearchParams } from '@remix-run/react';\nimport type { RefProp } from 'node_modules/@headlessui/react/dist/utils/render';\nimport type { Ref } from 'react';\nimport React, { forwardRef } from 'react';\nimport { ModalCancelBtn } from '../Buttons';\n\ntype ModalFnProps = {\n  open?: boolean;\n  onClose?: () => void;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nfunction ModalFn(\n  { children, open=true, onClose }: ModalFnProps,\n  ref: React.ForwardedRef<HTMLDivElement>\n) {\n  const navigate = useNavigate();\n  const handleOnClose = () => {\n    if (onClose) {\n      onClose();\n    }\n    else {\n      navigate(-1);\n    }\n  };\n  \n  return (\n    <Transition show={true} as={React.Fragment}>\n      <Dialog\n        as=\"div\"\n        className=\"relative z-10\"\n        open={open}\n        onClose={handleOnClose}\n        ref={ref}>\n        {/* <TransitionChild\n          as={React.Fragment}\n          enter=\"ease-in duration-300\"\n          enterFrom=\"opacity-0\"\n          enterTo=\"opacity-100\"\n          leave=\"ease-in duration-200\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\">\n          \n        </TransitionChild> */}\n        <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75\" />\n        <div className=\"fixed inset-0 z-10 w-screen overflow-y-auto\">\n          <div className=\"flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0\">\n            {/* <TransitionChild\n              as={React.Fragment}\n              enter=\"ease-out duration-300\"\n              enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n              enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\n              leave=\"ease-in duration-200\"\n              leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\n              leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\">\n              \n            </TransitionChild> */}\n            <DialogPanel className=\"relative transform rounded-lg bg-white text-left shadow-xl sm:my-8 sm:w-full sm:max-w-lg\">\n              {children}\n            </DialogPanel>\n          </div>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n}\n\ntype DialogBodyFnProps = React.HTMLAttributes<HTMLDivElement> & {\n  children: React.ReactNode;\n}\n\ntype DialogBodyFnRef = Ref<HTMLDivElement>\n\nconst DialogBodyFn = (props: DialogBodyFnProps, ref: DialogBodyFnRef) => (\n  <div ref={ref} className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4 mb-5\">\n    {props.children}\n  </div>\n);\n\ntype DialogTitleFnProps = RefProp<typeof DialogTitle> & {\n  className?: string;\n  children: React.ReactNode;\n};\n\ntype DialogTitleFnRef = Ref<HTMLHeadingElement>;\n\nconst DialogTitleFn = ({ className: userStyles, ...props }: DialogTitleFnProps, ref: DialogTitleFnRef) => {\n  // const { className, ...props } = props;\n  let styles = 'text-base rounded-t-lg font-semibold leading-6 text-gray-900 mb-3';\n  if (userStyles) {\n    styles = userStyles + ' ' + styles;\n  }\n  \n  return (\n    <DialogTitle\n      {...props}\n      ref={ref}\n      as=\"h3\"\n      className={styles}>\n      {props.children}\n    </DialogTitle>\n  );\n};\n\ntype ButtonsFnProps = {\n  hideCancelBtn?: boolean;\n  navigateToUrl?: string | number;\n  variant?: 'solid' | 'outline';\n} & React.ButtonHTMLAttributes<HTMLButtonElement>;\n\ntype ButtonsFnRef = React.ForwardedRef<HTMLButtonElement>;\n\n\nconst ButtonsFn = (allProps: ButtonsFnProps, ref: ButtonsFnRef) => {\n  let { hideCancelBtn, navigateToUrl, type, variant = 'solid', ...props } = allProps;\n  if (!navigateToUrl) navigateToUrl = -1;\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n\n\n  function performNavigate() {\n    if(typeof navigateToUrl === 'string') {\n      searchParams.delete('type');\n      navigate({\n        pathname: navigateToUrl,\n        search: searchParams.toString(),\n      });\n    } else {\n      navigate(navigateToUrl ?? -1);\n    }\n  }\n\n  function handleModalCancel() {\n    performNavigate();\n  }\n\n  function handleClick() {\n    if (type === 'button') {\n      performNavigate();\n    }\n  }\n\n  const baseStyles = 'inline-flex w-full justify-center rounded-md px-3 py-2 text-sm font-semibold shadow-sm disabled:cursor-not-allowed sm:ml-3 sm:w-auto';\n  let solidClasses = 'bg-green-600 hover:bg-green-500 disabled:bg-green-400 text-white';\n  let outlineClasses = 'text-green-600 hover:text-white border border-green-600 hover:bg-green-500 disabled:bg-neutral-400';\n  let classes = '';\n\n  if (props.value === 'delete') {\n    solidClasses = 'bg-red-600 text-white hover:bg-red-500 disabled:bg-red-400';\n    outlineClasses = 'outline-red-600 hover:bg-red-500';\n  }\n\n  if (variant === 'outline') {\n    classes = baseStyles + ' ' + outlineClasses;\n  } else if (variant === 'solid') {\n    classes = baseStyles + ' ' + solidClasses;\n  }\n\n  return (\n    <div className=\"bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6\">\n      <button\n        {...props}\n        ref={ref}\n        type={type}\n        onClick={handleClick}\n        name={props.name ?? '_action'}\n        className={classes}/>\n      <Transition show={!hideCancelBtn}>\n        <ModalCancelBtn onClick={handleModalCancel}>Cancel</ModalCancelBtn>\n      </Transition>\n    </div>\n  );\n};\n\nexport let Modal = Object.assign(forwardRef(ModalFn), {\n  Title: forwardRef(DialogTitleFn),\n  Body: forwardRef(DialogBodyFn),\n  Buttons: forwardRef(ButtonsFn),\n});\n","import { Form, Input, Label } from '@components/ui';\nimport { Modal } from '@components/ui/modals/Modal';\nimport { useLoaderData, useNavigate, useSearchParams } from '@remix-run/react';\nimport { useState } from 'react';\nimport { MoveType } from '@prisma/client';\nimport type { editUserMoveLoaderFn } from '@routes/_withNav+/_withSideBar+/_manage+/.server/move.queries';\n\ntype EditUserModalProps = {\n  cancelUrl?: string | number;\n  variant: 'edit' | 'start';\n};\n\nexport default function UserMoveModal({\n  cancelUrl,\n  variant,\n}: EditUserModalProps) {\n  const { user, filteredOrgs } = useLoaderData<typeof editUserMoveLoaderFn>();\n  const [searchParams, setSearch] = useSearchParams();\n  const navigate = useNavigate();\n\n  const moveTypeQuery = searchParams.get('type') ?? MoveType.PCS;\n\n  const [variantState] = useState(variant);\n\n  const isPcsMove =\n    moveTypeQuery === MoveType.PCS || user.moveType === MoveType.PCS;\n\n  const [ isNextOrg, setIsNextOrg ] = useState('');\n\n  const handleNextOrg = (event) => {\n    setIsNextOrg(event.target.value);\n  };\n\n  const isDisabled = isNextOrg !== 'default' ? false : true;\n\n  return (\n    <Modal\n      onClose={() => {\n        if (cancelUrl) {\n          if (typeof cancelUrl === 'string') {\n            searchParams.delete('type');\n            navigate( {\n              pathname: cancelUrl,\n              search: searchParams.toString(),\n            } );\n          }\n        } else {\n          navigate( -1 );\n        }\n      }}>\n      <Form method=\"post\">\n        <Input.Hidden name=\"userId\" value={user.id} />\n        <Input.Hidden name=\"currentOrgId\" value={user.currentOrg.uuid} />\n        <Modal.Body>\n          <Modal.Title>\n            {variantState === 'start' ? 'Start' : 'Edit'} move for {user.name}\n          </Modal.Title>\n          <Form.Row>\n            <Label htmlFor=\"pcsMoveType\">Type of Move</Label>\n            <Input.Radiobox\n              label=\"PCS\"\n              name=\"moveType\"\n              id=\"pcsMoveType\"\n              value={MoveType.PCS}\n              defaultChecked={isPcsMove}\n              onClick={() => {\n                setSearch((prev) => {\n                  prev.set('type', MoveType.PCS);\n                  return prev;\n                });\n              }}/>\n            <Input.Radiobox\n              label=\"PCA\"\n              name=\"moveType\"\n              id=\"pcaMoveType\"\n              value={MoveType.PCA}\n              defaultChecked={!isPcsMove}\n              onClick={() => {\n                setSearch((prev) => {\n                  prev.set('type', MoveType.PCA);\n                  return prev;\n                });\n              }}/>\n          </Form.Row>\n          <Form.Row>\n            <Label htmlFor=\"nextOrg\">Next Organization</Label>\n            <Input.Select\n              name=\"nextOrg\"\n              options={filteredOrgs}\n              valueKey=\"uuid\"\n              defaultValue={user.nextOrg?.uuid}\n              onChange={(event) => handleNextOrg(event)}/>\n          </Form.Row>\n        </Modal.Body>\n\n        <Modal.Buttons link=\"/org\" value=\"edit\" navigateToUrl={-1} disabled={isDisabled}>\n          {variantState === 'start' ? 'Start' : 'Save'}\n        </Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n}\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { Modal } from '@components/ui/modals';\nimport { Form, Input } from '@components/ui';\nimport { Attribute } from '@lib/utils';\nimport {\n  type ActionFunctionArgs,\n  json,\n  type LoaderFunctionArgs,\n} from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z from 'zod';\nimport { getBase } from './.server/base.queries';\nimport { createOrg } from './.server/org.queries';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  await requireUser(request, { permissions: Attribute.BASES_READ });\n  if (!params.baseId) throw new Error('baseId is required.');\n  return json({ base: await getBase(params.baseId) });\n};\n\nexport const action = async ({ request, params }: ActionFunctionArgs) => {\n  try {\n    const { id: loggedInUserId } = await requireUserAsObject(request, { permissions: Attribute.BASES_READWRITE });\n\n    if ( !params.baseId )\n      return jsonWithError(\n        { status: 'error', error: 'baseId is requried.' },\n        'There was an error.'\n      );\n    const paramsRegEx = new RegExp( params.baseId );\n\n    const addSchema = z.object( {\n      _action: z.string().regex( /add/ ),\n      baseId: z.string().regex( paramsRegEx ),\n      name: z.string(),\n      abbreviation: z.string(),\n      userId: z.string(),\n    } );\n\n    const { baseId, name, abbreviation, userId} = addSchema.parse( {\n      userId: loggedInUserId,\n      ...Object.fromEntries( await request.formData() ),\n    } );\n\n    \n    await createOrg( { baseId, name, abbreviation, userId, isWing: true , isBase: false, createdAt: new Date(Date.now()), createdBy: userId, updatedAt: new Date(Date.now()), updatedBy: userId} );\n\n    return redirectWithSuccess( `/base`, 'Organization Created.' );\n  } catch (e) {\n    console.error(e);\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', error: e.message },\n        'There was an error.'\n      );\n    }\n  }\n};\n\nconst AddOrgToBase = () => {\n  const { base } = useLoaderData<typeof loader>();\n\n  return (\n    <Modal>\n      <Form method=\"POST\">\n        <Modal.Body>\n          <Input.Hidden name=\"baseId\" value={base.uuid} />\n          <Modal.Title>New Wing at {base.name}</Modal.Title>\n          <div className=\"mb-3\">\n            <label\n              htmlFor=\"name\"\n              className=\"mb-2 block font-medium text-gray-700\">\n              Name:\n            </label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              className=\"mt-1 h-10 w-full rounded border bg-gray-50 px-4 text-slate-950\"/>\n            <span className=\"text-sm\">ex: 60th Air Mobility Wing</span>\n          </div>\n          <div className=\"mb-3\">\n            <label\n              htmlFor=\"abbreviation\"\n              className=\"mb-2 block font-medium text-gray-700\">\n              Abbreviation:\n            </label>\n            <input\n              type=\"text\"\n              id=\"abbreviation\"\n              name=\"abbreviation\"\n              className=\"mt-1 h-10 w-full rounded border bg-gray-50 px-4 text-slate-950\"/>\n            <span className=\"text-sm\">ex: 60AMW</span>\n          </div>\n        </Modal.Body>\n        <Modal.Buttons link=\"/base\" value=\"add\">Add</Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default AddOrgToBase;\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { Form, Input, Label } from '@components/ui';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useLoaderData, useParams } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { getBase, updateBase } from './.server/base.queries';\nimport { Modal } from '@components/ui/modals';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  await requireUser(request, {permissions: Attribute.BASES_READWRITE });\n  if (!params.baseId) throw new Error('Base ID is required.');\n  return json({ base: await getBase(params.baseId) });\n};\n\nexport const action = async ({\n  request,\n  params,\n}: ActionFunctionArgs) => {\n  const createSchema = z.object({\n    id: z.string(),\n    name: z.string(),\n  });\n\n  try {\n    const { id: userId } = await requireUserAsObject(request, { options: {redirectOnFailure: false}, permissions: Attribute.BASES_READWRITE });\n\n    const formData = await request.formData();\n    const { id, name } = createSchema.parse(\n      Object.fromEntries(formData.entries())\n    );\n\n    if (id !== params.baseId) throw new Error('ids do not match.');\n\n    const updatedAt = new Date(Date.now());\n\n    await updateBase(id, { name, updatedBy: userId, updatedAt });\n    return redirectWithSuccess('/base', 'Base saved.');\n  } catch (e) {\n    console.error(e);\n    if (e instanceof Error) {\n      if (e instanceof ZodError) {\n        return jsonWithError({\n          status: 'error',\n          message: 'validation error',\n          errors: e.errors,\n        }, 'There were validation errors.');\n      }\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      return jsonWithError({ status: 'error', message: e.message }, 'There was an error.');\n    }\n  }\n};\n\nconst EditBase = () => {\n  const { baseId } = useParams();\n  const { base } = useLoaderData<typeof loader>();\n\n  return (\n    <Modal>\n      <Form method=\"post\">\n        <Input.Hidden name=\"id\" value={baseId} />\n        <Modal.Body>\n          <Modal.Title>Edit Base</Modal.Title>\n          <Form.Row>\n            <Label htmlFor=\"name\">Name</Label>\n            <Input.Text\n              name=\"name\"\n              defaultValue={base.name} />\n          </Form.Row>\n        </Modal.Body>\n        <Modal.Buttons link=\"/base\">Save</Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default EditBase;\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { Form, Input, Label } from '@components/ui';\nimport { TextInput } from '@components/ui/Input';\nimport { Modal } from '@components/ui/modals';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs } from '@remix-run/node';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { createBase } from './.server/base.queries';\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  await requireUser(request);\n  const updateSchema = z.object({\n    name: z.string(),\n    abbreviation: z.string(),\n  });\n\n  try {\n    const {id: userId } = await requireUserAsObject(request, {\n      options: { redirectOnFailure: false },\n      permissions: Attribute.BASES_READWRITE,\n    });\n\n    const formData = await request.formData();\n    const { name, abbreviation } = updateSchema.parse(Object.fromEntries(formData.entries()));\n\n    const updatedAt = new Date(Date.now());\n    const createdAt = updatedAt;\n    await createBase({\n      userId,\n      name,\n      abbreviation,\n      isWing: false,\n      isBase: true,\n      updatedBy: userId,\n      updatedAt,\n      createdAt,\n      createdBy: userId,\n    });\n    return redirectWithSuccess('/base', 'Base saved.');\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      if (e instanceof ZodError) {\n        return jsonWithError(\n          { status: 'error', message: 'validation error', errors: e.errors },\n          'There was an error adding the base.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', message: e.message },\n        'There was an error adding the base.'\n      );\n    }\n  }\n};\n\nconst EditBase = () => (\n  <Modal>\n    <Form method=\"post\">\n      <Modal.Body>\n        <Modal.Title>Add a new Base</Modal.Title>\n        <Form.Row>\n          <Label htmlFor=\"name\">Name:</Label>\n          <Input.Text\n            name=\"name\" />\n          <span className=\"text-gray-500 text-sm\">ex: Travis AFB</span>\n        </Form.Row>\n        <Form.Row>\n          <Label htmlFor=\"abbreviation\">Abbreviation:</Label>\n          <Input.Text\n            name=\"abbreviation\" />\n          <span className=\"text-gray-500 text-sm\">ex: TAFB</span>\n        </Form.Row>\n      </Modal.Body>\n      <Modal.Buttons link=\"/base\">Add</Modal.Buttons>\n    </Form>\n  </Modal>\n);\nexport const ErrorBoundary = ErrorReport;\nexport default EditBase;\n","import { LinkButton } from '@components/ui/Buttons';\nimport { Transition } from '@headlessui/react';\nimport {\n  MinusIcon,\n  PencilSquareIcon,\n  PlusIcon,\n  XCircleIcon,\n  PlusCircleIcon,\n  BuildingOfficeIcon,\n  GlobeAmericasIcon,\n} from '@heroicons/react/20/solid';\nimport type { OrganizationWithChildren } from '@repositories/organization.server';\nimport { useRef, useState } from 'react';\n\nfunction getBackgroundClass(length: number): string {\n  const classes = [\n    'bg-zinc-400', // Default white for length 0\n    'bg-slate-200',\n    'bg-slate-300',\n    'bg-slate-400',\n    'bg-slate-100',\n    'bg-slate-200',\n    'bg-slate-300',\n    'bg-slate-400',\n    // Add more colors as needed\n  ];\n  return classes[length] || 'bg-zinc-400'; // Default to white if length exceeds the defined classes\n}\n\nexport default function OrgTreeView({\n  tree,\n}: {\n  tree: OrganizationWithChildren;\n}) {\n  const [minimized, setMinimized] = useState(tree?.depth !== 0);\n  const divRef = useRef(null);\n\n  console.log('tree: ', tree);\n\n  if (!tree) return null;\n\n  return (\n    <div\n      className={`${\n        tree.depth > 1\n          ? 'pl-9 before:absolute before:top-0 before:start-5 before:w-0.5 before:-ms-px before:h-full before:bg-zinc-400 dark:before:bg-neutral-700'\n          : 'pl-0'\n      }`}\n    >\n      <div\n        className={`flex justify-start ring-1 ring-slate-500 items-center py-1.5 ${getBackgroundClass(tree.depth)} ${tree.depth === 0 ? 'rounded-t-lg' : 'mb-1'}`}\n      >\n        <div\n          className={`flex items-center justify-between w-full ${\n            tree.children && tree.depth > 0\n              ? 'hover:cursor-pointer'\n              : 'cursor-default'\n          }`}\n        >\n          <div\n            className=\"flex items-center flex-grow pl-3\"\n            onClick={() => {\n              if (tree.children && tree.depth > 0) setMinimized(!minimized);\n            }}\n          >\n            {tree.depth > 0 && (\n              <div className=\"size-5\">\n                {tree.children ? (\n                  <>\n                    {!minimized && <MinusIcon className=\"size-5\" />}\n                    {minimized && <PlusIcon className=\"size-5\" />}\n                  </>\n                ) : (\n                  <span> </span>\n                )}\n              </div>\n            )}\n            <div className={`py-1 ml-3 inline-flex`} ref={divRef}>\n              {tree?.name}\n            </div>\n            <div className=\"pl-3 text-slate-600\">\n              {tree?.isBase ? (\n            //    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"24\" viewBox=\"0 0 48 24\">\n               \n            //    <g transform=\"translate(0, 0)\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n            //      <path d=\"M15 19v-2a3 3 0 0 0 -6 0v2a1 1 0 0 1 -1 1h-4a1 1 0 0 1 -1 -1v-14h4v3h3v-3h4v3h3v-3h4v14a1 1 0 0 1 -1 1h-4a1 1 0 0 1 -1 -1z\"/>\n            //      <path d=\"M3 11l18 0\"/>\n            //    </g>\n             \n            //    <g transform=\"translate(16, 6) scale(0.8)\">\n            //      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\n            //      <path stroke=\"currentColor\" stroke-width=\"2\" d=\"M11.884 2.007l.114 -.007l.118 .007l.059 .008l.061 .013l.111 .034a.993 .993 0 0 1 .217 .112l.104 .082l.255 .218a11 11 0 0 0 7.189 2.537l.342 -.01a1 1 0 0 1 1.005 .717a13 13 0 0 1 -9.208 16.25a1 1 0 0 1 -.502 0a13 13 0 0 1 -9.209 -16.25a1 1 0 0 1 1.005 -.717a11 11 0 0 0 7.531 -2.527l.263 -.225l.096 -.075a.993 .993 0 0 1 .217 -.112l.112 -.034a.97 .97 0 0 1 .119 -.021z\"/>\n            //    </g>\n            //  </svg>\n            <svg  xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-map-2\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12 18.5l-3 -1.5l-6 3v-13l6 -3l6 3l6 -3v7.5\" /><path d=\"M9 4v13\" /><path d=\"M15 7v5.5\" /><path d=\"M21.121 20.121a3 3 0 1 0 -4.242 0c.418 .419 1.125 1.045 2.121 1.879c1.051 -.89 1.759 -1.516 2.121 -1.879z\" /><path d=\"M19 18v.01\" /></svg>\n              ) : (\n                ''\n              )}\n              {tree?.isWingLevel ? (\n                <svg  xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-users-group\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M10 13a2 2 0 1 0 4 0a2 2 0 0 0 -4 0\" /><path d=\"M8 21v-1a2 2 0 0 1 2 -2h4a2 2 0 0 1 2 2v1\" /><path d=\"M15 5a2 2 0 1 0 4 0a2 2 0 0 0 -4 0\" /><path d=\"M17 10h2a2 2 0 0 1 2 2v1\" /><path d=\"M5 5a2 2 0 1 0 4 0a2 2 0 0 0 -4 0\" /><path d=\"M3 13v-1a2 2 0 0 1 2 -2h2\" /></svg>\n              ) : (\n                ''\n              )}\n            </div>\n          </div>\n          <div className=\"flex gap-x-2 pr-3\">\n            {!tree.children && (\n              <LinkButton\n                to={`/org/${tree.uuid}/delete`}\n                variant=\"red\"\n                className=\"flex items-center gap-1\"\n              >\n                <XCircleIcon className=\"size-5\" />\n                Delete\n              </LinkButton>\n            )}\n            {/* <LinkButton\n              to={`/org/create?org=${tree.uuid}`}\n              variant=\"green\"\n              className=\"flex gap-1 items-center line-clamp-1\"\n            >\n              <PlusCircleIcon className=\"size-5\" />\n              Add Org\n            </LinkButton> */}\n            {tree.uuid !== 'DAF' && (\n              <LinkButton\n                to={`/org/${tree.uuid}/edit`}\n                className=\"flex gap-1 items-center\"\n              >\n                <PencilSquareIcon className=\"size-5\" />\n                Edit\n              </LinkButton>\n            )}\n          </div>\n        </div>\n      </div>\n      <Transition show={!minimized}>\n        <div className=\"relative transition ease-in-out data-[closed]:opacity-0 data-[enter]:duration-100 data-[leave]:duration-300\">\n          {tree.children &&\n            tree.children?.length > 0 &&\n            tree?.children.map((child) => {\n              if (!child) return null;\n              return <OrgTreeView tree={child} key={child?.uuid} />;\n            })}\n        </div>\n      </Transition>\n    </div>\n  );\n}\n","import OrgTreeView from '@components/OrgTreeView';\nimport { LinkButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport PageHeader from '@components/ui/PageHeader';\nimport { useManageLayoutData } from '@lib/hooks/useMatchesData';\nimport { json, type LoaderFunctionArgs } from '@remix-run/node';\nimport { Outlet } from '@remix-run/react';\n\nexport const loader = async () => {\n  return json({}, {\n    headers: {\n      'X-Frame-Options': 'SAMEORIGIN',\n    },\n  });\n};\n\nconst OrgIndex = () => {\n  const { parentNode } = useManageLayoutData();\n\n  return (\n    <>\n      <PageHeader pageTitle=\"Manage Organizations\" />\n      <div className=\"mb-7 text-center inline-flex\">\n        <LinkButton variant=\"green\" to={`/org/create`}>\n          Add Organization\n        </LinkButton>\n      </div>\n      <section className=\"bg-zinc-200 relative mx-10\">\n        <OrgTreeView tree={parentNode} />\n      </section>\n      <Outlet />\n    </>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default OrgIndex;\n\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { Input, Label, Form } from '@components/ui';\nimport { Modal } from '@components/ui/modals';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useLoaderData, useParams } from '@remix-run/react';\nimport { requireUser } from '@services/user.server';\nimport React from 'react';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { deleteOrg, getOrg } from './.server/org.queries';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  await requireUser(request, { permissions: Attribute.ORGS_READWRITEDELETE });\n  const { orgId } = params;\n  if (!orgId) throw json({ status: 'error', error: 'orgId required' });\n  return json({ org: await getOrg(orgId) });\n};\n\n// TODO: Add try catch\nexport async function action({ request, params }: ActionFunctionArgs) {\n  const orgDeleteSchema = z.object({\n    orgId: z.string().min(1),\n  });\n\n  try {\n    await requireUser(request, {\n      options: { redirectOnFailure: false },\n      permissions: Attribute.ORGS_READWRITEDELETE,\n    });\n\n    // const { orgId } = orgDeleteSchema.parse(\n    //   Object.fromEntries((await request.formData()).entries())\n    // );\n    const { orgId } = params;\n\n    await deleteOrg(orgId);\n\n    return redirectWithSuccess('/org', 'Organization Deleted!');\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      if (e instanceof ZodError) {\n        return jsonWithError(\n          { status: 'error', message: 'validation error', errors: e.errors },\n          'There was an error removing the base.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', message: e.message },\n        'There was an error removing the base.'\n      );\n    }\n  }\n}\n\nconst DeleteOrgDefaultPage = () => {\n  const { org } = useLoaderData<typeof loader>();\n\n  return (\n    <Modal>\n      <Form method=\"POST\">\n        <Input.Hidden name=\"orgId\" value={org?.uuid} />\n        <Modal.Body>\n          <Modal.Title>Delete Organization:</Modal.Title>\n          <Form.Row>\n            <p>\n              Please enter\n              <code className=\"bg-zinc-300 p-1 m-1 rounded-lg py-1\">\n                {org.name}\n              </code>\n              below to confirm the deletion.\n            </p>\n          </Form.Row>\n          <Form.Row>\n            <Label htmlFor=\"orgNameconf1\">Type Organization Name:</Label>\n            <Input.Text\n              type=\"text\"\n              id=\"orgNameconf1\"\n              pattern={org.name}\n              required/>\n          </Form.Row>\n          <Form.Row>\n            <Input.Checkbox\n              name=\"confirm\"\n              label=\"Confirm Organization Deletion\"\n              required/>\n          </Form.Row>\n        </Modal.Body>\n        <Modal.Buttons link=\"/org\" value=\"delete\">\n          Delete\n        </Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default DeleteOrgDefaultPage;\n","import React, { createContext, useContext, useState, useRef } from 'react';\n\ninterface BreadcrumbsContextType {\n  manualSet: boolean;\n  setManualSet: (value: boolean) => void;\n  orgId: React.RefObject<string>;\n}\n\nconst BreadcrumbsContext = createContext<BreadcrumbsContextType | undefined>(\n  undefined\n);\n\nexport function BreadcrumbsProvider({\n  children,\n  initialOrgId,\n}: {\n  children: React.ReactNode;\n  initialOrgId: string;\n}) {\n  const [manualSet, setManualSet] = useState(false);\n  const orgId = useRef(initialOrgId);\n\n  const value = React.useMemo(\n    () => ({\n      manualSet,\n      setManualSet,\n      orgId,\n    }),\n    [manualSet]\n  );\n\n  return (\n    <BreadcrumbsContext.Provider value={value}>\n      {children}\n    </BreadcrumbsContext.Provider>\n  );\n}\n\nexport function useBreadcrumbs() {\n  const context = useContext(BreadcrumbsContext);\n  if (context === undefined) {\n    throw new Error('useBreadcrumbs must be used within a BreadcrumbsProvider');\n  }\n  return context;\n}\n","import type { OrganizationWithChildren } from '@repositories/organization.server';\n\nexport function getDisplayName(tree?: OrganizationWithChildren): string {\n  if (!tree) return '';\n  return tree.depth <= 1 ? tree.name : (tree.abbreviation || tree.name);\n}","import React from 'react';\n\ninterface OrganizationSelectProps {\n  selected: string;\n  onChange: (value: string) => void;\n  children: React.ReactNode;\n}\n\nexport function OrganizationSelect({ selected, onChange, children }: OrganizationSelectProps) {\n  return (\n    <select\n      onChange={(e) => onChange(e.target.value)}\n      value={selected}\n      className=\"rounded-md w-full border-gray-300 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50\">\n      <option value=\"\">Next Organization</option>\n      {children}\n    </select>\n  );\n}","import React from 'react';\n\nexport function SelectOption({ children, value }: { children: React.ReactNode; value: string }) {\n  return <option value={value}>{children}</option>;\n}","import React, { useState, useCallback, useEffect } from 'react';\nimport type { CrumbProps } from '../types';\nimport { useBreadcrumbs } from '../context';\nimport { getDisplayName } from '../utils/getDisplayName';\nimport { OrganizationSelect } from './OrganizationSelect';\nimport { SelectOption } from './SelectOption';\n\nexport function Crumb({ tree, setNewParent, ancestors }: CrumbProps) {\n  const [selected, setSelected] = useState('');\n  const { manualSet, setManualSet, orgId } = useBreadcrumbs();\n\n  const handleClick = useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    if (setManualSet) {\n      setManualSet(true);\n    }\n    if (selected) {\n      setSelected('');\n      setNewParent(tree?.uuid ?? '');\n    }\n  }, [selected, setManualSet, setNewParent, tree?.uuid]);\n\n  const handleSelectChange = useCallback((value: string) => {\n    setSelected(value);\n    setNewParent(value);\n  }, [setNewParent]);\n\n  useEffect(() => {\n    if (!manualSet && ancestors.length > 0 && tree?.children) {\n      const currentParent = tree.children.find((child) =>\n        ancestors.includes(child.uuid)\n      );\n\n      if (currentParent && currentParent.uuid !== orgId?.current) {\n        setSelected(currentParent.uuid);\n        setNewParent(currentParent.uuid);\n      } else if (!currentParent) {\n        setSelected('');\n      }\n    }\n  }, [ancestors, tree, manualSet, orgId?.current, setNewParent]);\n\n  const filteredChildren = tree?.children?.filter(\n    (child) => child.uuid !== orgId?.current\n  );\n\n  const selectedChild = tree?.children?.find((child) => child.uuid === selected);\n\n  return (\n    <>\n      <div\n        onClick={handleClick}\n        className={`${\n          tree?.children && selected\n            ? 'text-sm text-zinc-500 hover:text-red-800 hover:cursor-pointer'\n            : 'text-base'\n        } inline-flex`}>\n        {getDisplayName(tree)}\n      </div>\n\n      {tree?.children && <span className=\"text-zinc-600 text-xs\">{' / '}</span>}\n\n      {selected && (\n        <Crumb\n          setNewParent={setNewParent}\n          tree={selectedChild}\n          ancestors={ancestors}/>\n      )}\n\n      {filteredChildren && filteredChildren?.length > 0 && (\n        <div className=\"mt-2\">\n          {!selected && (\n            <OrganizationSelect\n              selected={selected}\n              onChange={handleSelectChange}>\n              {filteredChildren.map((child) => (\n                <SelectOption key={child.uuid} value={child.uuid}>\n                  {child.name}\n                </SelectOption>\n              ))}\n            </OrganizationSelect>\n          )}\n          {selected && selected !== 'DAF' && <div className=\"ml-1\" />}\n        </div>\n      )}\n    </>\n  );\n}","import { BreadcrumbsProvider } from '../context';\nimport { Crumb } from './Crumb';\nimport type { BreadcrumbProps } from '../types';\n\nfunction Breadcrumbs({ orgId, ...props }: BreadcrumbProps) {\n  return (\n    <BreadcrumbsProvider initialOrgId={orgId}>\n      <Crumb {...props} />\n    </BreadcrumbsProvider>\n  );\n}\n\nexport default Breadcrumbs;","import { useMemo } from 'react';\n\nexport default function useIsAdmin<R extends { abbreviation: string }>(roles: Array<R>) {\n  const isSuperAdmin = useMemo(\n    () => !!roles.find((role) => role.abbreviation === 'SUPERADMIN'),\n    [roles]\n  );\n\n  const isAdmin = useMemo(\n    () =>\n      !!roles.find(\n        (role) =>\n          role.abbreviation === 'SUPERADMIN' || role.abbreviation === 'ADMIN'\n      ),\n    [roles]\n  );\n\n  return { isSuperAdmin, isAdmin };\n}\n\nexport function useIsCSS(roles: Array<{ abbreviation: string }>) {\n\n  const isCSS = useMemo(\n    () =>\n      !!roles.find(\n        (role) =>\n          role.abbreviation === 'CSS'\n      ),\n    [roles]\n  );\n\n  return { isCSS };\n}\n","import { Breadcrumbs } from '@components/OrgBreadcrumbs';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { Input, InputRow, TextInput, TextLabel } from '@components/ui/Input';\nimport { Modal } from '@components/ui/modals';\nimport { useManageLayoutData } from '@lib/hooks/useMatchesData';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useFetcher, useLoaderData } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport React, { useState } from 'react';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { getAllOrgs, getOrg, moveOrgs, updateOrg } from './.server/org.queries';\nimport { Models } from '@lib/models.server';\nimport useIsAdmin from '@lib/hooks/useIsAdmin';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  const { roles: userRoles } = await requireUserAsObject(request, { permissions: Attribute.ORGS_READWRITE });\n  const { orgId } = params;\n  if (!orgId) throw json({ status: 'error', error: 'orgId is required.' });\n  const org = await getOrg(orgId);\n  const parent = await getAllOrgs();\n  const ancestors = await Models.org.findAncestors(orgId);\n  const ancestorsIds = ancestors.map(org => org.uuid);\n  \n  return json({ org, parent, ancestors: ancestorsIds, userRoles});\n};\n\n// TODO: Add try catch\nexport async function action({ request }: ActionFunctionArgs) {\n  const schema = z.object({\n    orgName: z.string().min(3).max(80),\n    newParent: z.string().optional(),\n    moveOrg: z.preprocess((value) => value === 'on', z.boolean()),\n    isWingLevel: z.preprocess((value) => value === 'on', z.boolean()),\n    orgId: z.string().min(3),\n    abbreviation: z.string(),\n    currentParent: z.string().optional(),\n  });\n  try {\n    const { id: userId } = await requireUserAsObject(request, {\n      permissions: Attribute.ORGS_READWRITE,\n    });\n\n    const { orgId, orgName, abbreviation, newParent, moveOrg, isWingLevel, currentParent } = schema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n    \n    if(currentParent && newParent === currentParent){\n      return jsonWithError(\n        { status: 'error', error: 'Validation Error.' },\n        `Requested to move organization, but didn't change location.`\n      );\n    }\n\n    if (moveOrg) {\n      if (!newParent) return jsonWithError({ status: 'error', error: 'Parent org cannot be blank.'},\n        'Parent org must be selected.'\n      );\n\n      if (newParent === 'DAF') return jsonWithError(\n        { status: 'error', error: 'Parent Org cannot be Department of the Airforce.' },\n        'Parent Org cannot be Department of the Airforce.'\n      );\n\n      await moveOrgs(orgId, newParent);\n    }\n    \n    await updateOrg(orgId, {\n      userId,\n      orgName,\n      abbreviation,\n      isWingLevel,\n    });\n\n    return redirectWithSuccess('/org', 'Organization Saved!');\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      if (e instanceof ZodError) {\n        return jsonWithError(\n          { status: 'error', message: 'validation error', errors: e.errors },\n          'There was an error saving the org.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', message: e.message },\n        'There was an error saving the org.'\n      );\n    }\n  }\n}\n\nconst isNameValid = (val?: string | number | readonly string[] | undefined): boolean => {\n  if (typeof val === 'string') {\n    return val.trim().length > 2;\n  }\n  return false;\n};\n\nconst EditOrgDefaultPage = () => {\n  const { org, ancestors, userRoles} = useLoaderData<typeof loader>();\n  const [moveOrgCheck, setMoveOrgCheck] = useState(false);\n  const [ isWingLevel, setIsWingLevel ] = useState(org.isWingLevel);\n  const { parentNode } = useManageLayoutData();\n  const [newParent, setNewParent] = useState('');\n  const [ orgNameState, setOrgNameState] = useState(org.name); \n  const fetcher = useFetcher();\n\n  const {isAdmin} = useIsAdmin(userRoles);\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setOrgNameState(e.target.value);\n  };\n  \n  return (\n    <Modal>\n      <fetcher.Form onSubmit={(e) => {\n        e.preventDefault();\n        const data = new FormData(e.currentTarget);\n        for (let [key, val ] of data.entries()) {\n          data.set(key, val.toString().trim());\n        }\n        console.log(data);\n        console.log(e.currentTarget);\n        fetcher.submit(data, { method: 'POST'});\n      }}>\n        <div className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4 mb-5\">\n          <Modal.Title>Edit Organization:</Modal.Title>\n          {(!org.isBase && parentNode.uuid !== org.uuid )&& (\n            <>\n              <Input.Checkbox\n                label=\"Relocate Org?\"\n                name=\"moveOrg\"\n                checked={moveOrgCheck}\n                onChange={() => setMoveOrgCheck(!moveOrgCheck)}></Input.Checkbox>\n              {moveOrgCheck && (\n                <>\n                  <InputRow className=\"pb-0\">\n                    <Breadcrumbs tree={parentNode} setNewParent={setNewParent} ancestors={ancestors} orgId={org.uuid}/>\n                    <input type=\"hidden\" value={newParent} name=\"newParent\" />\n                  </InputRow>\n                  <InputRow>\n                    <input\n                      type=\"hidden\"\n                      value={org.parentOrgId ?? ''}\n                      name=\"currentParent\"/>\n                  </InputRow>\n                </>\n              )}\n              {isAdmin && <Input.Checkbox label=\"Is Wing-level Org?\" name=\"isWingLevel\" checked={isWingLevel} onChange={() => setIsWingLevel(!isWingLevel)}></Input.Checkbox>}\n            </>\n          )}\n          <InputRow>\n            <input type=\"hidden\" name=\"orgId\" value={org.uuid}></input>\n            <Input.TextWithValidation id=\"orgName\" name=\"orgName\" label=\"New Name:\" validationFn={isNameValid} value={orgNameState} onChange={handleNameChange} validationMsg=\"Name requires at least 3 characters\"/>\n          </InputRow>\n          <InputRow>\n            <TextLabel htmlFor=\"abbreviation\">Abbreviation:</TextLabel>\n            <TextInput name=\"abbreviation\" defaultValue={org.abbreviation} />\n          </InputRow>\n        </div>\n        <Modal.Buttons link=\"/org\" value=\"edit\">\n          Save\n        </Modal.Buttons>\n      </fetcher.Form>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default EditOrgDefaultPage;\n","import { Breadcrumbs } from '@components/OrgBreadcrumbs';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { InputRow, TextInput, TextLabel, Input } from '@components/ui/Input';\nimport { Modal } from '@components/ui/modals';\nimport usePermissions from '@lib/hooks/usePermissions';\nimport { Attribute, RolePermissions } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Form, useLoaderData } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport React, { useEffect, useState } from 'react';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z from 'zod';\nimport { createOrg } from './.server/org.queries';\nimport { useRootLayoutData } from '@lib/hooks/useMatchesData';\nimport { Models } from '@lib/models.server';\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  await requireUser(request, {\n    permissions: Attribute.ORGS_READWRITE,\n  });\n\n  const searchQuery = new URL(request.url).searchParams;\n\n  let orgParam = searchQuery.get('org');\n\n  const ancestors = await Models.org.findAncestors(orgParam ?? '');\n  const ancestorStrings = ancestors.map((org) => org.uuid);\n  return json({ ancestors: ancestorStrings });\n};\n\nexport async function action({ request }: ActionFunctionArgs) {\n  try {\n    const orgCreateSchema = z.object({\n      orgName: z.string().min(3).max(80),\n      orgId: z.string().optional(),\n      baseId: z.string().optional(),\n      isWing: z.preprocess((value) => value === 'on', z.boolean()),\n      abbreviation: z.string(),\n      isOrg: z.preprocess((value) => value === 'on', z.boolean()),\n      isBase: z.preprocess((value) => value === 'on', z.boolean()),\n    });\n\n    const {\n      orgId: parentOrgId,\n      orgName: name,\n      abbreviation,\n      baseId,\n      isWing,\n      isBase,\n    } = orgCreateSchema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n    let userId;\n    if (isBase) {\n      // require Attributes.BASES_READWRITE\n      ({ id: userId } = await requireUserAsObject(request, {\n        permissions: Attribute.BASES_READWRITE,\n        options: { redirectOnFailure: false },\n      }));\n    } else {\n      ({ id: userId } = await requireUserAsObject(request, {\n        permissions: Attribute.ORGS_READWRITE,\n        options: { redirectOnFailure: false },\n      }));\n    }\n\n    if (!isBase && parentOrgId === 'DAF')\n      return jsonWithError(\n        { status: 'error', error: 'organization location required' },\n        'Organization can not be at base level.'\n      );\n\n    if (!isWing && parentOrgId === 'default')\n      return jsonWithError(\n        { status: 'error', error: 'parent org is required' },\n        'There was error creating the organization.'\n      );\n\n    if (!userId)\n      return jsonWithError(\n        { status: 'error', error: 'user required' },\n        'There was error creating the organization.'\n      );\n\n    await createOrg({\n      userId,\n      parentOrgId,\n      name,\n      baseId: baseId,\n      abbreviation,\n      isWing,\n      isBase,\n      createdAt: new Date(Date.now()),\n      createdBy: userId,\n      updatedAt: new Date(Date.now()),\n      updatedBy: userId,\n    });\n  } catch (e) {\n    console.error(e);\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', message: 'Authorization Error' },\n          'Authorization Error.'\n        );\n      }\n\n      return jsonWithError(\n        { status: 'error', message: 'There was an error.' },\n        'There was an error.'\n      );\n    }\n  }\n  return redirectWithSuccess('/org', 'Organization Created Successfully!');\n}\n\ntype AdminRowProps = {\n  baseIsChecked: boolean;\n  setBaseIsChecked: Function;\n  orgChecked: boolean;\n  userPermissions: any;\n  ancestors: string[];\n  parentNode: any;\n};\n\nfunction AdminRow({\n  baseIsChecked,\n  setBaseIsChecked,\n  userPermissions,\n  ancestors,\n  parentNode,\n}: AdminRowProps) {\n  const checkPermissions = usePermissions();\n  const [orgIsChecked, setOrgIsChecked] = useState(false);\n  const [newParent, setNewParent] = useState(parentNode.uuid);\n\n  useEffect(() => {\n    setOrgIsChecked(!checkPermissions(userPermissions, RolePermissions.ADMIN));\n  }, [userPermissions, checkPermissions]);\n\n  return (\n    <div className=\"\">\n      {checkPermissions(userPermissions, RolePermissions.ADMIN) && (\n        <InputRow className=\"inline-flex w-full justify-around px-10\">\n          <Input.Radiobox\n            name=\"isBase\"\n            label=\"Create New Base\"\n            checked={baseIsChecked}\n            onChange={() => {\n              setBaseIsChecked(!baseIsChecked);\n              setOrgIsChecked(false);\n            }}/>\n          <Input.Radiobox\n            name=\"isOrg\"\n            label=\"Create New Org\"\n            checked={orgIsChecked}\n            onChange={() => {\n              setOrgIsChecked(!orgIsChecked);\n              setBaseIsChecked(false);\n            }}/>\n        </InputRow>\n      )}\n      {orgIsChecked && (\n        <>\n          <InputRow className=\"\">\n            <input type=\"hidden\" value={newParent} name=\"orgId\"></input>\n            <TextLabel htmlFor=\"orgId\">Where is it located?</TextLabel>\n            <Breadcrumbs\n              tree={parentNode}\n              setNewParent={setNewParent}\n              ancestors={ancestors} />\n          </InputRow>\n          <InputRow>\n            <Input.Checkbox label=\"Is this a Wing-level Organization?\" name=\"isWing\" />\n          </InputRow>\n        </>\n      )}\n    </div>\n  );\n}\n\nconst CreateOrgDefaultPage = () => {\n  const { parentNode, permissions: userPermissions } = useRootLayoutData();\n  const [baseIsChecked, setBaseIsChecked] = useState(true);\n  const checkPermissions = usePermissions();\n  const { ancestors } = useLoaderData<typeof loader>();\n\n  return (\n    <Modal>\n      <Form method=\"post\">\n        <div className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4 mb-5\">\n          <Modal.Title>Create Organization</Modal.Title>\n          <AdminRow\n            baseIsChecked={baseIsChecked}\n            setBaseIsChecked={setBaseIsChecked}\n            userPermissions={userPermissions}\n            orgChecked={true}\n            ancestors={ancestors}\n            parentNode={parentNode}/>\n          <InputRow>\n            <TextLabel htmlFor=\"orgName\">\n              {baseIsChecked &&\n              checkPermissions(userPermissions, RolePermissions.ADMIN)\n                ? 'Base Name: '\n                : 'Organization Name: '}\n            </TextLabel>\n            <TextInput\n              id=\"orgName\"\n              name=\"orgName\"\n              maxLength={50}\n              pattern=\"^.{3,}$\"\n              required/>\n          </InputRow>\n          <InputRow>\n            <TextLabel htmlFor=\"abbreviation\">Abbreviation:</TextLabel>\n            <TextInput id=\"abbreviation\" name=\"abbreviation\" required />\n          </InputRow>\n        </div>\n        <Modal.Buttons link=\"/org\" value=\"create\">\n          Create\n        </Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default CreateOrgDefaultPage;\n","import { LinkButton, PlayButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport PageHeader from '@components/ui/PageHeader';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useFetcher, useLoaderData } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport { getArchivedMembers, getCompletedMembers, getOrgBeingViewed } from './.server/org.queries';\nimport { ArchiveBoxIcon, ArrowUpOnSquareStackIcon, CloudArrowDownIcon, DocumentCheckIcon, EyeIcon } from '@heroicons/react/24/outline';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithSuccess, jsonWithError } from 'remix-toast';\nimport { z } from 'zod';\nimport { resumeChecklist } from '../.server/tasks.queries';\nimport { ChecklistStatus } from '@prisma/client';\nimport { Input } from '@components/ui';\nimport { Badge } from '@components/ui/Badge';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  const { currentOrg } = await requireUserAsObject(request, {\n    permissions: Attribute.MOVES_READ,\n  });\n\n  const { orgId } = params;\n\n  if (!orgId) throw new Error('org id is required.');\n\n  const archived = await getArchivedMembers(orgId);\n  const completed = await getCompletedMembers(orgId);\n  const { orgBeingViewed } = await getOrgBeingViewed({\n    defaultOrgId: currentOrg.uuid,\n    searchParams: new URL(request.url).searchParams,\n    params,\n  });\n\n  return json({\n    archived,\n    completed,\n    orgBeingViewed,\n  });\n};\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const updateTaskSchema = z.object({\n    itemId: z.string(),\n    _action: z.literal('resume'),\n  });\n\n  try {\n    const approvedUserId = await requireUser(request, {\n      options: { redirectOnFailure: false },\n      permissions: Attribute.TASKS_READWRITE,\n    });\n\n    const { itemId, _action } =\n      updateTaskSchema.parse(\n        Object.fromEntries((await request.formData()).entries())\n      );\n\n    if (_action === 'resume') {\n      await resumeChecklist(itemId, approvedUserId);\n      return jsonWithSuccess({ status: 'success' }, 'Checklist Resumed');\n    }\n  } catch (error) {\n    console.error('Error during approval: ', error);\n    if (error instanceof Error) {\n      if (error instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', error: 'Failed to perform requested action' },\n        'There was an error.'\n      );\n    }\n  }\n}\n\nconst convertToCSV = (data) => {\n  const headers = ['Name', 'Status', 'Type', 'Checklist Progress', 'Last Updated'];\n  const rows = data.map((user) => {\n    const updatedAt = new Date(user.checklist.updatedAt).toDateString();\n    const status =\n      user.checklist.status === ChecklistStatus.Archived ? 'Archived' :\n        user.checklist.status === ChecklistStatus.InProgress ? 'In Progress' :\n          user.checklist.status === ChecklistStatus.Paused ? 'Paused' : '';\n\n    const progress = Math.round(user.checklist.count.completedItems / user.checklist.count.totalItems * 100);\n\n    return [\n      user.name,\n      status,\n      user.checklist.template.type,\n      `${progress}%`,\n      updatedAt,\n    ].join(',');\n  });\n\n  return [headers.join(','), ...rows].join('\\n');\n};\n\nconst downloadCSV = (data, filename = 'checklist.csv') => {\n  const csvContent = convertToCSV(data);\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const url = URL.createObjectURL(blob);\n  \n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', filename);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\nconst InProcessedMembers = () => {\n  const { archived, completed, orgBeingViewed } = useLoaderData<typeof loader>();\n  const fetcher = useFetcher();\n\n  return (\n    <>\n      <PageHeader\n        org={orgBeingViewed}\n        pageTitle=\"Completed/Archived Checklists\"\n        navigateTo=\"completed\"/>\n  \n      {archived.length > 0 || completed.length > 0 ? (\n        <>\n          <div className=\"w-full flex justify-end\">\n            <button\n              type=\"button\"\n              onClick={() => downloadCSV(archived)}\n              className={`inline-flex justify-right px-4 py-1 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white`}>\n              <CloudArrowDownIcon className=\"w-5 h-5 mr-2\"/>\n              Export\n            </button>\n          </div>\n\n          <table className=\"text-left table-auto w-full border-neutral-300 border-1\">\n            <thead>\n              <tr className=\"border-b border-black\">\n                <th></th>\n                <th className=\"text-left\">Name</th>\n                <th>Status</th>\n                <th>Type</th>\n                <th className=\"text-center\">Checklist Progress</th>\n                <th className=\"w-56\">Last Updated</th>\n                <th className=\"pl-6 w-56\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {[...archived, ...completed]\n                .sort((a, b) => (a.name ?? '').localeCompare(b.name ?? ''))\n                .map((user) => {\n                  const updatedAt = new Date(user.checklist.updatedAt).toDateString();\n\n                  return (\n                    <tr\n                      key={user.id}\n                      className=\"table-row border-b even:bg-zinc-50\">\n                      <td className=\"w-5 px-2\">\n                        {user.checklist.status === ChecklistStatus.Archived ? (\n                          <ArchiveBoxIcon className=\"h-5 w-5\" />\n                        ) : (\n                          <DocumentCheckIcon className=\"h-5 w-5\" />\n                        )}\n                      </td>\n                      <td className=\"py-2\">{user.name}</td>\n                      <td>\n                        {user.checklist.status === ChecklistStatus.Archived \n                          ? <Badge variant=\"warning\">Archived</Badge> \n                          : <Badge variant=\"green\">Completed</Badge>}\n                      </td>\n                      <td>{user.checklist.template.type}</td>\n                      <td className=\"text-center\">\n                        {Math.round(user.checklist.count.completedItems / user.checklist.count.totalItems * 100)}%\n                      </td>\n                      <td>{updatedAt}</td>\n                      <td>\n                        <div className=\"flex gap-2\">\n                          <fetcher.Form method=\"POST\">\n                            <Input.Hidden name=\"itemId\" value={user.checklist.id}></Input.Hidden>\n                            {user.checklist.status === ChecklistStatus.Archived ? (\n                              <PlayButton\n                                type=\"submit\"\n                                value=\"resume\"\n                                name=\"_action\"\n                                className=\"flex justify-center text-black items-center w-12\" \n                                title=\"Unarchive Checklist\">\n                                <ArrowUpOnSquareStackIcon className=\"h-5 w-5\" />\n                              </PlayButton>\n                            ) : (\n                              <div className=\"w-12\"></div>\n                            )}\n                          </fetcher.Form>\n                          <LinkButton\n                            to={`/org/${orgBeingViewed.uuid}/inprocess/${user.checklist.id}/view`}\n                            className=\"flex justify-center items-center w-12\" \n                            title=\"View Checklist\">\n                            <EyeIcon className=\"h-5 w-5\" />\n                          </LinkButton>\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </table>\n        </>\n      ) : (\n        `No members to show.`\n      )}\n\n    </>\n\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default InProcessedMembers;","import { UserRank } from '@lib/constants';\nimport { Organization, Rank, RoleLevel, UserProfile } from '@prisma/client';\nimport type {\n  OrganizationRoleCreateDto,\n  OrganizationRoleUpdateDto,\n  OrganizationRoleWithRoleDto,\n} from '@repositories/dtos';\nimport { Models } from '@lib/models.server';\nimport type { FindAllOptions } from '@repositories/organizationRole.server';\n\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs } from '@remix-run/node';\nimport dbServer from '@services/db.server';\nimport { requireUser } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport {\n  jsonWithError,\n  jsonWithSuccess,\n  redirectWithSuccess,\n} from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { OrgRoleAssignedUsers } from '@lib/types';\n\nexport async function getAllRoles() {\n  return Models.role.getAll();\n}\n\nexport async function getRole(id: string) {\n  return Models.role.get(id);\n}\n\nexport async function getOrgRole(id: string) {\n  return Models.orgRole.get(id);\n}\n\nexport async function getAllOrgRoles() {\n  return Models.orgRole.getAllOrgRoles();\n}\n\nexport async function getCustomRoles() {\n  return Models.role.getAllCustom();\n}\n\nexport async function deleteCustomRole(id: string) {\n  await Models.role.delete(id);\n}\n\nexport async function getRolesByOrg(id: string, options: FindAllOptions) {\n  return Models.role.findByOrg(id, options);\n}\nexport async function getOrgRolesByOrg(id: string, options: FindAllOptions) {\n  return Models.orgRole.findAllByOwningOrgId(id, options);\n}\n\nexport async function findRolesNotAssigned(orgId: string, isBase: boolean) {\n  return Models.role.findAllNotAssigned(orgId, isBase);\n}\n\nexport async function createOrgRole(data: OrganizationRoleCreateDto) {\n  await Models.orgRole.create(data);\n}\n\nexport async function createOrgRoleWithRole(data: OrganizationRoleWithRoleDto) {\n  await Models.orgRole.createWithNewRole(data);\n}\n\nexport async function getOrgRoleWithUsers(id: string) {\n  // await new Promise((r)=>setTimeout(r, 2000));\n  return Models.orgRole.getWithUsers(id);\n}\n\nconst userSelect = { id: true, name: true, rank: true };\n\nasync function filterAlreadyAssigned(\n  currentUsers: OrgRoleAssignedUsers[],\n  allUsers: OrgRoleAssignedUsers[],\n) {\n  // Create a Set of 'id' values in array2\n  const idsInArray2 = new Set(currentUsers.map((item) => item.id));\n\n  return allUsers.filter((item) => !idsInArray2.has(item.id));\n}\n\nexport async function findUsersToAssign(\n  org: Organization,\n  orgRolePromise: ReturnType<typeof getOrgRoleWithUsers>,//{ level: RoleLevel; abbreviation: string },\n  // currentUsers: OrgRoleAssignedUsers[],\n  excludeUserId?: string,\n) {\n  /**\n   * IF role === 'ADMIN' (Wing Admin) use the first wing level org in the tree\n   * IF role === 'SUPERADMIN' grab every user ever\n   * IF role is a base agency grab users for the org role's owning org base\n   * Otherwise get the users from the org role's owning org\n   */\n  let users: Array<OrgRoleAssignedUsers> = [];\n\n  const { users: currentUsers, role } = await orgRolePromise\n\n  if (role.abbreviation === 'SUPERADMIN') {\n    console.log('Finding every user')\n    users = await Models.userProfile.findMany(userSelect);\n  } else if (role.abbreviation === 'ADMIN') {\n    console.log('Finding wing users')\n    // get users from the first wing level org\n    users = await Models.org.findWingUsers(org.uuid, userSelect)\n  } else if (role.level === 'BASE') {\n    console.log('Finding base users')\n    // get users from given orgId base\n    users = await Models.org.findBaseUsers(org.baseId, userSelect, org.uuid);\n  } else {\n    console.log('Finding org users')\n    // get users from the given orgId\n    // users = await Models.userProfile.getAllByOrg(org.uuid, { excludeUserId })\n    users = await Models.userProfile.findMany(userSelect, {\n      AND: {\n        currentOrg: { uuid: org.uuid },\n        id: { not: excludeUserId },\n        isDeleted: false,\n      },\n    });\n  }\n\n  users = await filterAlreadyAssigned(currentUsers, users);\n\n  // await new Promise(r => setTimeout(r, 2000))\n\n  return users\n    .sort(rankComparator);\n}\n\nexport const rankComparator = (a: { rank: Rank; name: string }, b: { rank: Rank; name: string }): number => {\n  const orderDiff = UserRank[a.rank].order - UserRank[b.rank].order;\n\n  // If ranks are different, return rank comparison\n  if (orderDiff !== 0) {\n    return orderDiff;\n  }\n\n  // If ranks are the same, sort by name\n  return a.name.localeCompare(b.name);\n};\n\nexport async function updateOrgRole(\n  id: string,\n  data: OrganizationRoleUpdateDto,\n) {\n  await Models.orgRole.update(id, data);\n}\n\nexport async function removeUserFromOrgRole(roleId: string, userId: string) {\n  await Models.orgRole.removeUser({ orgRoleId: roleId, userId });\n}\n\nexport async function addUserToOrgRole(roleId: string, userId: string) {\n  await Models.orgRole.addUser({ orgRoleId: roleId, userId });\n}\n\nexport async function deleteRole(id: string) {\n  await Models.orgRole.delete(id);\n}\n\nexport async function getOrgRoleByOrgAndRole(orgId: string, roleId: string) {\n  return Models.orgRole.getByOrgAndRole(orgId, roleId);\n}\n\nexport async function roleEditActionFunction({ request }: ActionFunctionArgs) {\n  const orgRoleEditSchema = z.object({\n    orgRoleId: z.string().min(3),\n    contactPhone: z.string().min(10),\n    contactEmail: z.string().email(),\n  });\n\n  const roleDeleteSchema = z.object({\n    orgRoleId: z.string().min(3),\n    userId: z.string().min(3),\n  });\n\n  try {\n    await requireUser(request, {\n      permissions: Attribute.ORGROLES_READWRITE,\n      options: {\n        redirectOnFailure: false,\n      },\n    });\n\n    const formData = Object.fromEntries((await request.formData()).entries());\n    const { _action } = formData;\n\n    const url = new URL(request.url);\n    const orgId = url.searchParams.get('org');\n    url.pathname;\n\n    if (_action === 'edit') {\n      const { orgRoleId, contactPhone, contactEmail } =\n        orgRoleEditSchema.parse(formData);\n      await updateOrgRole(orgRoleId, {\n        contactEmail,\n        contactPhone,\n      });\n      if (url.pathname.startsWith('/role')) {\n        return redirectWithSuccess(\n          `/role${orgId ? `?org=${orgId}` : ''}`,\n          'Role Saved!',\n        );\n      } else if (url.pathname.startsWith('/tasks')) {\n        const returnURL = url.pathname.slice(0, url.pathname.lastIndexOf('/'));\n        return redirectWithSuccess(returnURL, 'Role Saved!');\n      }\n    } else if (_action === 'delete') {\n      const { orgRoleId, userId } = roleDeleteSchema.parse(formData);\n      await removeUserFromOrgRole(orgRoleId, userId);\n      return jsonWithSuccess({ status: 'success' }, 'Member Removed!');\n    } else {\n      const addUserSchema = z.object({\n        userId: z.string(),\n        orgRoleId: z.string(),\n      });\n\n      const { orgRoleId, userId } = addUserSchema.parse({\n        userId: formData['newUser[id]'],\n        orgRoleId: formData['orgRoleId'],\n      });\n\n      await addUserToOrgRole(orgRoleId, userId);\n      return jsonWithSuccess({ status: 'success' }, 'Member Added!');\n    }\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.',\n        );\n      }\n      if (e instanceof ZodError) {\n        return jsonWithError(\n          { status: 'error', message: 'validation error', errors: e.errors },\n          'There was an error saving the role.',\n        );\n      }\n      return jsonWithError(\n        { status: 'error', message: e.message },\n        'There was an error saving the role.',\n      );\n    }\n  }\n}\n","import type { ChecklistType, ChecklistWithTemplate } from '@lib/constants';\nimport { Models } from '@lib/models.server';\nimport { Attribute } from '@lib/utils';\nimport type { MoveType } from '@prisma/client';\nimport { json, LoaderFunctionArgs } from '@remix-run/node';\nimport type {\n  TemplateDto,\n  TemplateItemDto,\n  TemplateItemUpdateDto,\n} from '@repositories/dtos';\nimport { getOrgBeingViewed } from '@routes/_withNav+/_withSideBar+/_manage+/.server/org.queries';\nimport { getRolesByOrg } from '@routes/_withNav+/_withSideBar+/_manage+/.server/role.queries';\nimport { assignChecklist } from '@routes/_withNav+/_withSideBar+/_manage+/user+/.server/user.queries';\nimport { requireUserAsObject } from '@services/user.server';\nimport * as Sentry from '@sentry/remix';\n\nexport async function getUserChecklists(userId: string) {\n  return Models.userProfile.getWithChecklistsById(userId);\n}\n\nexport async function getAllTemplateItems() {\n  return Models.templateItem.getAllTemplateItems();\n}\n\nexport async function getTemplatesByOrg(orgId: string) {\n  return Models.template.getAllByOrgId(orgId);\n}\n\nexport async function getTemplateWithItems(id: string) {\n  return Models.template.getWithTemplateItems(id);\n}\n\nexport async function deleteTemplateItem(id: string) {\n  await Models.templateItem.delete(id);\n}\n\nexport async function createTemplateItem(data: TemplateItemDto) {\n  await Models.templateItem.create(data);\n}\n\nexport async function updateTemplateItem(\n  id: string,\n  data: TemplateItemUpdateDto,\n) {\n  await Models.templateItem.update(id, data);\n}\n\nexport async function getItemWithRole(id: string) {\n  return Models.templateItem.getWithRole(id);\n}\n\nexport async function getTemplateWithOrg(id: string) {\n  return Models.template.getWithOwningOrg(id);\n}\n\nexport async function updateTemplate(id: string, data: TemplateDto) {\n  await Models.template.update(id, data);\n}\n\nexport async function deleteTemplate(id: string) {\n  return Models.template.delete(id);\n}\n\nexport async function createTemplate(data: TemplateDto) {\n  await Models.template.create(data);\n}\n\nfunction createTemplateArray(\n  userChecklists: ChecklistWithTemplate[],\n  orgTemplates: { id: string; name: string }[],\n) {\n  const templatesAssigned = userChecklists.map((checklist) => ({\n    id: checklist.template.id,\n    name: checklist.template.name,\n    checklistId: checklist.id,\n    assigned: true,\n  }));\n\n  const templates = new Map<\n    string,\n    { id: string; name: string; assigned?: boolean; checklistId?: string }\n  >();\n\n  if (templatesAssigned) {\n    orgTemplates\n      .concat(templatesAssigned)\n      .forEach(\n        (item: {\n          name: string;\n          id: string;\n          checklistId?: string;\n          assigned?: boolean;\n        }) => {\n          if (templates.has(item.id))\n            templates.set(item.id, {\n              ...item,\n              assigned: true,\n              checklistId: item.checklistId,\n            });\n          else\n            templates.set(item.id, {\n              ...item,\n              assigned: item.assigned ?? false,\n            });\n        },\n      );\n  }\n\n  return templates ? Array.from(templates.values()) : undefined;\n}\n\nexport async function getTemplates(userId: string) {\n  const user = await getUserChecklists(userId);\n\n  if (!user.currentOrg) throw new Error(\"can't find current org\");\n\n  const orgTemplates = await getTemplatesByOrg(user.currentOrg?.uuid);\n\n  const templates = createTemplateArray(user?.checklists, orgTemplates);\n\n  return { templates, user };\n}\n\nexport async function deleteChecklist(checklistId: string, userId: string) {\n  await Models.checklist.delete(checklistId, userId);\n}\n\ntype AssignFunctionArgs = {\n  templateId: string;\n  userId: string;\n  assignedById: string;\n};\n\nfunction checklistTypeExists(checklists: any[], moveType: MoveType | null) {\n  return (\n    checklists.findIndex(\n      (checklist: ChecklistWithTemplate) =>\n        checklist.template.type === moveType,\n    ) === -1\n  );\n}\n\nexport async function assign({\n  templateId,\n  userId,\n  assignedById,\n}: AssignFunctionArgs) {\n  const userProfile = await Models.userProfile.getWithChecklistsById(userId);\n  await assignChecklist(userProfile, userProfile.moveType, assignedById, {\n    templateId,\n  });\n}\n\nexport async function getInheritedChecklistItems(\n  currentOrgId: string,\n  type: ChecklistType,\n) {\n  async function* getInheritedItems(currentOrgId: string, type: ChecklistType) {\n    let currentOrg = await Models.org.get(currentOrgId);\n\n    if (type !== 'SQ') {\n      while (currentOrg) {\n        const nextOrg = await Models.org.getWithTemplates(\n          currentOrg.parentOrgId,\n          type,\n        );\n\n        if (nextOrg && nextOrg.uuid !== 'DAF') {\n          const name = nextOrg?.name;\n          const items =\n            nextOrg.templates.length > 0\n              ? nextOrg.templates.flatMap((template) => template.items)\n              : [];\n\n          yield { name, items, owningOrg: nextOrg.uuid };\n\n          currentOrg = { ...nextOrg };\n\n          if (!currentOrg.parentOrgId) {\n            break;\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  const generator = getInheritedItems(currentOrgId, type);\n  const listOfItems = [];\n\n  for await (const inheritedItem of generator) {\n    listOfItems.push(inheritedItem);\n  }\n  return listOfItems;\n}\n\nexport async function templateItemLoader({\n  request,\n  params,\n}: LoaderFunctionArgs) {\n  const { currentOrg: userOrg } = await requireUserAsObject(request, {\n    permissions: Attribute.TEMPLATES_READWRITE,\n  });\n\n  const roles = await getRolesForTemplateItem({\n    searchParams: new URL(request.url).searchParams,\n    defaultOrgId: userOrg.uuid,\n    params,\n  });\n\n  const { templateId: checklistId } = params;\n  if (!checklistId)\n    throw new Error('template id and org id is required');\n\n  return roles;\n}\nexport async function editTemplateItemLoader(loaderArgs: LoaderFunctionArgs) {\n  const { params } = loaderArgs;\n  const editSentryScope = new Sentry.Scope();\n\n  if (!params.itemId) {\n    Sentry.captureException('edit template itemId is required.');\n    throw new Error('itemId is required.');\n  }\n\n  try {\n    const roles = await templateItemLoader(loaderArgs);\n\n    const item = await getItemWithRole(params.itemId);\n\n    return json({ roles, item });\n  } catch (e) {\n    console.error(e);\n    Sentry.captureException(e, editSentryScope);\n    throw new Error(e.message);\n  }\n}\n\nexport async function createTemplateItemLoader(loaderArgs: LoaderFunctionArgs) {\n  const roles = await templateItemLoader(loaderArgs);\n\n  return json({ roles });\n}\n\nexport async function getRolesForTemplateItem({\n  searchParams,\n  params,\n  defaultOrgId,\n}: {\n  searchParams: URLSearchParams;\n  params: LoaderFunctionArgs['params'];\n  defaultOrgId: string;\n}) {\n  const { orgBeingViewed: org } = await getOrgBeingViewed({\n    searchParams,\n    defaultOrgId,\n    params,\n  });\n\n  return getRolesByOrg(org.uuid, {\n    includeUser: true,\n  });\n}\n","import { AcceptButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport PageHeader from '@components/ui/PageHeader';\nimport { Attribute } from '@lib/utils';\nimport { handleActionError } from '@lib/utils/utils.server';\nimport { MoveType } from '@prisma/client';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useFetcher, useLoaderData } from '@remix-run/react';\nimport { requireUserAsObject } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, jsonWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport {\n  acceptMemberMove,\n  getInboundMembers,\n  getOrgBeingViewed,\n  getOrgWithTemplates,\n} from './.server/org.queries';\nimport { assign } from './.server/template.queries';\nimport { Models } from '@lib/models.server';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  const { currentOrg } = await requireUserAsObject(request, {\n    permissions: Attribute.MOVES_READ,\n  });\n\n  const { orgId } = params;\n  if (!orgId) throw new Error('org id is required.');\n  const inbound = await getInboundMembers(orgId);\n\n  const { orgBeingViewed } = await getOrgBeingViewed({\n    defaultOrgId: currentOrg.uuid,\n    searchParams: new URL(request.url).searchParams,\n    params,\n  });\n\n  return json({\n    inbound,\n    orgBeingViewed,\n  });\n};\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  const assignSchema = z.object({\n    userId: z.string(),\n    currentOrg: z.string(),\n    previousOrgId: z.string(),\n    moveType: z.nativeEnum(MoveType),\n    _action: z.string().regex(/cssAccept/),\n  });\n\n  try {\n    const { id: loggedInUserId } = await requireUserAsObject(request, {\n      permissions: Attribute.MOVES_READWRITE,\n      options: { redirectOnFailure: false },\n    });\n    const {\n      _action: action,\n      userId,\n      currentOrg,\n      previousOrgId,\n      moveType,\n    } = assignSchema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n    if (action === 'cssAccept') {\n      // TODO: This needs to grab the first \"moveType\" available\n      const org = await getOrgWithTemplates(currentOrg, moveType);\n      // await acceptMemberMove(userId, currentOrg, previousOrgId);\n      if (!org.templates[0].id)\n        return jsonWithError(\n          {\n            status: 'error',\n            message: `No templates found for ${moveType} type within ${org.name}.`,\n          },\n          'There was an error accepting the move.'\n        );\n\n      await assign({\n        templateId: org.templates[0].id,\n        userId: userId as string,\n        assignedById: loggedInUserId,\n      });\n\n      await acceptMemberMove(userId, currentOrg, previousOrgId);\n\n      return jsonWithSuccess(\n        { status: 'success' },\n        `Member assigned ${moveType} checklist!`\n      );\n    }\n  } catch (e) {\n    return handleActionError(e, 'There was an error accepting the move.');\n  }\n};\n\nconst InboundMembers = () => {\n  const { inbound, orgBeingViewed } = useLoaderData<typeof loader>();\n\n  const acceptFetcher = useFetcher();\n  // TODO: Filter by PCS and / or PCA\n\n  return (\n    <>\n      <PageHeader\n        org={orgBeingViewed}\n        pageTitle=\"Inbound Members\"\n        navigateTo=\"inbound\"/>\n      {inbound.length > 0 ? (\n        <table className=\"text-left table-auto w-full border-neutral-300 border-1\">\n          <thead>\n            <tr className=\"border-b border-black\">\n              <th className=\"text-left pl-3\">Name</th>\n              <th>Type</th>\n              <th>Previous Organization</th>\n              <th>Last Updated</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {inbound\n              .sort((a, b) => a.name.localeCompare(b.name))\n              .map((user) => {\n                const updatedAt = new Date(user.updatedAt).toDateString();\n                return (\n                  <tr\n                    key={user.id}\n                    className=\"table-row border-b even:bg-zinc-50\">\n                    <td className=\"pl-3 py-4\">{user.name}</td>\n                    <td>{user.moveType}</td>\n                    <td>{user.previousOrg?.name}</td>\n                    <td>{updatedAt}</td>\n                    <td className=\"text-center\">\n                      <acceptFetcher.Form method=\"post\">\n                        <input type=\"hidden\" value={user.id} name=\"userId\" />\n                        <input\n                          type=\"hidden\"\n                          value={user.moveType ?? ''}\n                          name=\"moveType\"/>\n                        <input\n                          type=\"hidden\"\n                          value={orgBeingViewed.uuid}\n                          name=\"currentOrg\"/>\n                        {/* TODO: Actually assign the checklist onSubmit */}\n                        <input\n                          type=\"hidden\"\n                          name=\"previousOrgId\"\n                          value={user.previousOrg?.uuid ?? ''}/>\n                        <AcceptButton\n                          type=\"submit\"\n                          name=\"_action\"\n                          value=\"cssAccept\">\n                          Accept Move\n                        </AcceptButton>\n                      </acceptFetcher.Form>\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </table>\n      ) : (\n        `No members to show.`\n      )}\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default InboundMembers;\n","import {\n  DeleteButton,\n  LinkButton,\n  PauseButton,\n  PlayButton,\n} from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport PageHeader from '@components/ui/PageHeader';\nimport type { ChecklistType } from '@lib/constants';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useFetcher, useLoaderData } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport {\n  getInprocessingMembers,\n  getOrgBeingViewed,\n} from './.server/org.queries';\nimport {\n  ArchiveBoxArrowDownIcon,\n  EyeIcon,\n  PauseIcon,\n  PlayIcon,\n} from '@heroicons/react/24/outline';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithSuccess, jsonWithError } from 'remix-toast';\nimport { z } from 'zod';\nimport {\n  pauseChecklist,\n  resumeChecklist,\n  archiveChecklist,\n} from '../.server/tasks.queries';\nimport type { Checklist} from '@prisma/client';\nimport { ChecklistStatus } from '@prisma/client';\nimport { Input } from '@components/ui';\nimport { CloudArrowDownIcon } from '@heroicons/react/16/solid';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  const { currentOrg } = await requireUserAsObject(request, {\n    permissions: Attribute.MOVES_READ,\n  });\n\n  const { orgId } = params;\n\n  if (!orgId) throw new Error('org id is required.');\n\n  const inbound = await getInprocessingMembers(orgId);\n  const { orgBeingViewed } = await getOrgBeingViewed({\n    defaultOrgId: currentOrg.uuid,\n    searchParams: new URL(request.url).searchParams,\n    params,\n  });\n\n  return json({\n    inbound,\n    orgBeingViewed,\n  });\n};\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const updateTaskSchema = z.object({\n    itemId: z.string(),\n    _action: z.union([\n      z.literal('pause'),\n      z.literal('resume'),\n      z.literal('archive'),\n    ]),\n  });\n\n  try {\n    const approvedUserId = await requireUser(request, {\n      options: { redirectOnFailure: false },\n      permissions: Attribute.TASKS_READWRITE,\n    });\n\n    const { itemId, _action } = updateTaskSchema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n\n    if (_action === 'pause') {\n      await pauseChecklist(itemId, approvedUserId);\n      return jsonWithSuccess({ status: 'success' }, 'Checklist Paused');\n    }\n    if (_action === 'resume') {\n      await resumeChecklist(itemId, approvedUserId);\n      return jsonWithSuccess({ status: 'success' }, 'Checklist Resumed');\n    }\n    if (_action === 'archive') {\n      await archiveChecklist(itemId, approvedUserId);\n      return jsonWithError({ status: 'success' }, 'Checklist Archived!');\n    }\n  } catch (error) {\n    console.error('Error during approval: ', error);\n    if (error instanceof Error) {\n      if (error instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', error: 'Failed to perform requested action' },\n        'There was an error.'\n      );\n    }\n  }\n}\n\nconst convertToCSV = (\n  data: {\n    name: string;\n    checklist: Checklist & {\n      type: ChecklistType;\n      count: { totalItems: number; completedItems: number };\n    };\n  }[]\n) => {\n  const headers = [\n    'Name',\n    'Status',\n    'Type',\n    'Checklist Progress',\n    'Last Updated',\n  ];\n  const rows = data.map(({ checklist: { count, ...checklist }, ...user }) => {\n    const updatedAt = checklist.updatedAt\n      ? new Date(checklist.updatedAt).toDateString()\n      : 'N/A';\n\n    let status = 'Unkown';\n    switch (checklist.status) {\n      case 'Archived':\n        status = 'Archived';\n        break;\n      case 'InProgress':\n        status = 'In Progress';\n        break;\n      case 'Paused':\n        status = 'Paused';\n        break;\n    }\n\n    const totalItems = count.totalItems || 0;\n    const completedItems = count.completedItems || 0;\n    const progress =\n      totalItems > 0 ? Math.round((completedItems / totalItems) * 100) : 0;\n\n    return [\n      user.name || 'Unknown',\n      status,\n      checklist.type || 'N/A',\n      `${progress}%`,\n      updatedAt,\n    ].join(',');\n  });\n\n  return [headers.join(','), ...rows].join('\\n');\n};\n\nconst downloadCSV = (data: any[], filename = 'checklist.csv') => {\n  if (!data || data.length === 0) {\n    console.error('No data to export.');\n    return;\n  }\n\n  const csvContent = convertToCSV(data);\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const url = URL.createObjectURL(blob);\n\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\nconst InProcessingMembers = () => {\n  const { inbound, orgBeingViewed } = useLoaderData<typeof loader>();\n  const fetcher = useFetcher();\n\n  return (\n    <>\n      <PageHeader\n        org={orgBeingViewed}\n        pageTitle=\"Inprocessing Members\"\n        navigateTo=\"inprocess\"/>\n\n      {inbound.length > 0 ? (\n        <>\n          <div className=\"w-full flex justify-end\">\n            <button\n              type=\"button\"\n              onClick={() => downloadCSV(inbound)}\n              className={`inline-flex justify-right px-4 py-1 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white`}>\n              <CloudArrowDownIcon className=\"w-5 h-5 mr-2\" />\n              Export\n            </button>\n          </div>\n\n          <table className=\"text-left table-auto w-full border-neutral-300 border-1\">\n            <thead>\n              <tr className=\"border-b border-black\">\n                <th></th>\n                <th className=\"text-left\">Name</th>\n                <th>Status</th>\n                <th>Type</th>\n                <th className=\"text-center\">Checklist Progress</th>\n                <th className=\"w-56\">Last Updated</th>\n                <th className=\"w-56\"></th>\n              </tr>\n            </thead>\n            <tbody>\n              {inbound\n                .sort((a, b) => a.name.localeCompare(b.name))\n                .map((user) => {\n                  const updatedAt = new Date(\n                    user.checklist.updatedAt\n                  ).toDateString();\n                  const percentage = Math.round(\n                    (user.checklist.count.completedItems /\n                    user.checklist.count.totalItems) *\n                    100\n                  );\n\n                  return (\n                    <tr\n                      key={user.id}\n                      className=\"table-row border-b even:bg-zinc-50\">\n                      <td className=\"w-5 px-2\">\n                        {user.checklist.status === ChecklistStatus.Paused ? (\n                          <PauseIcon className=\"h-5 w-5\" />\n                        ) : (\n                          <PlayIcon className=\"h-5 w-5\" />\n                        )}\n                      </td>\n                      <td className=\"py-2\">{user.name}</td>\n                      <td>\n                        {user.checklist.status === ChecklistStatus.Archived &&\n                        'Archived'}\n                        {user.checklist.status === ChecklistStatus.InProgress &&\n                        'In Progress'}\n                        {user.checklist.status === ChecklistStatus.Paused &&\n                        'Paused'}\n                      </td>\n                      <td>{user.checklist.type}</td>\n                      <td className=\"text-center\">\n                        {Number.isNaN(percentage) ? '0%' : `${percentage}%`}\n                      </td>\n                      <td>{updatedAt}</td>\n                      <td className=\"text-right flex gap-2 mt-1\">\n                        <fetcher.Form method=\"POST\" className=\"flex gap-2\">\n                          <Input.Hidden\n                            name=\"itemId\"\n                            value={user.checklist.id}></Input.Hidden>\n                          {user.checklist.status !== ChecklistStatus.Paused ? (\n                            <PauseButton\n                              type=\"submit\"\n                              value=\"pause\"\n                              name=\"_action\"\n                              className=\"flex justify-center items-center w-12\">\n                              <PauseIcon className=\"h-5 w-5\" />\n                            </PauseButton>\n                          ) : (\n                            <PlayButton\n                              type=\"submit\"\n                              value=\"resume\"\n                              name=\"_action\"\n                              className=\"flex justify-center items-center w-12\">\n                              <PlayIcon className=\"h-5 w-5\" />\n                            </PlayButton>\n                          )}\n                          <DeleteButton\n                            type=\"submit\"\n                            value=\"archive\"\n                            name=\"_action\"\n                            className=\"flex justify-center items-center w-12\">\n                            <ArchiveBoxArrowDownIcon className=\"h-5 w-5\" />\n                          </DeleteButton>\n                        </fetcher.Form>\n                        <LinkButton\n                          to={`/org/${orgBeingViewed.uuid}/inprocess/${user.checklist.id}/view`}\n                          className=\"flex justify-center items-center w-12\">\n                          <EyeIcon className=\"h-5 w-5\" />\n                        </LinkButton>\n                      </td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </table>\n        </>\n      ) : (\n        `No members to show.`\n      )}\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default InProcessingMembers;\n","import { Badge } from '@components/ui/Badge';\nimport { Button } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { CalendarDaysIcon, CheckIcon, ClockIcon } from '@heroicons/react/24/solid';\nimport { Attribute } from '@lib/utils';\nimport type { LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useLoaderData, useNavigate } from '@remix-run/react';\nimport { requireUserAsObject } from '@services/user.server';\nimport { getUserChecklist } from './.server/org.queries';\nimport { RichTextView } from '@components/ui/RichText/Viewer';\nimport { StartTimer, DatabaseUpdatedIcon, SolidCheckmark } from '@components/ui/Icons';\nimport { ChecklistItemStatus, ChecklistStatus } from '@prisma/client';\nimport { ArchiveBoxArrowDownIcon, CheckCircleIcon, LockClosedIcon, PauseIcon } from '@heroicons/react/24/outline';\n\nfunction StatusBadge({status}: {status: ChecklistStatus}) {\n  switch (status) {\n    case 'Paused':\n      return <Badge className=\"gap-1 pr-3.5\" variant=\"warning\"><PauseIcon className=\"size-5\"/>Paused</Badge>;\n    case 'Locked':\n      return <Badge className=\"gap-1\" variant=\"danger\"><LockClosedIcon className=\"size-5\"/>Locked</Badge>;\n    case 'InProgress':\n      return <Badge className=\"gap-1\" variant=\"primary\">In-Progress</Badge>;\n    case 'Completed':\n      return <Badge className=\"gap-1\" variant=\"green\"><SolidCheckmark className=\"size-5\"/>Completed</Badge>;\n    case 'Archived':\n      return <Badge className=\"gap-1\" variant=\"warning\"><ArchiveBoxArrowDownIcon className=\"size-5\"/>Archived</Badge>;\n  }\n}\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  await requireUserAsObject(request, {\n    permissions: [Attribute.MOVES_READ, Attribute.CHECKLISTS_READ],\n  });\n\n  const { orgId, checklistId } = params;\n  \n  if (!orgId || !checklistId)\n    throw new Error('org and checklist ids are required.');\n\n  const { user, ...checklist } = await getUserChecklist(checklistId);\n\n  return json({ user, checklist });\n};\n\nconst MemberChecklist = () => {\n  const { user, checklist } = useLoaderData<typeof loader>();\n  const navigate = useNavigate();\n\n  const dueDate = new Date(checklist.createdAt);\n  dueDate.setDate(dueDate.getDate() + 30);\n\n  const completedCount = checklist.items.filter(\n    (item) => item.isComplete\n  ).length;\n  const totalCount = checklist.items.length;\n\n  return (\n    <>\n      <Button onClick={() => navigate(-1)}>Back</Button>\n\n      <div className=\"grid grid-cols-2 mb-5\">\n        <div className=\"flex gap-4 items-center\">\n          <h1 className=\"text-2xl my-5\">{user.name}'s Checklist</h1>\n          <StatusBadge status={checklist.status}></StatusBadge>\n        </div>\n        <div>\n          <h1 className=\"text-2xl my-5 text-right\">\n            {completedCount} out of {totalCount} tasks completed\n          </h1>\n        </div>\n        <div className=\"flex gap-4 col-span-2\">\n          <div className=\"inline-flex items-center gap-1 text-nowrap\">\n            <StartTimer className=\"size-6\" title=\"Date Started\" />\n            {new Date(checklist.createdAt).toDateString()}\n          </div>\n          <div className=\"inline-flex items-center gap-1.5 text-nowrap\">\n            <CalendarDaysIcon title=\"Due Date\" className=\"size-6\" />\n            {dueDate.toDateString()}\n          </div>\n          <div className=\"inline-flex gap-1.5 items-center text-nowrap\">\n            <DatabaseUpdatedIcon className=\"size-6\" title=\"Date Last Updated\" />\n            {new Date(checklist.updatedAt).toDateString()}\n          </div>\n          <div className=\"inline-flex gap-1.5 items-center text-nowrap\">\n            {checklist.status === ChecklistItemStatus.Completed && (\n              <SolidCheckmark title=\"Date Completed\" className=\"size-6 text-green-500\"/>\n            )}\n            {checklist.status === ChecklistItemStatus.Completed && (\n              new Date(checklist.dateCompleted ?? dueDate).toDateString()\n            )}\n          </div>\n        </div>\n      </div>\n\n      \n\n      <div className=\"overflow-x-auto\">\n        <table className=\"text-left w-full border-neutral-300 border-1 border-collapse\">\n          <thead>\n            <tr className=\"border-b border-black\">\n              <th className=\"px-3 w-[200px]\">Item Name</th>\n              <th className=\"px-3\">Description</th>\n              <th className=\"text-center px-3\">Date Updated</th>\n              <th className=\"text-center px-3\">POC</th>\n              <th className=\"text-center px-3\">Status</th>\n            </tr>\n          </thead>\n          <tbody>\n            {checklist.items.map((item) => (\n              <tr key={item.id} className=\"border-b even:bg-zinc-50\">\n                <td className=\"py-2 px-3 whitespace-nowrap overflow-hidden text-ellipsis\">\n                  {item.templateItem.name}\n                </td>\n                <td className=\"px-3 max-w-xs overflow-hidden whitespace-nowrap text-ellipsis\">\n                  <div className=\"line-clamp-2\">\n                    <RichTextView>{item.templateItem.reference?.description ?? item.templateItem.description}</RichTextView>\n                  </div>\n                </td>\n                <td className=\"text-center px-3\">\n                  {new Date(item.updatedAt).toDateString()}\n                </td>\n                <td className=\"text-center px-3\">\n                  {item.templateItem.requiredRole.name}\n                </td>\n                <td className=\"text-center px-3\">\n                  {item.isComplete && (\n                    <Badge className=\"gap-1\">\n                      <CheckIcon className=\"size-4\" />\n                  Signed\n                    </Badge>\n                  )}\n                  {!item.isComplete && item.userComplete && (\n                    <Badge variant=\"green\">\n                  Ready to Complete\n                    </Badge>\n                  )}\n                  {!item.isComplete && !item.userComplete && (\n                    <Badge className=\"gap-1\" variant=\"warning\">\n                      <ClockIcon className=\"size-5\" />\n                  Awaiting Member\n                    </Badge>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </>\n\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default MemberChecklist;\n","import { DeleteButton, LinkButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport PageHeader from '@components/ui/PageHeader';\nimport { Dialog, Transition } from '@headlessui/react';\nimport { useManageLayoutData } from '@lib/hooks/useMatchesData';\nimport { Attribute } from '@lib/utils';\nimport { handleActionError } from '@lib/utils/utils.server';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport type { FetcherWithComponents } from '@remix-run/react';\nimport { Outlet, useFetcher, useLoaderData } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport { Fragment, useRef, useState } from 'react';\nimport { jsonWithSuccess } from 'remix-toast';\nimport z from 'zod';\nimport { cancelMemberMove, getOutboundMembers } from './.server/org.queries';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  const { currentOrg } = await requireUserAsObject(request, {\n    permissions: Attribute.MOVES_READ,\n  });\n\n  const { orgId } = params;\n  if (!orgId) throw new Error('org id is required.');\n  const outbound = await getOutboundMembers(orgId);\n\n  return json({ outbound });\n};\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  const deleteSchema = z.object({\n    id: z.string().min(1),\n    _action: z.string().regex(/delete/),\n  });\n\n  try {\n    await requireUser(request, {\n      permissions: Attribute.MOVES_READWRITEDELETE,\n      options: {\n        redirectOnFailure: false,\n      },\n    });\n\n    const { id } = deleteSchema.parse(\n      Object.fromEntries(await request.formData())\n    );\n\n    await cancelMemberMove(id);\n\n    return jsonWithSuccess({ status: 'success' }, 'Move cancelled.');\n  } catch (e) {\n    return handleActionError(e, 'There was an error cancelling the move.');\n  }\n};\n\nfunction ConfirmNavigation({\n  fetcher,\n  showModal,\n  setShowModal,\n  userName,\n  idRef,\n}: {\n  fetcher: FetcherWithComponents<any>;\n  showModal: boolean;\n  setShowModal: React.Dispatch<React.SetStateAction<boolean>>;\n  idRef: React.MutableRefObject<HTMLInputElement | null>;\n  userName: string;\n}) {\n  return (\n    <Transition.Root show={true} as={Fragment}>\n      <Dialog\n        as=\"div\"\n        className=\"relative z-10\"\n        open={showModal}\n        onClose={() => setShowModal(false)}>\n        <Transition.Child\n          as={Fragment}\n          enter=\"ease-out duration-300\"\n          enterFrom=\"opacity-0\"\n          enterTo=\"opacity-100\"\n          leave=\"ease-in duration-200\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\">\n          <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" />\n        </Transition.Child>\n        <div className=\"fixed inset-0 z-10 w-screen overflow-y-auto\">\n          <div className=\"flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0\">\n            <Transition.Child\n              as={Fragment}\n              enter=\"ease-out duration-300\"\n              enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n              enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\n              leave=\"ease-in duration-200\"\n              leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\n              leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\">\n              <Dialog.Panel className=\"relative transform rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg\">\n                <div className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4 mb-5\">\n                  <Dialog.Title\n                    as=\"h3\"\n                    className=\"text-base font-semibold leading-6 text-gray-900 mb-3\">\n                    Are you sure you want to cancel {userName}'s move?\n                  </Dialog.Title>\n                </div>\n                <div className=\"bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6\">\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      fetcher.submit(\n                        {\n                          id: idRef.current?.value ?? '',\n                          _action: 'delete',\n                        },\n                        { method: 'POST' }\n                      );\n                      setShowModal(false);\n                    }}\n                    className=\"inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:ml-3 sm:w-auto\">\n                    Yes\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowModal(false)}\n                    className=\"mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto\">\n                    No\n                  </button>\n                </div>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  );\n}\n\nconst OutboundMembers = () => {\n  const { outbound } = useLoaderData<typeof loader>();\n  const { orgBeingViewed } = useManageLayoutData();\n  const deleteFetcher = useFetcher();\n  const userIdRef = useRef<HTMLInputElement>(null);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const [modalUserName, setModalUserName] = useState<string>('');\n\n  const handleClick = (userName: string) => {\n    setModalUserName(userName);\n    setShowConfirmModal(true);\n  };\n\n  return (\n    <>\n      <PageHeader\n        org={orgBeingViewed}\n        pageTitle=\"Outbound Members\"\n        navigateTo=\"outbound\"/>\n      {outbound.length > 0 ? (\n        <table className=\"text-left table-auto w-full border-neutral-300 border-1\">\n          <thead>\n            <tr className=\"border-b border-black\">\n              <th className=\"pl-3\">Name</th>\n              <th>Move Type</th>\n              <th>Next Organization</th>\n              <th>Last Updated</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {outbound\n              .sort((a, b) => a.name.localeCompare(b.name))\n              .map((user) => {\n                const updatedAt = new Date(user.updatedAt).toDateString();\n                return (\n                  <tr\n                    key={user.id}\n                    className=\"table-row border-b even:bg-zinc-50\">\n                    <td className=\"py-4 pl-3\">{user.name}</td>\n                    <td>{user.moveType}</td>\n                    <td>{user.nextOrg?.name}</td>\n                    <td>{updatedAt}</td>\n                    <td className=\"text-center\">\n                      <LinkButton\n                        className=\"my-2\"\n                        to={`/org/${orgBeingViewed.uuid}/outbound/${user.id}/edit`}>\n                        Edit\n                      </LinkButton>\n                      <deleteFetcher.Form className=\"inline\" method=\"post\">\n                        <input\n                          type=\"hidden\"\n                          ref={userIdRef}\n                          id=\"id\"\n                          name=\"id\"\n                          value={user.id}/>\n                        <DeleteButton\n                          className=\"ml-3\"\n                          name=\"_action\"\n                          value=\"delete\"\n                          type=\"button\"\n                          onClick={() => handleClick(user.name)}>\n                          Cancel\n                        </DeleteButton>\n                      </deleteFetcher.Form>\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </table>\n      ) : (\n        `No members to show.`\n      )}\n      {showConfirmModal ? (\n        <ConfirmNavigation\n          fetcher={deleteFetcher}\n          showModal={showConfirmModal}\n          setShowModal={setShowConfirmModal}\n          userName={modalUserName}\n          idRef={userIdRef}/>\n      ) : null}\n      <Outlet />\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default OutboundMembers;\n","import { Attribute } from '@lib/utils';\nimport { MoveType } from '@prisma/client';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { requireUser } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { getOrgsByMoveType, updateMemberMove } from './org.queries';\nimport { getUserWithNextOrg } from '../user+/.server/user.queries';\n\nexport async function editUserMoveLoaderFn({\n  request,\n  params,\n}: LoaderFunctionArgs) {\n  await requireUser(request, {\n    options: { redirectOnFailure: false },\n    permissions: Attribute.MOVES_READWRITEDELETE,\n  });\n  const paramsSchema = z.object({\n    userId: z.string(),\n  });\n  const userSchema = z.object({\n    id: z.string(),\n    name: z.string(),\n    moveType: z.nativeEnum(MoveType),\n    nextOrg: z.object({ id: z.number(), name: z.string(), uuid: z.string() }).nullable(),\n    currentOrg: z.object({ id: z.number(), baseId: z.string(), uuid: z.string() }),\n  });\n  const typeParamSchema = z.nativeEnum(MoveType);\n\n  const { userId } = paramsSchema.parse({\n    userId: params.userId,\n  });\n\n  const user = userSchema.parse(await getUserWithNextOrg(userId));\n\n  const moveType = typeParamSchema.parse(\n    new URL(request.url).searchParams.get('type') ?? user.moveType,\n  );\n\n  let orgs = [];\n  if (!user.currentOrg || !user.currentOrg.baseId) {\n    throw new Error('Current organization not found.');\n  } else {\n    orgs = await getOrgsByMoveType(moveType, user.currentOrg.baseId);\n  }\n\n  return json({ user, filteredOrgs: orgs });\n}\n\nexport async function editUserMoveActionFn({\n  request,\n  params: { orgId },\n}: ActionFunctionArgs) {\n  const editSchema = z.object({\n    nextOrg: z.string().optional(),\n    userId: z.string(),\n    moveType: z.nativeEnum(MoveType),\n  });\n\n  try {\n    await requireUser(request, {\n      options: { redirectOnFailure: false },\n      permissions: Attribute.MOVES_READWRITEDELETE,\n    });\n    const { userId, nextOrg, moveType } = editSchema.parse(\n      Object.fromEntries(await request.formData()),\n    );\n\n    await updateMemberMove(userId, {\n      nextOrg,\n      moveType,\n    });\n\n    const redirectUrl = orgId ? `/org/${orgId}/outbound` : `/user`;\n    return redirectWithSuccess(redirectUrl, 'Move Saved!');\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.',\n        );\n      }\n      if (e instanceof ZodError) {\n        return jsonWithError(\n          { status: 'error', message: 'validation error', errors: e.errors },\n          'There was an error saving the move.',\n        );\n      }\n      return jsonWithError(\n        { status: 'error', message: e.message },\n        'There was an error saving the move.',\n      );\n    }\n  }\n}\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { UserMoveModal } from '@components/ui/modals';\nimport { useParams, useSearchParams } from '@remix-run/react';\nexport { editUserMoveLoaderFn as loader, editUserMoveActionFn as action} from '@routes/_withNav+/_withSideBar+/_manage+/.server/move.queries';\n\nconst OutboundMoveEdit = () => {\n\n  const { orgId, userId } = useParams();\n  const [searchQuery] = useSearchParams();\n  const moveTypeQuery = searchQuery.get('type');\n\n  return <UserMoveModal variant=\"edit\" navigateUrl={`/org/${orgId}/outbound/${userId}/edit`} cancelUrl={`/org/${orgId}/outbound`} moveTypeQuery={moveTypeQuery} />;\n};\nexport const ErrorBoundary = ErrorReport;\nexport default OutboundMoveEdit;\n","export const convertToCSV = (supervisors: any[], subordinates: any[], sponsees: any[]) => {\n  const headers = ['Supervisors', '', 'Subordinates', '', 'Incoming Airman'];\n  const subHeaders = ['Rank', 'Name', 'Rank', 'Name', 'Rank', 'Name'];\n\n  const rows = supervisors.flatMap((supervisor) => {\n    const supervisorSubordinates = subordinates.filter(\n      (subordinate) => subordinate.supervisorId === supervisor.id\n    );\n\n    const supervisorSponsees = sponsees.filter(\n      (sponsee) => sponsee.sponsorId === supervisor.id\n    );\n\n    const maxRowCount = Math.max(\n      supervisorSubordinates.length,\n      supervisorSponsees.length, 1\n    );\n\n    const rowsForSupervisor = Array.from({ length: maxRowCount }).map((_, index) => [\n      index === 0 ? supervisor.rank : '',\n      index === 0 ? supervisor.name : '',\n      supervisorSubordinates[index]?.rank || '',\n      supervisorSubordinates[index]?.name || '',\n      supervisorSponsees[index]?.rank || '',\n      supervisorSponsees[index]?.name || '',\n    ]);\n\n    return rowsForSupervisor;\n  });\n\n  return [\n    headers.join(','),\n    subHeaders.join(','),\n    ...rows.map((row) => row.join(',')),\n  ].join('\\n');\n};\n\n\nexport const downloadCSV = (supervisors: any[], subordinates: any[], sponsees: any[]) => {\n  const now = new Date();\n  const dateStr = now.toISOString().split('T')[0];\n  const timeStr = now.toISOString().split('T')[1].split('.')[0];\n\n  const filename = `Supervisor-Report-${dateStr}-${timeStr}.csv`;\n\n  const csvContent = convertToCSV(supervisors, subordinates, sponsees);\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const url = URL.createObjectURL(blob);\n\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', filename);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\n","import ErrorReport from '@components/ui/ErrorReport';\nimport PageHeader from '@components/ui/PageHeader';\nimport { Attribute } from '@lib/utils';\nimport type { LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { requireUserAsObject } from '@services/user.server';\nimport { getOrgBeingViewed, getSponsorsByOrg, getSubordinates, getSupervisors } from './.server/org.queries';\nimport { CloudArrowDownIcon, MagnifyingGlassCircleIcon, XMarkIcon } from '@heroicons/react/24/outline';\nimport { Dialog, DialogPanel } from '@headlessui/react';\nimport { useState } from 'react';\nimport { downloadCSV } from '@components/Controls/SupervisorExport';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  const { currentOrg } = await requireUserAsObject(request, {\n    permissions: Attribute.MOVES_READ,\n  });\n  const { orgId } = params;\n  if (!orgId) throw new Error('org id is required.');\n\n  const supervisor = await getSupervisors(orgId);\n  const subordinates = await getSubordinates(orgId);\n  const sponsor = await getSponsorsByOrg(orgId);\n\n  const { orgBeingViewed } = await getOrgBeingViewed({\n    defaultOrgId: currentOrg.uuid,\n    searchParams: new URL(request.url).searchParams,\n    params,\n  });\n\n  return json({\n    supervisor,\n    subordinates,\n    sponsor,\n    orgBeingViewed,\n  });\n};\n\nconst SupervisorReport = () => {\n  const { orgBeingViewed, supervisor, subordinates, sponsor } = useLoaderData<typeof loader>();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [supervisorId, setSupervisorId] = useState<string | null>(null);\n\n  const filteredSubordinates = supervisorId\n    ? subordinates.filter((subordinate) => subordinate.supervisorId === supervisorId)\n    : [];\n\n  const filteredSponsors = supervisorId\n    ? sponsor.filter((sponsor) => sponsor.sponsorId === supervisorId )\n    : [];\n\n  return (\n    <>\n      <PageHeader\n        org={orgBeingViewed}\n        pageTitle=\"Supervisors Reports\"\n        navigateTo=\"supervisors\"/>\n\n      <div className=\"w-full flex justify-end\">\n        <button\n          type=\"button\"\n          onClick={() => downloadCSV(supervisor, subordinates, sponsor)}\n          className=\"inline-flex justify-right px-4 py-1 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white\">\n          <CloudArrowDownIcon className=\"w-5 h-5 mr-2\" />\n          Export\n        </button>\n      </div>\n\n      <table className=\"text-left table-auto w-full border-neutral-300\">\n        <thead>\n          <tr className=\"border-b border-black\">\n            <th>Name</th>\n            <th>Rank</th>\n            <th>Email</th>\n            <th className=\"text-center\">Supervisor Info</th>\n          </tr>\n        </thead>\n        <tbody>\n          {supervisor.length > 0 ? (\n            [...supervisor]\n              .sort((a, b) => (a?.name ?? '').localeCompare(b?.name ?? ''))\n              .map((sup) => (\n                <tr key={sup?.id}>\n                  <td>{sup?.name}</td>\n                  <td>{sup?.rank}</td>\n                  <td>{sup?.workEmail}</td>\n                  <td className=\"flex justify-center\">\n                    <button\n                      onClick={() => {\n                        setIsOpen(true);\n                        setSupervisorId(sup?.id);\n                      }}>\n                      <MagnifyingGlassCircleIcon className=\"h-10 w-10\" />\n                    </button>\n                  </td>\n                </tr>\n              ))\n          ) : (\n            <tr>\n              <td colSpan={4} className=\"text-center\">\n                No supervisors found.\n              </td>\n            </tr>\n          )}\n\n        </tbody>\n      </table>\n\n      <div>\n        {isOpen && (\n          <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\n            <div className=\"fixed inset-0 bg-black bg-opacity-30\" aria-hidden=\"true\"></div>\n            <div className=\"fixed inset-0 flex items-center justify-center\">\n              <DialogPanel className=\"bg-white p-4 rounded-md\">\n                <div className=\"flex justify-center items-center w-full\">\n                  <p className=\"text-center text-lg flex-grow\">Supervisor Information</p>\n                  <XMarkIcon\n                    onClick={() => setIsOpen(false)}\n                    className=\"size-10 cursor-pointer ml-4\"\n                  />\n                </div>\n\n                <p className=\"text-md font-semibold mt-2\">Subordinates:</p>\n                {filteredSubordinates.length > 0 ? (\n                  <>\n                    <div className=\"overflow-x-auto p-4\">\n                      <table className=\"min-w-full w-[500px] table-auto border-none\">\n                        <thead>\n                          <tr>\n                            <th className=\"px-4 py-2 text-left\">Name</th>\n                            <th className=\"px-4 py-2 text-left\">Rank</th>\n                            <th className=\"px-4 py-2 text-left\">Email</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {[...filteredSubordinates]\n                            .sort((a, b) => (a?.name ?? '').localeCompare(b?.name ?? ''))\n                            .map((subordinate) => (\n                              <tr key={subordinate.id}>\n                                <td className=\"px-4 whitespace-nowrap truncate\">{subordinate.name}</td>\n                                <td className=\"px-4\">{subordinate.rank}</td>\n                                <td className=\"px-4\">{subordinate.workEmail}</td>\n                              </tr>\n                            ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </>\n                ) : (\n                  <p>No subordinates found for this supervisor.</p>\n                )}\n\n                <p className=\"text-md font-semibold mt-4\">Incoming Airman:</p>\n                {filteredSponsors.length > 0 ? (\n                  <>\n                    <div className=\"overflow-x-auto p-4\">\n                      <table className=\"min-w-full w-[500px] table-auto border-none\">\n                        <thead>\n                          <tr>\n                            <th className=\"px-4 py-2 text-left\">Name</th>\n                            <th className=\"px-4 py-2 text-left\">Rank</th>\n                            <th className=\"px-4 py-2 text-left\">Email</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {[...filteredSponsors]\n                            .sort((a, b) => (a?.name ?? '').localeCompare(b?.name ?? ''))\n                            .map((sponsor) => (\n                              <tr key={sponsor.id}>\n                                <td className=\"px-4 whitespace-nowrap truncate\">{sponsor.name}</td>\n                                <td className=\"px-4\">{sponsor.rank}</td>\n                                <td className=\"px-4\">{sponsor.workEmail}</td>\n                              </tr>\n                            ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </>\n                ) : (\n                  <p>No Incoming Airman found for this supervisor.</p>\n                )}\n              </DialogPanel>\n            </div>\n          </Dialog>\n        )}\n\n      </div>\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default SupervisorReport;\n\n","import { LinkButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport PageHeader from '@components/ui/PageHeader';\nimport { Attribute } from '@lib/utils';\nimport { isAdmin, isSuperAdmin } from '@lib/utils/utils.server';\nimport { json, type LoaderFunctionArgs } from '@remix-run/node';\nimport { Outlet, useLoaderData } from '@remix-run/react';\nimport { requireUserAsObject } from '@services/user.server';\nimport { getOrgBeingViewed } from './.server/org.queries';\nimport { getOrgRolesByOrg } from './.server/role.queries';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  const { currentOrg: org, roles: userRoles } = await requireUserAsObject(\n    request,\n    { permissions: Attribute.ORGS_READ }\n  );\n\n  const { orgBeingViewed } = await getOrgBeingViewed({\n    defaultOrgId: org.uuid,\n    params,\n    searchParams: new URL(request.url).searchParams,\n  });\n\n  const includeSuperAdmin = isSuperAdmin(userRoles);\n  const includeAdmin = isAdmin(userRoles) || includeSuperAdmin;\n\n  const roles = await getOrgRolesByOrg(orgBeingViewed.uuid, { includeAdmin, includeSuperAdmin });\n\n  return json({\n    orgBeingViewed,\n    roles,\n  }, {\n    headers: {\n      'X-Frame-Options': 'SAMEORIGIN',\n    },\n  });\n};\n\nconst ManageRoleIndex = () => {\n  const { roles, orgBeingViewed } = useLoaderData<typeof loader>();\n\n  return (\n    <>\n      <div>\n        <PageHeader org={orgBeingViewed} pageTitle=\"Role Management\" />\n        <LinkButton\n          variant=\"green\"\n          to={`/role/create`}>\n          Add Organizational Role\n        </LinkButton>\n        <div className=\"mt-5\">\n          {roles.length > 0 && (\n            <table className=\"text-left table-auto w-full border-neutral-300 border-1\">\n              <thead>\n                <tr className=\"border-b border-black\">\n                  <th className=\"p-3\">Role:</th>\n                  <th>Email:</th>\n                  <th>Phone:</th>\n                  <th className=\"text-center\">Assigned Users:</th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n                {roles\n                  .sort((a, b) => a.role.name.localeCompare(b.role.name))\n                  .map((orgRole) => {\n                    const isAdmin =\n                      orgRole.role.abbreviation === 'SUPERADMIN' ||\n                      orgRole.role.abbreviation === 'ADMIN';\n\n                    return (\n                      <tr\n                        key={orgRole.uuid}\n                        className=\"table-row border-b even:bg-zinc-50\">\n                        <td className=\"p-3\">{orgRole.role.name}</td>\n                        <td>{!isAdmin && orgRole.contactEmail}</td>\n                        <td>{!isAdmin && orgRole.contactPhone}</td>\n                        <td className=\"text-center\">{orgRole._count.users}</td>\n                        <td className=\"text-right pr-5 gap-x-3 space-x-2\">\n                          <LinkButton\n                            to={`/role/${orgRole.uuid}/users`}>\n                            Users\n                          </LinkButton>\n                          {!isAdmin && (\n                            <>\n                              <LinkButton\n                                variant=\"gray\"\n                                to={`/role/${orgRole.uuid}/edit`}>\n                                Edit\n                              </LinkButton>\n                              <LinkButton\n                                variant=\"red\"\n                                to={`/role/${orgRole.uuid}/delete`}>\n                                Delete\n                              </LinkButton>\n                            </>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </table>\n          )}\n          {roles.length === 0 && <p>No roles found.</p>}\n        </div>\n      </div>\n      <Outlet context={{orgBeingViewed}}/>\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default ManageRoleIndex;\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { Checkbox, InputRow, TextInput, TextLabel } from '@components/ui/Input';\nimport { Modal } from '@components/ui/modals';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Form, useLoaderData } from '@remix-run/react';\nimport { requireUser } from '@services/user.server';\nimport React from 'react';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { deleteRole, getOrgRole } from './.server/role.queries';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  await requireUser(request, {\n    permissions: Attribute.ORGROLES_READWRITEDELETE,\n  });\n\n  const { roleId } = params;\n  if (!roleId) throw json({ status: 'error', error: 'roleId is required.' });\n  const orgRole = await getOrgRole(roleId);\n  return json({ orgRole });\n};\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const roleDelSchema = z.object({\n    roleId: z.string().min(3),\n  });\n  const orgId = new URL(request.url).searchParams.get('org');\n  try {\n    await requireUser(request, {\n      options: { redirectOnFailure: false },\n      permissions: Attribute.ORGROLES_READWRITEDELETE,\n    });\n    const { roleId } = roleDelSchema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n    await deleteRole(roleId);\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      if (e instanceof ZodError) {\n        return jsonWithError(\n          { status: 'error', message: 'validation error', errors: e.errors },\n          'There was an error deleting the role.'\n        );\n      }\n      return jsonWithError(\n        {\n          status: 'error',\n          message:\n            process.env.NODE_ENV === 'development'\n              ? 'This role is required.'\n              : 'There was an error.',\n        },\n        'There was an error deleting the role.'\n      );\n    }\n  }\n\n  return redirectWithSuccess(\n    `/role${orgId ? `?org=${orgId}` : ''}`,\n    'Role Deleted!'\n  );\n}\n\nconst DeleteOrgRoleDefaultPage = () => {\n  const data = useLoaderData<typeof loader>();\n\n  return (\n    <Modal>\n      <Form method=\"POST\">\n        <div className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4 mb-5\">\n          <Modal.Title>Remove Organization Role:</Modal.Title>\n          <input type=\"hidden\" name=\"roleId\" value={data.orgRole?.uuid} />\n          <InputRow>\n            <p>\n              Please enter\n              <code className=\"bg-zinc-300 p-1 m-1 rounded-lg py-1\">\n                {data.orgRole?.role.name}\n              </code>\n              below to confirm the deletion.\n            </p>\n          </InputRow>\n          <InputRow>\n            <TextLabel htmlFor=\"orgname\">Selected Role:</TextLabel>\n            <TextInput\n              id=\"orgname\"\n              pattern={data.orgRole?.role.name}\n              required/>\n          </InputRow>\n\n          <InputRow>\n            <Checkbox\n              id=\"helper-checkbox\"\n              name=\"helper-checkbox\"\n              aria-describedby=\"helper-checkbox-text\"\n              label=\"Confirm Role Deletion\"\n              required/>\n          </InputRow>\n        </div>\n        <Modal.Buttons link=\"..\" value=\"delete\">\n          Delete\n        </Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default DeleteOrgRoleDefaultPage;\n","import { Form, Label } from '@components/ui';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { Input } from '@components/ui/Input';\nimport { Modal } from '@components/ui/modals';\nimport { Attribute } from '@lib/utils';\nimport type { LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { requireUserAsObject } from '@services/user.server';\nimport React from 'react';\nimport { getOrgRoleWithUsers } from './.server/role.queries';\n\nexport { roleEditActionFunction as action } from './.server/role.queries';\n\nexport const loader = async ({ params, request }: LoaderFunctionArgs) => {\n  const { id: userId } = await requireUserAsObject(request, {\n    permissions: Attribute.ORGROLES_READWRITE,\n  });\n\n  const { roleId } = params;\n  if (!roleId) throw json({ status: 'error', error: 'roleId is required.' }, 500);\n  if (!userId) throw json({ status: 'error', error: 'user id is required.' }, 500);\n\n  const orgRole = await getOrgRoleWithUsers(roleId);\n\n  return json({\n    orgRole,\n  });\n};\n\nconst EditRoleDefaultPage = () => {\n  const { orgRole } = useLoaderData<typeof loader>();\n\n  return (\n    <Modal>\n      <Form method=\"post\">\n        <div className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4 mb-5\">\n          <Modal.Title>\n            Edit Organization Role{' '}\n            <p className=\"text-lg\">{orgRole.role.name}</p>\n          </Modal.Title>\n          <Input.Hidden name=\"orgRoleId\" value={orgRole.uuid} />\n          <Input.Hidden name=\"_action\" value=\"edit\" />\n          <Form.Row>\n            <Label htmlFor=\"contactPhone\">Phone:</Label>\n            <Input.Text\n              name=\"contactPhone\"\n              defaultValue={orgRole.contactPhone}\n              required/>\n          </Form.Row>\n          <Form.Row>\n            <Label htmlFor=\"contactEmail\">Email:</Label>\n            <Input.Email\n              name=\"contactEmail\"\n              defaultValue={orgRole.contactEmail} />\n          </Form.Row>\n        </div>\n        <Modal.Buttons link=\"..\" value=\"edit\">\n          Save\n        </Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default EditRoleDefaultPage;\n","export function AssignUserSelectSkeleton() {\n  return (\n    <div className=\"animate-pulse space-y-2\">\n      <div className=\"flex gap-2 items-center\">\n        <div className=\"h-10 flex-grow bg-gradient-to-r from-zinc-50 to-zinc-100 rounded-full\"></div>\n        <div className=\"h-10 w-24 bg-gradient-to-r from-zinc-50 to-zinc-100 rounded-full\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport function AssignUserModalSkeleton() {\n  return (\n    <div className=\"animate-pulse space-y-2 m-4\">\n      <div className=\"w-24 rounded-full h-10 bg-gradient-to-r from-zinc-50 to-zinc-100\"></div>\n      <div className=\"flex flex-col gap-2 items-center\">\n        <div className=\"h-10 w-full flex-grow bg-gradient-to-r from-zinc-50 to-zinc-100 rounded-full\"></div>\n        <div className=\"h-10 w-full flex-grow bg-gradient-to-r from-zinc-50 to-zinc-100 rounded-full\"></div>\n      </div>\n    </div>\n  );\n}","import {\n  Combobox,\n  ComboboxButton,\n  ComboboxInput,\n  ComboboxOption,\n  ComboboxOptions,\n  Transition,\n} from '@headlessui/react';\nimport { ChevronDownIcon, ChevronUpIcon } from '@heroicons/react/24/solid';\nimport { UserRank } from '@lib/constants';\nimport type { OrgRoleAssignedUsers } from '@lib/types';\nimport React, { useEffect, useState } from 'react';\nimport type { Rank } from '@prisma/client';\nimport { type FetcherWithComponents } from '@remix-run/react';\n\ntype UserSelectProps = {\n  dropdownOptions: OrgRoleAssignedUsers[];\n  formName: string;\n  className?: string;\n  fetcher: FetcherWithComponents<unknown>;\n  isLoading: boolean;\n};\n\nexport function UserSelect({\n  dropdownOptions,\n  formName,\n  className,\n  fetcher,\n  isLoading,\n}: UserSelectProps) {\n  const [selectedOption, setSelectedOption] =\n    useState<OrgRoleAssignedUsers | null>(null);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    if (fetcher.state === 'submitting') {\n      setSelectedOption(null);\n      setQuery('');\n    }\n  }, [fetcher]);\n\n  const filteredUsers =\n    query !== ''\n      ? dropdownOptions.filter((user) =>\n        user.name.toLowerCase().includes(query.toLowerCase())\n      )\n      : dropdownOptions;\n\n  function displayValue(user: { id: string; name: string; rank?: Rank }) {\n    // if (query === '' && selectedOption.id === '') return initialValue.name;\n    if (!user || !selectedOption) return '';\n    if (user.rank) return `${UserRank[user.rank].abb} ${user.name}`;\n\n    return user.name;\n  }\n\n  return (\n    <div className={`${className}`}>\n      <Combobox\n        immediate\n        disabled={fetcher.state !== 'idle' || isLoading}\n        value={selectedOption}\n        onChange={setSelectedOption}\n        virtual={{ options: filteredUsers }}\n        onClose={() => setQuery('')}\n        name={formName}>\n        {({ open }) => (\n          <div className=\"relative\">\n            <ComboboxInput\n              placeholder=\"Please select a member\"\n              displayValue={displayValue}\n              onChange={(event) => setQuery(event.target.value)}\n              className=\"relative w-full bg-white py-1.5 pl-3 pr-10 text-left text-slate-900 focus:outline-none focus:ring-indigo-500/20 sm:text-sm sm:leading-6 rounded-md border-slate-300 text-xs shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50\"></ComboboxInput>\n            <ComboboxButton className=\"group absolute inset-y-0 right-0 px-2.5 border-l border-l-slate-300\">\n              {({ open }) => (\n                <>\n                  {open && (\n                    <ChevronUpIcon\n                      className=\"size-4 fill-slate-900\"\n                      aria-hidden=\"true\"/>\n                  )}\n                  {!open && (\n                    <ChevronDownIcon\n                      className=\"size-4 fill-slate-900\"\n                      aria-hidden=\"true\"/>\n                  )}\n                </>\n              )}\n            </ComboboxButton>\n            <Transition\n              show={open}\n              enter=\"transition duration-100 ease-out\"\n              enterFrom=\"transform scale-95 opacity-0\"\n              enterTo=\"transform scale-100 opacity-100\"\n              leave=\"transition duration-75 ease-out\"\n              leaveFrom=\"transform scale-100 opacity-100\"\n              leaveTo=\"transform scale-95 opacity-0\">\n              <ComboboxOptions\n                anchor={{ to: 'bottom start' }}\n                className=\"[--anchor-max-height:45vh] absolute z-10 w-[30rem] mt-1 overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm\">\n                {({ option: user }) => (\n                  <ComboboxOption\n                    key={`${user.id}-combo-option`}\n                    className=\"cursor-default w-full select-none py-2 pl-10 pr-4 text-gray-900 hover:cursor-pointer data-[active]:bg-blue-300 data-[active]:bg-opacity-60 data-[selected]:bg-zinc-800/20\"\n                    value={user}>\n                    <span className={`block truncate 'font-normal'`}>\n                      {UserRank[user.rank as Rank].abb} {user.name}\n                    </span>\n                  </ComboboxOption>\n                )}\n              </ComboboxOptions>\n            </Transition>\n          </div>\n        )}\n      </Combobox>\n    </div>\n  );\n}\n","import UserSelect from '@components/OrgRoleUserSelect';\nimport { PlusIcon } from '@heroicons/react/24/solid';\nimport { useFetcher, useFetchers } from '@remix-run/react';\nimport { useMemo } from 'react';\n\ntype AssignUserSelectProps = {\n  orgRoleId: string;\n  users: {id:string; name:string;}[]\n}\n\nexport function AssignUserSelect({ orgRoleId, users }: AssignUserSelectProps) {\n  const addUserFetcher = useFetcher();\n  const fetchers = useFetchers();\n  const loadingState = useMemo(() => {\n    return fetchers.some((fetcher) => fetcher.state !== 'idle');\n  }, [fetchers]);\n\n  return (\n    <addUserFetcher.Form method=\"POST\" className=\"flex gap-2 items-center\">\n      <input type=\"hidden\" name=\"orgRoleId\" value={orgRoleId} />\n      <UserSelect\n        dropdownOptions={users}\n        isLoading={loadingState}\n        formName={'newUser'}\n        fetcher={addUserFetcher}\n        className=\"flex-grow\"/>\n      <button\n        name=\"_action\"\n        value=\"addUser\"\n        id=\"submitButton\"\n        type=\"submit\"\n        className=\"inline-flex w-32 px-3 py-5 leading-6 h-8 w- justify-center items-center rounded-md bg-green-600 text-white text-sm font-semibold  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-green-500\">\n        {addUserFetcher.state !== 'idle' && (\n          <>\n            <svg\n              className=\"animate-spin -ml-1 mr-2 size-5\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\">\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"></circle>\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n            </svg>\n            Adding\n          </>\n        )}\n        {addUserFetcher.state === 'idle' && (\n          <>\n            Assign\n          </>\n        )}\n      </button>\n    </addUserFetcher.Form>\n  );\n}","import { TrashIcon } from '@heroicons/react/24/outline';\nimport { useFetcher } from '@remix-run/react';\n\ntype UserListItemProps = {\n  user: { id: string; name: string; };\n  currentUser: string;\n  orgRoleId: string;\n};\n\nexport function UserListItem( { user, currentUser, orgRoleId }: UserListItemProps ) {\n  const deleteFetcher = useFetcher();\n\n  return (\n    <li className=\"flex justify-between items-center px-5 h-12 even:bg-neutral-100\">\n      <p className=\"truncate h-6\">{ user.name }</p>\n      <div className=\"whitespace-nowrap w-10 flex items-center align-middle justify-items-center justify-center\">\n        { user.id === currentUser && (\n          <span className=\"font-normal text-xs rounded-xl bg-blue-500 text-white px-3 py-[0.15rem] self-center\">\n            You\n          </span>\n        ) }\n        { user.id !== currentUser && (\n          <deleteFetcher.Form method=\"POST\">\n            <input type=\"hidden\" name=\"userId\" value={ user.id }/>\n            <input type=\"hidden\" name=\"orgRoleId\" value={ orgRoleId }/>\n            { deleteFetcher.state !== 'idle' && (\n              <>\n                <svg\n                  className=\"animate-spin -ml-1 size-5 items-center rounded-md bg-white text-sm font-semibold text-gray-900 shadow-sm sm:mt-0 sm:w-auto\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\">\n                  <circle\n                    className=\"opacity-25\"\n                    cx=\"12\"\n                    cy=\"12\"\n                    r=\"10\"\n                    stroke=\"currentColor\"\n                    stroke-width=\"4\"></circle>\n                  <path\n                    className=\"opacity-75\"\n                    fill=\"currentColor\"\n                    d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n              </>\n            ) }\n            { deleteFetcher.state === 'idle' && (\n              <button\n                name=\"_action\"\n                value=\"delete\"\n                disabled={ deleteFetcher.state !== 'idle' }\n                className=\"inline-flex text-red-700 p-1 items-center cursor-pointer w-full justify-center drop-shadow-none rounded-md text-sm font-semibold hover:bg-red-200 hover:drop-shadow sm:mt-0 sm:w-auto\">\n                <>\n                  <TrashIcon\n                    className=\"size-6\"\n                    aria-hidden=\"true\"></TrashIcon>\n                </>\n              </button>\n            ) }\n          </deleteFetcher.Form>\n        ) }\n      </div>\n    </li>\n  );\n}","import { UserListItem } from './UserListItem';\n\ntype UserListProps = {\n  users: { id: string; name: string; }[];\n  currentUser: string;\n  orgRoleId: string;\n}\n\nexport function UserList({ users, currentUser, orgRoleId }: UserListProps) {\n  return (\n    <>\n      <ul className=\"w-full divide-y overflow-auto max-h-[60vh]\">\n        {users.map((item) => (\n          <UserListItem\n            key={item.id}\n            currentUser={currentUser}\n            user={item}\n            orgRoleId={orgRoleId}/>\n        ))}\n      </ul>\n    </>\n  );\n}","import {\n  AssignUserModalSkeleton,\n  AssignUserSelectSkeleton,\n  AssignUserSelect,\n  UserList,\n} from '@components/OrgRole/Users';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { Modal } from '@components/ui/modals';\nimport { Attribute } from '@lib/utils';\nimport type { LoaderFunctionArgs } from '@remix-run/node';\nimport { defer } from '@remix-run/node';\nimport { Await, useLoaderData } from '@remix-run/react';\nimport { getOrgBeingViewed } from '@routes/_withNav+/_withSideBar+/_manage+/.server/org.queries';\nimport { requireUserAsObject } from '@services/user.server';\nimport React, { Suspense } from 'react';\nimport { findUsersToAssign, getOrgRoleWithUsers } from './.server/role.queries';\n\nexport { roleEditActionFunction as action } from './.server/role.queries';\n\nexport const loader = async ({ params, request }: LoaderFunctionArgs) => {\n  const { currentOrg: userOrg, id: userId } = await requireUserAsObject(\n    request,\n    {\n      permissions: Attribute.ORGROLES_READWRITE,\n    }\n  );\n\n  const { roleId: orgRoleUuid } = params;\n  if (!orgRoleUuid) throw new Error('roleId is required');\n\n  const searchParams = new URL(request.url).searchParams;\n\n  const { orgBeingViewed: org } = await getOrgBeingViewed({\n    defaultOrgId: userOrg.uuid,\n    params,\n    searchParams,\n  });\n\n  const orgRole = getOrgRoleWithUsers(orgRoleUuid);\n\n  const users = findUsersToAssign(org, orgRole, userId);\n\n  return defer({\n    orgRole,\n    users,\n    currentUser: userId,\n  });\n};\n\nconst EditRoleDefaultPage = () => {\n  const { users, orgRole, currentUser } = useLoaderData<typeof loader>();\n\n  return (\n    <Modal>\n      <div className=\"mb-5\">\n        <Suspense fallback={<AssignUserModalSkeleton />}>\n          <Await resolve={orgRole}>\n            {(orgRole) => (\n              <>\n                <Modal.Title className=\"pt-4 pb-3 px-5 bg-gradient-to-r from-neutral-100 to-neutral-50 border-b border-b-1 border-b-neutral-200/80\">\n                  Assigning Users to:{' '}\n                  <p className=\"text-lg h-6 truncate\">{orgRole.role.name}</p>\n                </Modal.Title>\n                <input type=\"hidden\" name=\"orgRoleId\" value={orgRole.uuid} />\n                <input type=\"hidden\" name=\"_action\" value=\"edit\" />\n                <section className=\"w-full space-y-4 divide-neutral-200/80 px-4\">\n                  <div className=\"\">\n                    <h3 className=\"mb-2 font-semibold text-left w-full\">\n                      Assign a User\n                    </h3>\n                    <Suspense fallback={<AssignUserSelectSkeleton />}>\n                      <Await resolve={users}>\n                        {(usersJson) => (\n                          <>\n                            {usersJson.length > 0 && (\n                              <>\n                                <AssignUserSelect\n                                  users={usersJson}\n                                  orgRoleId={orgRole.uuid}/>\n                              </>\n                            )}\n                            {usersJson.length === 0 && (\n                              <p className=\"mt-2 p-2 text-sm border-t border-t-1\">\n                                No users available to assign.\n                              </p>\n                            )}\n                          </>\n                        )}\n                      </Await>\n                    </Suspense>\n                  </div>\n                  <div className=\"\">\n                    <h3 className=\"text-left font-semibold w-full pb-2 border-b border-b-1 border-b-neutral-200/80 \">\n                      Assigned Users\n                    </h3>\n                    {orgRole.users.length === 0 && (\n                      <p className=\"m-2 text-sm\">\n                        No users have been assigned.\n                      </p>\n                    )}\n                    {orgRole?.users.length > 0 && (\n                      <UserList\n                        users={orgRole?.users}\n                        currentUser={currentUser}\n                        orgRoleId={orgRole.uuid}/>\n                    )}\n                  </div>\n                </section>\n              </>\n            )}\n          </Await>\n        </Suspense>\n      </div>\n      <Modal.Buttons type=\"button\" hideCancelBtn={true} variant=\"outline\">\n        Done\n      </Modal.Buttons>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default EditRoleDefaultPage;\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { Checkbox, InputRow, TextInput, TextLabel } from '@components/ui/Input';\nimport { Modal } from '@components/ui/modals';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Form, useLoaderData, useOutletContext } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport React, { useState } from 'react';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport type { ZodTypeAny } from 'zod';\nimport z, { ZodError } from 'zod';\nimport {\n  createOrgRole,\n  createOrgRoleWithRole,\n  findRolesNotAssigned,\n} from './.server/role.queries';\nimport { getOrgBeingViewed } from './.server/org.queries';\nimport useIsAdmin from '@lib/hooks/useIsAdmin';\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const { currentOrg: org, roles: userRoles } = await requireUserAsObject(request, {\n    permissions: Attribute.ORGROLES_READWRITE,\n  });\n\n  let orgId;\n\n  const orgIdParam = new URL(request.url).searchParams.get('org');\n\n  if (!orgIdParam) {\n    ({ uuid: orgId } = org);\n  } else {\n    orgId = orgIdParam;\n  }\n\n  const {orgBeingViewed: orgs} = await getOrgBeingViewed({defaultOrgId: org.uuid, searchParams: new URL(request.url).searchParams});\n  const roles = await findRolesNotAssigned(orgId, orgs.isWingLevel);\n\n  return json({\n    orgId,\n    roles,\n    userRoles,\n  });\n};\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const zodRadioButton: [ZodTypeAny, ZodTypeAny, ...ZodTypeAny[]] = [\n    z.literal('on').transform(() => true),\n    z.literal('off').transform(() => false),\n  ];\n\n  const createOrgRoleSchema = z.object({\n    contactPhone: z.string().min(3).max(80),\n    contactEmail: z.string().min(3),\n    organizationId: z.string().min(3),\n    roleId: z.string().optional(),\n    _action: z.string(),\n    roleName: z.string().optional(),\n    baseAgency: z.union(zodRadioButton).optional(),\n    roleDescription: z.string().optional(),\n    roleAbbreviation: z.string().refine((val: string) => !(val === 'ADMIN' || val === 'SUPERADMIN' || val === 'USER'), { message: 'Abbreviation cannot be ADMIN or SUPERADMIN.'}).optional(),\n  });\n\n  try {\n    await requireUser(request, {\n      options: {\n        redirectOnFailure: false,\n      },\n      permissions: Attribute.ORGROLES_READWRITE,\n    });\n\n    const {\n      contactPhone,\n      contactEmail,\n      organizationId,\n      roleId,\n      _action,\n      roleName,\n      baseAgency,\n      roleAbbreviation,\n      roleDescription,\n    } = createOrgRoleSchema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n\n    if (_action === 'link' && roleId)\n      await createOrgRole({\n        contactPhone,\n        contactEmail,\n        organizationId,\n        roleId,\n      });\n    if (_action === 'add' && roleName && roleDescription && roleAbbreviation) {\n      // add the role and link\n      await createOrgRoleWithRole({\n        roleName,\n        roleAbbreviation,\n        roleDescription,\n        contactPhone,\n        contactEmail,\n        organizationId,\n        baseAgency,\n      });\n    }\n\n    return redirectWithSuccess(\n      `/role?org=${organizationId}`,\n      'Role Added!'\n    );\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      if (e instanceof ZodError) {\n        return jsonWithError(\n          { status: 'error', message: 'validation error', errors: e.errors },\n          'There was an error adding the role.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', message: e.message },\n        'There was an error adding the role.'\n      );\n    }\n  }\n}\n\nconst CreateRoleDefaultPage = () => {\n  const { roles, orgId, userRoles } = useLoaderData<typeof loader>();\n  const {orgBeingViewed} = useOutletContext();\n  const [isAddRole, setIsAddRole] = useState(roles.length === 0);\n  const {isAdmin} = useIsAdmin(userRoles);\n  const [submitBtnAction, setSubmitBtnAction] = useState(\n    roles.length === 0 ? 'add' : 'link'\n  );\n\n  const selectChangeHandler = (val: number | string) => {\n    if (val === 'add') {\n      setIsAddRole(true);\n      setSubmitBtnAction('add');\n    } else {\n      setIsAddRole(false);\n      setSubmitBtnAction('link');\n    }\n  };\n\n  return (\n    <Modal>\n      <Form method=\"post\">\n        <div className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4 mb-5\">\n          <Modal.Title>Create Organization Role</Modal.Title>\n          <input type=\"hidden\" name=\"organizationId\" value={orgId} />\n          <InputRow>\n            <TextLabel htmlFor=\"roleId\">Role to Link:</TextLabel>\n            <select\n              name=\"roleId\"\n              id=\"roleId\"\n              className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50\"\n              onChange={(e) => {\n                selectChangeHandler(e.currentTarget.selectedOptions[0].value);\n              }}>\n              {roles.map((role) => (\n                <option key={role.uuid} value={role.uuid}>\n                  {role.name}\n                </option>\n              ))}\n              <option value=\"add\">Add New Role</option>\n            </select>\n          </InputRow>\n          {isAddRole && (\n            <>\n              <InputRow>\n                <TextLabel htmlFor=\"roleName\">Role Name:</TextLabel>\n                <TextInput name=\"roleName\" required />\n              </InputRow>\n              <InputRow>\n                <TextLabel htmlFor=\"roleAbbreviation\">\n                  Role Abbreviation:\n                </TextLabel>\n                <TextInput name=\"roleAbbreviation\" required />\n              </InputRow>\n              <InputRow>\n                <TextLabel htmlFor=\"roleDescription\">\n                  Role Description:\n                </TextLabel>\n                <TextInput name=\"roleDescription\" required />\n              </InputRow>\n              {!orgBeingViewed.isWingLevel && isAdmin && <InputRow>\n                <Checkbox label=\"Base Agency?\" name=\"baseAgency\" defaultChecked={false} reverse />\n              </InputRow>}\n              <hr className=\"my-8 h-px border-0 bg-gray-300\" />\n            </>\n          )}\n          <InputRow>\n            <TextLabel htmlFor=\"contactPhone\">Role's Phone Number:</TextLabel>\n            <TextInput\n              name=\"contactPhone\"\n              pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n              required/>\n          </InputRow>\n          <InputRow>\n            <TextLabel htmlFor=\"contactEmail\">Role's Email:</TextLabel>\n            <TextInput name=\"contactEmail\" required />\n          </InputRow>\n        </div>\n        <Modal.Buttons link=\"..\" value={submitBtnAction}>\n          Save\n        </Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default CreateRoleDefaultPage;\n","import { DeleteButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { Attribute, isPrismaKnownError } from '@lib/utils';\nimport type { Role } from '@prisma/client';\nimport { RoleLevel } from '@prisma/client';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useFetcher, useLoaderData } from '@remix-run/react';\nimport { requireUser } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, jsonWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { deleteCustomRole, getCustomRoles } from './.server/role.queries';\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  await requireUser(request, { permissions: Attribute.ROLES_READWRITE });\n  const customRoles = await getCustomRoles();\n\n  return json({ customRoles });\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const deleteSchema = z.object({\n    roleId: z.string(),\n    _action: z.literal('delete'),\n  });\n\n  try {\n    await requireUser(request, { permissions: Attribute.ROLES_READWRITE });\n    const { roleId, _action } = deleteSchema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n\n    if (_action === 'delete') {\n      await deleteCustomRole(roleId);\n      return jsonWithSuccess({ status: 'success' }, 'Role Deleted!');\n    } else {\n      throw new Error('Action not supported.');\n    }\n  } catch (e) {\n    console.error(e);\n    if (e instanceof AuthorizationError) {\n      return jsonWithError(\n        { status: 'error', message: 'User is not authorized.' },\n        'User is not authorized.'\n      );\n    }\n    if (isPrismaKnownError(e)) {\n      if (e.code === 'P2003')\n        return jsonWithError(\n          {\n            status: 'error',\n            message: 'There are still organizational roles linked.',\n          },\n          'There are still organizational roles linked.'\n        );\n    } else if (e instanceof ZodError) {\n      return jsonWithError(\n        {\n          status: 'error',\n          message: 'There was a validation error.',\n          issues: e.issues,\n        },\n        'There was an error.'\n      );\n    } else if (e instanceof Error) {\n      return jsonWithError(\n        { status: 'error', message: 'There was an error.' },\n        'There was an error.'\n      );\n    }\n  }\n}\nconst ManageRoles = () => {\n  const { customRoles } = useLoaderData<typeof loader>();\n  const deleteFetcher = useFetcher();\n  return (\n    <>\n      <h1 className=\"text-2xl mb-6\">Manage Roles</h1>\n      <div>\n        {customRoles.length > 0 ? (\n          <table className=\"text-left table-auto w-full border-neutral-300 border-1\">\n            <thead>\n              <tr className=\"border-b border-black\">\n                <th className=\"text-left pl-3\">Name</th>\n                <th>Abbreviation</th>\n                <th>Description</th>\n                <th>Level</th>\n                <th>Created By Organization</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {customRoles.map((role: Role) => (\n                <tr key={role.uuid} className=\"table-row border-b\">\n                  <td className=\"pl-3 py-4\">{role.name}</td>\n                  <td>{role.abbreviation}</td>\n                  <td>{role.description}</td>\n                  <td>\n                    {role.level === RoleLevel.BASE && 'Base'}\n                    {role.level === RoleLevel.UNIT && 'Unit'}\n                  </td>\n                  <td>{role.createdByOrg.name}</td>\n                  <td className=\"text-right pr-5\">\n                    <deleteFetcher.Form method=\"POST\">\n                      <input type=\"hidden\" name=\"roleId\" value={role.uuid} />\n                      <DeleteButton type=\"submit\" value=\"delete\" name=\"_action\">\n                        Delete\n                      </DeleteButton>\n                    </deleteFetcher.Form>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          'No Custom Roles to edit.'\n        )}\n      </div>\n    </>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default ManageRoles;\n","import { LinkButton } from '@components/ui/Buttons';\nimport { Heading1 } from '@components/ui/Headers';\nimport { json } from '@remix-run/node';\nimport { Outlet, useLoaderData } from '@remix-run/react';\nimport { getAllRoles } from './.server/role.queries';\n\nexport async function loader() {\n  return json({\n    roles: await getAllRoles(),\n  });\n}\n\nexport default function RolePermissions() {\n  const { roles } = useLoaderData<typeof loader>();\n  return (\n    <>\n      <Heading1>Permissions</Heading1>\n      <div className=\"mt-5\">\n        {roles.length > 0 && (\n          <table className=\"text-left table-auto w-full border-neutral-300 border-1\">\n            <thead>\n              <tr className=\"border-b border-black\">\n                <th className=\"p-3\">Role:</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {roles.map((role) => (\n                <tr\n                  key={role.uuid}\n                  className=\"table-row border-b even:bg-zinc-50\">\n                  <td className=\"p-3\">{role.name}</td>\n                  <td className=\"text-right pr-5\">\n                    <LinkButton\n                      variant=\"gray\"\n                      to={`/role/permissions/${role.uuid}`}>\n                      Edit\n                    </LinkButton>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n        {roles.length === 0 && <p>No roles found.</p>}\n      </div>\n      <Outlet />\n    </>\n  );\n}\n","import { Checkbox } from '@components/ui/Input';\nimport { Modal } from '@components/ui/modals';\nimport { AttributeCategory, Operation } from '@lib/utils';\nimport { json, type LoaderFunctionArgs } from '@remix-run/node';\nimport { Form, useLoaderData } from '@remix-run/react';\nimport { getRole } from './.server/role.queries';\n\nexport async function loader({ params }: LoaderFunctionArgs) {\n  if (!params.roleId) throw new Error('role id is required');\n  const { permissions, ...role } = await getRole(params.roleId);\n  return json({\n    role,\n    permissions: JSON.parse(atob(permissions)),\n  });\n}\n\nexport default function EditPermissions() {\n  const { role, permissions } = useLoaderData<typeof loader>();\n  const permissionsMap = new Map<string, Operation[]>(permissions);\n\n  return (\n    <Modal>\n      <Form>\n        <div className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4 mb-5\">\n          <Modal.Title>Edit Permissions for {role.name}</Modal.Title>\n          <div className=\"grid md:grid-cols-3 gap-5\">\n            {Object.entries(AttributeCategory)\n              .sort()\n              .map((val) => {\n                const hasRead =\n                  permissionsMap.get(val[1])?.includes(Operation.READ) ?? false;\n                const hasWrite =\n                  permissionsMap.get(val[1])?.includes(Operation.WRITE) ??\n                  false;\n                const hasDelete =\n                  permissionsMap.get(val[1])?.includes(Operation.DELETE) ??\n                  false;\n                return (\n                  val[0] !== 'ADMIN' && // TODO: SUPER ADMINS Will be the only ones able to change admin\n                  val[0] !== 'SUPERADMIN' && ( // no one should be able to edit super admin\n                    <div\n                      key={`${role.id}-${val[0]}`}\n                      className=\"border-b border-1 pb-5\">\n                      <label className=\"mb-2 block text-sm font-medium text-gray-700\">\n                        {val[0]}\n                      </label>\n                      <Checkbox\n                        label=\"Read\"\n                        defaultChecked={hasRead}\n                        name={`${val[0].toLowerCase()}-read`}/>\n                      <Checkbox\n                        label=\"Write\"\n                        defaultChecked={hasWrite}\n                        name={`${val[0].toLowerCase()}-write`}/>\n                      <Checkbox\n                        label=\"Delete\"\n                        defaultChecked={hasDelete}\n                        name={`${val[0].toLowerCase()}-del`}/>\n                    </div>\n                  )\n                );\n              })}\n          </div>\n        </div>\n        <Modal.Buttons link=\"/role/permissions\" value=\"edit\">\n          Save\n        </Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n}\n","import type { TailwindTextAlignType, TailwindWidthType } from '@lib/types';\nimport type { PropsWithChildren, ReactNode } from 'react';\nimport { createContext, forwardRef, useContext } from 'react';\n\nconst TableContext = createContext<{\n  cells: TableItem[];\n}>({ cells: [] });\n\ntype TableFnProps = React.TableHTMLAttributes<HTMLTableElement> & {\n  cells: TableItem[];\n};\n\nexport type TableItem = {\n  header: string;\n  key: string;\n  width?: TailwindWidthType;\n  textAlign?: TailwindTextAlignType;\n  render?: (\n    item: string,\n    obj: TableRowFnProps['item'],\n  ) => ReactNode | ((item: string) => ReactNode);\n};\n\nfunction TableFn(\n  props: TableFnProps,\n  ref: React.ForwardedRef<HTMLTableElement>\n) {\n  const classes = `text-left table-auto w-full border-neutral-300 border-1${' ' + props.className}`;\n  return (\n    <TableContext.Provider value={{ cells: props.cells }}>\n      <table {...props} ref={ref} className={classes}></table>\n    </TableContext.Provider>\n  );\n}\n\nfunction TableHeaderRowFn(\n  { children, ...props }: React.ThHTMLAttributes<HTMLTableRowElement>,\n  ref: React.ForwardedRef<HTMLTableRowElement>\n) {\n  const { cells } = useContext(TableContext);\n  return (\n    <thead>\n      <tr {...props} ref={ref} className=\"border-b border-black\">\n        {cells.map((cell) => (\n          <th\n            key={`header-${cell.key}`}\n            className={`${cell.width ? ` ${cell.width}` : ''}${cell.textAlign ? ` ${cell.textAlign}` : ''}`}>\n            {cell.header}\n          </th>\n        ))}\n        {children}\n      </tr>\n    </thead>\n  );\n}\n\nfunction TableHeaderFn(\n  props: React.ThHTMLAttributes<HTMLTableCellElement>,\n  ref: React.ForwardedRef<HTMLTableCellElement>\n) {\n  const { cells } = useContext(TableContext);\n  return cells.map((cell) => (\n    <th {...props} ref={ref} key={'8'}>\n      {cell.header}\n    </th>\n  ));\n}\n\nfunction TableBodyFn(\n  { children }: PropsWithChildren,\n  ref: React.ForwardedRef<HTMLTableSectionElement>\n) {\n  return <tbody ref={ref}>{children}</tbody>;\n}\n\ntype TableRowFnProps = React.TableHTMLAttributes<HTMLTableRowElement> & {\n  item: { id: string; [key: string]: any };\n};\n\nfunction TableRowFn(\n  props: TableRowFnProps,\n  ref: React.ForwardedRef<HTMLTableRowElement>\n) {\n  const classes = `table-row border-b even:bg-zinc-50${' ' + props.className}`;\n  const { cells } = useContext(TableContext);\n  const splitKey = (key: string, item: TableRowFnProps['item']) => {\n    const splits = key.split('.');\n\n    let returnVal: typeof item = item;\n\n    splits.forEach((value) => {\n      returnVal = returnVal[value];\n    });\n\n    return returnVal;\n  };\n\n  return (\n    <tr {...props} ref={ref} className={classes}>\n      {cells.map((cell) => {\n        const item = cell.key.includes('.')\n          ? splitKey(cell.key, props.item)\n          : props.item[cell.key];\n\n        return (\n          <td\n            key={`${props.item.id}-${cell.key}`}\n            className={`p-3${cell.width ? ` ${cell.width}` : ''}`}>\n            {cell.render ? cell.render(item, props.item) : item}\n          </td>\n        );\n      })}\n      {props.children}\n    </tr>\n  );\n}\n\nfunction TableCellFn(\n  props: React.TdHTMLAttributes<HTMLTableCellElement>,\n  ref: React.ForwardedRef<HTMLTableCellElement>\n) {\n  return <td {...props} ref={ref} className=\"p-3\"></td>;\n}\n\nfunction TableButtonCellFn(\n  {\n    children,\n    className,\n    ...props\n  }: React.TdHTMLAttributes<HTMLTableCellElement>,\n  ref: React.ForwardedRef<HTMLTableCellElement>\n) {\n  return (\n    <td {...props} ref={ref} className=\"pr-5\">\n      <div className={className}>{children}</div>\n    </td>\n  );\n}\n\nexport let Table = Object.assign(forwardRef(TableFn), {\n  HeaderRow: forwardRef(TableHeaderRowFn),\n  Header: forwardRef(TableHeaderFn),\n  Body: forwardRef(TableBodyFn),\n  Row: forwardRef(TableRowFn),\n  Cell: forwardRef(TableCellFn),\n  ButtonCell: forwardRef(TableButtonCellFn),\n});\n","import { DeleteButton, LinkButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport PageHeader from '@components/ui/PageHeader';\nimport { RichTextView } from '@components/ui/RichText/Viewer';\nimport { Table } from '@components/ui/table/Table';\nimport { TailwindWidth } from '@lib/constants';\nimport { useRootLayoutData } from '@lib/hooks/useMatchesData';\nimport { Attribute, isPrismaKnownError } from '@lib/utils';\nimport { Prisma, type Template } from '@prisma/client';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Outlet, useFetcher, useLoaderData } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport React from 'react';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, jsonWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { getOrgBeingViewed } from './.server/org.queries';\nimport { deleteTemplate } from './.server/template.queries';\nimport useIsAdmin from '@lib/hooks/useIsAdmin';\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const { currentOrg } = await requireUserAsObject(request, {\n    permissions: Attribute.TEMPLATES_READWRITEDELETE,\n  });\n\n  const { orgBeingViewed } = await getOrgBeingViewed(\n    {\n      defaultOrgId: currentOrg.uuid,\n      searchParams: new URL(request.url).searchParams,\n    },\n    true\n  );\n\n  return json({\n    orgBeingViewed: { ...orgBeingViewed },\n  }, {\n    headers: {\n      'X-Frame-Options': 'SAMEORIGIN',\n    },\n  });\n};\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  try {\n    await requireUser(request, {\n      options: { redirectOnFailure: false },\n      permissions: Attribute.TEMPLATES_READWRITEDELETE,\n    });\n\n    const deleteTemplateSchema = z.object({\n      id: z.string(),\n    });\n\n    const { id } = deleteTemplateSchema.parse(\n      Object.fromEntries(await request.formData())\n    );\n\n    const result = await deleteTemplate(id);\n\n    if (result === -1)\n      return jsonWithError(\n        {\n          status: 'error',\n          message:\n            'There are still items in this template. Delete the items first before deleting the template.',\n        },\n        'There are still items in the template.',\n        {\n          headers: {\n            'X-Frame-Options': 'SAMEORIGIN',\n          },\n        }\n      );\n\n    return jsonWithSuccess({ status: 'ok' }, 'Template Deleted!', {\n      headers: {\n        'X-Frame-Options': 'SAMEORIGIN',\n      },\n    });\n  } catch (e) {\n    console.error(e);\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.',\n          {\n            headers: {\n              'X-Frame-Options': 'SAMEORIGIN',\n            },\n          }\n        );\n      } else if (e instanceof ZodError) {\n        return jsonWithError(\n          {\n            status: 'error',\n            message: 'There was a validation error',\n            issues: e.issues,\n          },\n          'There was an error.',\n          {\n            headers: {\n              'X-Frame-Options': 'SAMEORIGIN',\n            },\n          }\n        );\n      } else if (\n        e instanceof Prisma.PrismaClientKnownRequestError &&\n        isPrismaKnownError(e)\n      ) {\n        if (e.code === 'P2003')\n          return jsonWithError(\n            {\n              status: 'error',\n              message:\n                'There are still items in this template. Delete the items first before deleting the template.',\n            },\n            'There are still items in the template.',\n            {\n              headers: {\n                'X-Frame-Options': 'SAMEORIGIN',\n              },\n            }\n          );\n      } else {\n        return jsonWithError(\n          { status: 'error', message: e.message },\n          'There was an error.',\n          {\n            headers: {\n              'X-Frame-Options': 'SAMEORIGIN',\n            },\n          }\n        );\n      }\n    }\n  }\n};\n\nexport default function TemplateIndex() {\n  const deleteFetcher = useFetcher();\n\n  const { orgBeingViewed } = useLoaderData<typeof loader>();\n  const rolesData = useRootLayoutData('roles');\n  const { isAdmin } = useIsAdmin(rolesData);\n\n  const tableContents = [\n    {\n      header: 'Name',\n      key: 'name',\n    },\n    {\n      header: 'Description',\n      key: 'description',\n      width: TailwindWidth['W_3/5'],\n      render: function (description: string) {\n        return (\n          <div className=\"line-clamp-2\">\n            <RichTextView>{description}</RichTextView>\n          </div>\n        );\n      },\n    },\n    {\n      header: 'Active',\n      key: '_count.userChecklists',\n      render: (count: string) => count || 0,\n    },\n  ];\n\n  return (\n    <section>\n      <PageHeader org={orgBeingViewed} pageTitle=\"Available Templates:\" />\n      <div className=\"my-5\">\n        <LinkButton\n          variant=\"green\"\n          to={{\n            pathname: `/template/create`,\n            searchParams: { org: orgBeingViewed.uuid },\n          }}>\n          Create New Template\n        </LinkButton>\n      </div>\n      {orgBeingViewed.templates!.length > 0 ? (\n        <Table cells={tableContents}>\n          <Table.HeaderRow />\n          <Table.Body>\n            {orgBeingViewed.templates?.map((template: Template) => (\n              <Table.Row key={template.id} item={template}>\n                <Table.ButtonCell className=\"text-right\">\n                  <LinkButton\n                    variant=\"gray\"\n                    to={{\n                      pathname: `/template/${template.id}`,\n                      searchParams: { org: orgBeingViewed.uuid },\n                    }}>\n                    View\n                  </LinkButton>\n                  {!isAdmin && (\n                    <deleteFetcher.Form method=\"post\" className=\"inline m-3\">\n                      <input type=\"hidden\" name=\"id\" value={template.id} />\n                      <DeleteButton name=\"_action\" value=\"delete\" type=\"submit\">\n                        Delete\n                      </DeleteButton>\n                    </deleteFetcher.Form>\n                  )}\n                </Table.ButtonCell>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      ) : (\n        'No templates to show.'\n      )}\n      <Outlet />\n    </section>\n  );\n}\n\nexport const ErrorBoundary = ErrorReport;\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { Input, Form, Label } from '@components/ui';\nimport { Modal } from '@components/ui/modals';\nimport { RTEProvider } from '@components/ui/RichText/Editor';\nimport { ChecklistType } from '@lib/constants';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunction, ActionFunctionArgs } from '@remix-run/node';\nimport { useSearchParams  } from '@remix-run/react';\nimport { requireUser } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { createTemplate } from './.server/template.queries';\nimport { useManageTemplateData } from '@lib/hooks/useMatchesData';\n\nexport const action: ActionFunction = async ({\n  request,\n}: ActionFunctionArgs) => {\n  const createSchema = z.object({\n    name: z.string().min(1),\n    description: z.string({ required_error: 'Description is required' }).min(1),\n    type: z.nativeEnum(ChecklistType),\n    orgId: z.string(),\n  });\n\n  try {\n    await requireUser(request, {\n      options: { redirectOnFailure: false },\n      permissions: Attribute.TEMPLATES_READWRITEDELETE,\n    });\n    const formData = Object.fromEntries((await request.formData()).entries());\n    const { name, description, type, orgId } = createSchema.parse({\n      name: formData.name,\n      description: formData.description,\n      type: formData['checklistType'],\n      orgId: formData.orgId,\n    });\n\n    //console.log('--------------', description)\n\n    await createTemplate({\n      name,\n      description,\n      type,\n      owningOrganizationId: orgId,\n    });\n\n    return redirectWithSuccess(\n      `/template${orgId ? `?org=${orgId}` : ''}`,\n      'Template Added!'\n    );\n  } catch (err) {\n    if (err instanceof AuthorizationError) {\n      return jsonWithError(\n        { status: 'error', error: 'Authorization Error.' },\n        'User is not authorized.'\n      );\n    }\n    if (err instanceof ZodError) {\n      err.issues.forEach((issue) =>\n        console.error(\n          `There was an error validating on Template creation!\\n${issue.path} - ${issue.message}`\n        )\n      );\n    }\n\n    return jsonWithError(\n      {\n        status: 'error',\n        error: 'There was an error adding the template.',\n      },\n      'There was an error adding the template.'\n    );\n  }\n};\n\nconst CreateTemplatePage = () => {\n  // TODO: Add confirm to delete\n  const [searchParams] = useSearchParams();\n  const { orgBeingViewed } = useManageTemplateData();\n  const templatesAvail = orgBeingViewed.templates;\n\n  const orgId = searchParams.get('org');\n  const dropDownData = [\n    { id: 'PCS', name: 'PCS' },\n    { id: 'PCA', name: 'PCA' },\n    { id: 'SQ', name: 'SQ'},\n  ];\n\n  const typesToExclude = new Set(templatesAvail.map(template => template.type));\n\n  const filteredDropDownData = dropDownData.filter(\n    (item) => item.id === 'SQ' || !typesToExclude.has(item.id)\n  );\n\n  return (\n    <Modal>\n      <RTEProvider>\n        <Form method=\"post\">\n          <Input.Hidden value={orgId ?? ''} name=\"orgId\" />\n          <Modal.Body>\n            <Modal.Title>Create Template</Modal.Title>\n            <Form.Row>\n              <Label htmlFor=\"checklistType\">Checklist Type</Label>\n              <Input.Select name=\"checklistType\" options={filteredDropDownData} />\n            </Form.Row>\n            <Form.Row>\n              <Label htmlFor=\"name\">Name</Label>\n              <Input.Text name=\"name\" />\n            </Form.Row>\n            <Form.Row>\n              <Label htmlFor=\"description\">Description</Label>\n              <Input.RichText name=\"description\" />\n            </Form.Row>\n          </Modal.Body>\n          <Modal.Buttons\n            link={`/template${orgId ? `?org=${orgId}` : ''}`}>\n          Save\n          </Modal.Buttons>\n        </Form>\n      </RTEProvider>\n    </Modal>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default CreateTemplatePage;\n","import { DeleteButton, LinkButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { RichTextView } from '@components/ui/RichText/Viewer';\nimport type { ChecklistType } from '@lib/constants';\nimport { Attribute, isPrismaKnownError } from '@lib/utils';\nimport { Prisma } from '@prisma/client';\nimport type { ActionFunction, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Outlet, useFetcher, useLoaderData, useParams } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport React, { useEffect, useState } from 'react';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, jsonWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport {\n  deleteTemplateItem,\n  getInheritedChecklistItems,\n  getTemplateWithItems,\n} from './.server/template.queries';\nimport { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/24/outline';\nimport { ChevronDownIcon, ChevronUpIcon } from '@heroicons/react/24/solid';\nimport { getOrgBeingViewed } from './.server/org.queries';\nimport useMatchesData, { useManageLayoutData } from '@lib/hooks/useMatchesData';\n\n// TODO: Errors in this loader should throw not be added to an array\nexport const loader = async ({ params, request }: LoaderFunctionArgs) => {\n  const { currentOrg: org } = await requireUserAsObject(request, {\n    permissions: Attribute.TEMPLATES_READWRITE,\n  });\n  const errors: { message: string }[] = [];\n  const { templateId } = params;\n  if (!templateId) throw new Error('templateId is required');\n\n  \n  const currentSelectedTemplate = await getTemplateWithItems(templateId);\n\n  currentSelectedTemplate.items.sort((a, b) => {\n    if (a.reference === null && b.reference !== null) {\n      return 1;\n    } else if (a.reference !== null && b.reference === null) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n\n  let inheritedItems;\n  if (org.id && currentSelectedTemplate?.type !== undefined) {\n    inheritedItems = await getInheritedChecklistItems(\n      currentSelectedTemplate.organizationId,\n      currentSelectedTemplate?.type as ChecklistType\n    );\n  } else {\n    errors.push({ message: 'No org id specified' });\n  }\n\n  inheritedItems?.reverse();\n  return json({ template: currentSelectedTemplate, inheritedItems, errors });\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const deleteItemSchema = z.object({\n    id: z.string(),\n    _action: z.string().regex(/delete/),\n  });\n  try {\n    await requireUser(request, {\n      permissions: Attribute.TEMPLATES_READWRITE,\n      options: {\n        redirectOnFailure: false,\n      },\n    });\n\n    const { id } = deleteItemSchema.parse(\n      Object.fromEntries(await request.formData())\n    );\n\n    await deleteTemplateItem(id);\n    return jsonWithSuccess({ status: 'success' }, 'Item Deleted!');\n  } catch (e) {\n    console.error(e);\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      if (e instanceof ZodError) {\n        return jsonWithError(\n          {\n            status: 'error',\n            message: 'There was a validation error',\n            issues: e.issues,\n          },\n          'There was an error.'\n        );\n      } else if (\n        e instanceof Prisma.PrismaClientKnownRequestError &&\n        isPrismaKnownError(e)\n      ) {\n        if (e.code === 'P2003')\n          return jsonWithError(\n            {\n              status: 'error',\n              message:\n                'There are still items linked to this template item. Delete the items first before deleting the template.',\n            },\n            'There are still items linked to the template.'\n          );\n      }\n      return jsonWithError(\n        { status: 'error', message: e.message },\n        'There was an error.'\n      );\n    }\n  }\n};\n\nconst ITEMS_PER_PAGE = 10;\n\nexport default function TemplateDetailsView() {\n  const { templateId: checklistId } = useParams();\n  const { template, inheritedItems, errors } = useLoaderData<typeof loader>();\n  const deleteFetcher = useFetcher();\n  const { orgBeingViewed } = useManageLayoutData();\n\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const totalPages = Math.ceil(template?.items.length / ITEMS_PER_PAGE);\n  const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n  const endIndex = startIndex + ITEMS_PER_PAGE;\n  const itemsToShow = template?.items.slice(startIndex, endIndex);\n\n  useEffect(() => {\n    if (itemsToShow.length === 0 && currentPage > 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  }, [itemsToShow.length, currentPage]);\n\n  const goToPrevPage = () => {\n    setCurrentPage(currentPage - 1);\n  };\n  const goToNextPage = () => {\n    setCurrentPage(currentPage + 1);\n  };\n\n  const toggleExpand = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  return (\n    <>\n      <LinkButton className=\"my-5\" variant=\"gray\" to={`/template`}>\n        Back\n      </LinkButton>\n      <div className=\"flex border-b border-gray-200 pb-5 my-5 items-center justify-between\">\n        <div>\n          <div className=\"flex items-baseline\">\n            {/* <h1 className=\"text-2xl font-bold\">Template</h1> */}\n            {/* <p className=\"ml-1.5\">for {template.name}</p> */}\n            <h1 className=\"text-2xl font-bold\">{template.name}</h1>\n            <p className=\"ml-1.5 text-2xl font-bold\">Template</p>\n          </div>\n          <div className=\"max-h-[10.75rem] overflow-y-auto\">\n            <RichTextView>{template.description}</RichTextView>\n          </div>\n        </div>\n        <div>\n          <LinkButton className=\"mx-3\" variant=\"green\" to={`item/create`}>\n            Create New Item\n          </LinkButton>\n          <LinkButton to={`/template/${checklistId}/edit`}>Edit</LinkButton>\n        </div>\n      </div>\n\n      <section className=\"\">\n        {template?.items.length > 0 ? (\n          <>\n            <table className=\"text-left w-[1fr] rounded-t-lg shadow-lg border-collapse\">\n              <thead>\n                <tr className=\"border-b border-zinc-600 text-zinc-800 uppercase bg-zinc-100 dark:bg-zinc-700 dark:text-zinc-400\">\n                  <th className=\"w-72 px-6 py-3 rounded-tl-lg\">Name</th>\n                  <th className=\"py-3\">Description</th>\n                  <th className=\"text-center px-2\">Dorm</th>\n                  <th className=\"text-center px-2\">EFMP</th>\n                  <th className=\"text-center px-2\">Dependents</th>\n                  <th></th>\n                  <th className=\"rounded-tr-lg\"></th>\n                </tr>\n              </thead>\n              <tbody>\n                {itemsToShow.map((item) => (\n                  <tr\n                    key={item.id}\n                    className=\"table-row border-b even:bg-zinc-50\">\n                    <td className=\"py-4 px-6 align-middle line-clamp-2\">\n                      <div className=\"flex items-center\">\n                        <p className=\"line-clamp-2\">\n                          {item.reference ? item.reference.name : item.name}\n                        </p>\n                      </div>\n                    </td>\n                    <td className=\"pr-5\">\n                      <div>\n                        <RichTextView className=\"line-clamp-2 w-[35vw]\">\n                          {item.description === ''\n                            ? item.reference?.description\n                            : item.description}\n                        </RichTextView>\n                      </div>\n                    </td>\n                    <td className=\"text-center border-x border-zinc-400\">\n                      {item.forDormResidents ? '\\u2714' : '\\u2716'}\n                    </td>\n                    <td className=\"text-center border-x border-zinc-400\">\n                      {item.forHasEFMP ? '\\u2714' : '\\u2716'}\n                    </td>\n                    <td className=\"text-center border-x border-zinc-400\">\n                      {item.forHasDependents ? '\\u2714' : '\\u2716'}\n                    </td>\n                    <td className=\"text-right pl-5\">\n                      <LinkButton\n                        to={`/template/${checklistId}/item/${item.uuid}/edit`}\n                        variant=\"gray\">\n                        Edit\n                      </LinkButton>\n                    </td>\n                    <td className=\"pr-5\">\n                      {!item.referenceId && (\n                        <deleteFetcher.Form\n                          method=\"post\"\n                          className=\"inline ml-3\">\n                          <input type=\"hidden\" name=\"id\" value={item.uuid} />\n                          <DeleteButton\n                            name=\"_action\"\n                            value=\"delete\"\n                            type=\"submit\">\n                            Delete\n                          </DeleteButton>\n                        </deleteFetcher.Form>\n                      )}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            {/* If you want to edit the total items shown per page ctrl + f \"ITEMS_PER_PAGE\"*/}\n            <div className=\"flex justify-center mt-5\">\n              <nav aria-label=\"Pagination\">\n                <ul className=\"flex space-x-2\">\n                  {currentPage > 1 && (\n                    <li className=\"flex\">\n                      <button\n                        onClick={goToPrevPage}\n                        disabled={currentPage === 1}\n                        className={`inline-flex items-center space-x-2 rounded-full border border-gray-300 bg-white p-3 font-medium text-black hover:bg-gray-50 ${\n                          currentPage === 1 ? 'cursor-not-allowed' : ''\n                        }`}>\n                        <ChevronLeftIcon className=\"stroke-black w-5 h-5\" />\n                      </button>\n                    </li>\n                  )}\n                  <li>\n                    <span className=\"inline-flex items-center space-x-1 rounded-md bg-white px-4 py-2 text-black text-lg\">\n                      Page <b className=\"mx-1\">{currentPage}</b> of{' '}\n                      <b className=\"ml-1\">{totalPages}</b>\n                    </span>\n                  </li>\n                  {currentPage < totalPages && (\n                    <li className=\"flex\">\n                      <button\n                        onClick={goToNextPage}\n                        disabled={currentPage === totalPages}\n                        className={`inline-flex items-center space-x-2 rounded-full border border-gray-300 bg-white p-3 font-medium text-black hover:bg-gray-50 ${\n                          currentPage === totalPages ? 'cursor-not-allowed' : ''\n                        }`}>\n                        <ChevronRightIcon className=\"stroke-black w-5 h-5\" />\n                      </button>\n                    </li>\n                  )}\n                </ul>\n              </nav>\n            </div>\n          </>\n        ) : (\n          'No items to view. Please use the Create button to add tasks.'\n        )}\n      </section>\n      {inheritedItems && inheritedItems.length > 0 && (\n        <>\n          <hr className=\"my-8 h-px border-0 bg-gray-300\" />\n          <section className=\"border mt-5 rounded\">\n            <div\n              className=\"flex items-center justify-between text-xl font-bold py-1 px-4 hover:cursor-pointer hover:bg-zinc-300 w-full bg-zinc-100 rounded shadow\"\n              onClick={toggleExpand}>\n              <h1>Inherited Items</h1>\n              {isExpanded ? (\n                <ChevronUpIcon className=\"size-8\" />\n              ) : (\n                <ChevronDownIcon className=\"size-8\" />\n              )}\n            </div>\n            {isExpanded && (\n              <ul>\n                {inheritedItems.map(({ name, items, owningOrg }, index) => {\n                  return (\n                    <li\n                      key={`${name}-${index}`}\n                      className=\"mx-3 my-4 first:mt-0\">\n                      <h3 className=\"text-lg font-bold py-3\">{name}</h3>\n                      {items.length > 0 ? (\n                        <div className=\"w-full border border-zinc-300 py-2 rounded-lg shadow-lg text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400\">\n                          {items.map((item) => (\n                            <div\n                              className=\"flex gap-4 items-center w-full justify-between pt-3 even:bg-slate-100 pl-5 border-b last:border-b-0 border-b-1\"\n                              key={item.uuid}>\n                              <div className=\"w-full\">\n                                <h4 className=\"font-medium text-gray-900 whitespace-nowrap dark:text-white\">\n                                  {item.reference\n                                    ? item.reference.name\n                                    : item.name}\n                                </h4>\n                                <div className=\"line-clamp-2 my-4 pr-4 w-full\">\n                                  <RichTextView>\n                                    {item.description === ''\n                                      ? item.reference?.description\n                                      : item.description}\n                                  </RichTextView>\n                                </div>\n                              </div>\n                              <div className=\"pr-3 flex-none\">\n                                {/* <button className=\"border border-2 \">Add to template</button> */}\n                                {/* <LinkButton\n                                  className=\"mx-3\"\n                                  variant=\"green\"\n                                  to=\"item/create\">\n                                  Move to Template\n                                </LinkButton> */}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        'No items to inherit.'\n                      )}\n                    </li>\n                  );\n                })}\n              </ul>\n            )}\n          </section>\n        </>\n      )}\n\n      <Outlet />\n    </>\n  );\n}\nexport const ErrorBoundary = ErrorReport;\n","import ErrorReport from '@components/ui/ErrorReport';\nimport {\n  Select,\n} from '@components/ui/Input';\nimport { Input, Form, Label } from '@components/ui';\nimport { Modal } from '@components/ui/modals';\nimport { RTEProvider } from '@components/ui/RichText/Editor';\nimport { ChecklistType } from '@lib/constants';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useLoaderData, useParams } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { getOrgDescendants } from './.server/org.queries';\nimport { getTemplateWithOrg, updateTemplate } from './.server/template.queries';\nimport { useManageLayoutData } from '@lib/hooks/useMatchesData';\n\nexport const loader = async ({ params, request }: LoaderFunctionArgs) => {\n  const { currentOrg: org } = await requireUserAsObject(request, {\n    permissions: Attribute.TEMPLATES_READWRITE,\n  });\n\n  const { templateId } = params;\n\n  if (!templateId)\n    throw json({ status: 'error', error: 'ID is required' }, { status: 400 });\n\n  const template = await getTemplateWithOrg(templateId);\n\n  if (!template) throw json({ error: 'no checklist found.' }, { status: 404 });\n\n  const childOrgs = await getOrgDescendants(org.uuid);\n\n  return json({ template, childOrgs });\n};\n\nexport const action = async ({\n  request,\n  params,\n}: ActionFunctionArgs) => {\n  const { templateId } = params;\n  if (!templateId) return json({ status: 'error', error: 'No checklist id.' });\n\n  const checklistEditSchema = z.object({\n    id: z.string().min(1),\n    name: z.string().min(1),\n    description: z.string().min(1),\n    redirectOrg: z.string().optional(),\n    type: z.nativeEnum(ChecklistType),\n    // owningOrgId: z.string().optional(),\n  });\n\n  try {\n    await requireUser(request, {\n      options: {\n        redirectOnFailure: false,\n      },\n      permissions: Attribute.TEMPLATES_READWRITE,\n    });\n    const formData = await request.formData();\n    const { id, name, description, type, redirectOrg } = \n      checklistEditSchema.parse({\n        id: formData.get('templateId'),\n        name: formData.get('name'),\n        description: formData.get('description'),\n        type: formData.get('checklistType'),\n        redirectOrg: formData.get('redirectOrg'),\n        // owningOrgId: formData.get('owningOrg'),\n      });\n\n    await updateTemplate(id, {\n      type,\n      description,\n      name,\n      // owningOrganizationId: owningOrgId,\n    });\n\n    return redirectWithSuccess(`..?org=${redirectOrg}`, 'Template saved!');\n  } catch (err) {\n    console.error(err);\n    if (err instanceof AuthorizationError) {\n      return jsonWithError(\n        { status: 'error', error: 'Authorization Error.' },\n        'User is not authorized.'\n      );\n    }\n    if (err instanceof ZodError) {\n      err.issues.forEach((issue) =>\n        console.error(\n          `There was an error validating on Template creation!\\n${issue.path} - ${issue.message}`\n        )\n      );\n      return jsonWithError({\n        status: 'error',\n        error: {\n          message: 'There was an error adding the template.',\n          items: err.issues,\n        },\n      }, 'There was an error adding the template!');\n    }\n\n    return jsonWithError({ status: 'error', error: 'There was an error adding the template.' }, 'There was an error adding the template!');\n  }\n};\n\nconst EditTemplate = () => {\n  const { templateId } = useParams();\n  const { template, childOrgs } = useLoaderData<typeof loader>();\n  const { orgBeingViewed } = useManageLayoutData();\n\n  //Gross hardcode\n  const checklistTypes = [\n    { id: ChecklistType.PCS, name: 'PCS' },\n    { id: ChecklistType.PCA, name: 'PCA' },\n    { id: ChecklistType.SQ, name: 'SQ'},\n  ];\n\n  return (\n    <Modal>\n      <RTEProvider>\n        <Form method=\"post\">\n          <Input.Hidden name=\"redirectOrg\" value={orgBeingViewed.uuid} />\n          <Input.Hidden name=\"templateId\" value={templateId} />\n          <Modal.Body>\n            <Modal.Title>Edit Template</Modal.Title>\n            <Form.Row>\n              <Label htmlFor=\"name\">Name</Label>\n              <Input.Text name=\"name\" defaultValue={template.name}></Input.Text>\n            </Form.Row>\n            <Form.Row>\n              <Label htmlFor=\"checklistType\">Checklist Type</Label>\n              <Select\n                name=\"checklistType\"\n                defaultValue={template.type}\n                options={checklistTypes} />\n            </Form.Row>\n            <Form.Row>\n              <Label htmlFor=\"description\">Description</Label>\n              <Input.RichText content={template.description} name=\"description\"></Input.RichText>\n            </Form.Row>\n            {/* <Form.Row>\n              <Label htmlFor=\"owningOrg\">Owning Organization</Label>\n              <Select\n                name=\"owningOrg\"\n                defaultValue={\n                  childOrgs.find(\n                    (org: { id: string }) =>\n                      org.id === template.organizationId\n                  )?.id\n                }\n                options={childOrgs} />\n            </Form.Row> */}\n          </Modal.Body>\n          <Modal.Buttons\n            link={`/template/${templateId}?org=${template.owningOrganization.id}`}\n            value=\"edit\">\n          Save\n          </Modal.Buttons>\n        </Form>\n      </RTEProvider>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default EditTemplate;\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { Input, Form, Label } from '@components/ui';\nimport { Modal } from '@components/ui/modals';\nimport { RTEProvider } from '@components/ui/RichText/Editor';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useLoaderData, useParams } from '@remix-run/react';\nimport { requireUser } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport type { editTemplateItemLoader} from './.server/template.queries';\nimport { updateTemplateItem } from './.server/template.queries';\n\nexport { editTemplateItemLoader as loader } from './.server/template.queries';\n\nexport const action = async ({\n  request,\n  params,\n}: ActionFunctionArgs) => {\n  const { templateId } = params;\n  if (!templateId) throw json({ error: 'No checklist id.' });\n\n  const itemEditSchema = z.object({\n    id: z.string().min(1),\n    name: z.string().optional(),\n    description: z.string(),\n    requiredRole: z.string().min(1),\n    forHasDependents: z.union([\n      z.literal('on').transform(() => true),\n      z.literal(undefined).transform(() => false),\n    ]),\n    forDormResidents: z.union([\n      z.literal('on').transform(() => true),\n      z.literal(undefined).transform(() => false),\n    ]),\n    forHasEFMP: z.union([\n      z.literal('on').transform(() => true),\n      z.literal(undefined).transform(() => false),\n    ]),\n  });\n\n  try {\n    await requireUser(request, { permissions: Attribute.TEMPLATES_READWRITE });\n    const {\n      id,\n      name,\n      description,\n      requiredRole: requiredRoleId,\n      forHasDependents,\n      forHasEFMP,\n      forDormResidents,\n    } = itemEditSchema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n\n    await updateTemplateItem(id, {\n      name,\n      description,\n      requiredRoleId,\n      forHasDependents,\n      forHasEFMP,\n      forDormResidents,\n    });\n  } catch (err) {\n    console.error(err);\n    if (err instanceof AuthorizationError) {\n      return jsonWithError(\n        { status: 'error', error: 'Authorization Error.' },\n        'User is not authorized.'\n      );\n    }\n    if (err instanceof ZodError) {\n      err.issues.forEach((issue) =>\n        console.error(\n          `There was an error validating on item update!\\n${issue.path} - ${issue.message}`\n        )\n      );\n      return jsonWithError(\n        {\n          status: 'error',\n          error: {\n            message: 'There was an error editing the item.',\n            items: err.issues,\n          },\n        },\n        'There was an error.'\n      );\n    }\n\n    return jsonWithError(\n      {\n        status: 'error',\n        error: 'There was an error editing the item.',\n      },\n      'There was an error.'\n    );\n  }\n\n  return redirectWithSuccess(`/template/${templateId}`, 'Item saved!');\n};\n\nconst EditTemplateItem = () => {\n  const { templateId, itemId } = useParams();\n  const { item, roles } = useLoaderData<typeof editTemplateItemLoader>();\n\n  return (\n    <Modal>\n      <RTEProvider>\n        <Form method=\"post\">\n          <Input.Hidden name=\"templateId\" value={templateId} />\n          <Input.Hidden name=\"id\" value={itemId} />\n          <Modal.Body>\n            <Modal.Title>Create New Item</Modal.Title>\n            <Form.Row>\n              {item.reference && <p>{item.reference.name}</p>}\n              {!item.reference && (<>\n                <Label htmlFor=\"name\">Name</Label>\n                <Input.Text name=\"name\" defaultValue={item.name} /></>\n              )}\n            </Form.Row>\n            <Form.Row>\n              <Label htmlFor=\"description\">Description</Label>\n              <Input.RichText content={item.description} limit={1000} name=\"description\"></Input.RichText>\n            </Form.Row>\n            <Form.Row>\n              <Label>Role Required</Label>\n              <Input.Select\n                name=\"requiredRole\"\n                defaultValue={item.requiredRoleId}\n                options={roles}\n                valueKey=\"uuid\" />\n            </Form.Row>\n            <Form.Row>\n              <Label.Heading>Questions</Label.Heading>\n              <Input.CheckboxGroup>\n                <Input.Checkbox\n                  label=\"For Members that are Dorm Residents\"\n                  defaultChecked={item.forDormResidents ?? false}\n                  name=\"forDormResidents\"/>\n                <Input.Checkbox\n                  label=\"For Members with Dependents\"\n                  defaultChecked={item.forHasDependents ?? false}\n                  name=\"forHasDependents\"/>\n                <Input.Checkbox\n                  label=\"For Members with Dependents that qualify for EFMP\"\n                  defaultChecked={item.forHasEFMP ?? false}\n                  name=\"forHasEFMP\"/>\n              </Input.CheckboxGroup>\n            </Form.Row>\n          </Modal.Body>\n          <Modal.Buttons link={`/template/${templateId}`} value=\"edit\">\n          Save\n          </Modal.Buttons>\n        </Form>\n      </RTEProvider>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default EditTemplateItem;","import ErrorReport from '@components/ui/ErrorReport';\nimport {\n  Input,\n  Form,\n  Label,\n} from '@components/ui';\nimport { Modal } from '@components/ui/modals';\nimport { RTEProvider } from '@components/ui/RichText/Editor';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs } from '@remix-run/node';\nimport { useLoaderData, useParams } from '@remix-run/react';\nimport { requireUser } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport type { createTemplateItemLoader } from './.server/template.queries';\nimport { createTemplateItem } from './.server/template.queries';\n\nexport { createTemplateItemLoader as loader } from './.server/template.queries';\n\nexport const action = async ({ request, params }: ActionFunctionArgs) => {\n  if (!params.templateId) throw new Error('Template ID is required.');\n\n  const itemCreateSchema = z.object({\n    templateId: z.literal(params.templateId),\n    name: z.string().min(1),\n    description: z.string().optional(),\n    requiredRole: z.string().min(1),\n    forHasDependents: z.union([\n      z.literal('on').transform(() => true),\n      z.literal(undefined).transform(() => false),\n    ]),\n    forDormResidents: z.union([\n      z.literal('on').transform(() => true),\n      z.literal(undefined).transform(() => false),\n    ]),\n    forHasEFMP: z.union([\n      z.literal('on').transform(() => true),\n      z.literal(undefined).transform(() => false),\n    ]),\n  });\n\n  try {\n    await requireUser(request, {\n      options: {\n        redirectOnFailure: false,\n      },\n      permissions: Attribute.TEMPLATES_READWRITE,\n    });\n\n    const {\n      templateId,\n      name,\n      description,\n      requiredRole: requiredRoleId,\n      forHasDependents,\n      forHasEFMP,\n      forDormResidents,\n    } = itemCreateSchema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n\n    await createTemplateItem({\n      name,\n      description,\n      requiredRoleId,\n      templateId,\n      forDormResidents,\n      forHasEFMP,\n      forHasDependents,\n    });\n  } catch (err) {\n    if (err instanceof Error) {\n      if (err instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      if (err instanceof ZodError) {\n        err.issues.forEach((issue) =>\n          console.error(\n            `There was an error validating on item creation!\\n${issue.path} - ${issue.message}`\n          )\n        );\n        return jsonWithError(\n          {\n            status: 'error',\n            error: 'There was an error adding the item.',\n            items: err.issues,\n          },\n          'There was an error adding the item.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', error: err.message },\n        'There was an error adding the item.'\n      );\n    }\n  }\n\n  return redirectWithSuccess(`/template/${params.templateId}`, 'Item Added!');\n};\n\nconst CreateItem = () => {\n  const { templateId } = useParams();\n  const { roles } = useLoaderData<typeof createTemplateItemLoader>();\n\n  return (\n    <Modal>\n      <RTEProvider>\n        <Form method=\"post\">\n          <Input.Hidden name=\"templateId\" value={templateId}/>\n          <div className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4 mb-5\">\n            <Modal.Title>Create New Item</Modal.Title>\n            <Form.Row>\n              <Label htmlFor=\"name\">Name</Label>\n              <Input.Text name=\"name\" />\n            </Form.Row>\n            <Form.Row>\n              <Label htmlFor=\"description\">Description</Label>\n              <Input.RichText name=\"description\" limit={2500} />\n            </Form.Row>\n            <Form.Row>\n              <Label>Role Required</Label>\n              <Input.Select options={roles} valueKey=\"uuid\" name=\"requiredRole\"></Input.Select>\n            </Form.Row>\n            <Form.Row>\n              <Label.Heading>Questions</Label.Heading>\n              <Input.CheckboxGroup>\n                <Input.Checkbox\n                  label=\"For Members that are Dorm Residents\"\n                  name=\"forDormResidents\"/>\n                <Input.Checkbox\n                  label=\"For Members with Dependents\"\n                  name=\"forHasDependents\"/>\n                <Input.Checkbox\n                  label=\"For Members with Dependents that qualify for EFMP\"\n                  name=\"forHasEFMP\"/>\n              </Input.CheckboxGroup>\n            </Form.Row>\n          </div>\n          <Modal.Buttons link={`/template/${templateId}`} value=\"create\">\n          Create Item\n          </Modal.Buttons>\n        </Form>\n      </RTEProvider>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default CreateItem;","import type { UserWithChecklistsAndCount } from '@lib/constants';\nimport { Organization } from '@prisma/client';\nimport { useContext, useEffect, useState } from 'react';\n\nenum FilterType {\n  NONE = 'NONE',\n  VERIFIED = 'VERIFIED',\n  UNVERIFIED = 'UNVERIFIED',\n}\n\nconst useFilteredUsers = ({\n  searchContext,\n  initialUserList,\n}: {\n  searchContext: React.Context<{\n    searchQuery: string;\n    setSearchQuery?: Function;\n  }>;\n  initialUserList: Array<{requestedOrg?:Organization}&Pick<UserWithChecklistsAndCount, 'checklists' | 'currentOrg' | 'workEmail' | 'name' | 'cssVerified' | 'supervisor' | 'id' | 'moveType' | 'previousOrg' | '_count' | 'rank'>>;\n}) => {\n  const { searchQuery } = useContext(searchContext);\n  const [users, setUsers] = useState([...initialUserList]);\n  const [filter, setFilter] = useState<FilterType>(FilterType.NONE);\n  const [filteredUsers, setFilteredUsers] = useState(users);\n\n  const search = (user: { workEmail: string; name: string | null }) =>\n    user.workEmail.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    user.name?.toLowerCase().includes(searchQuery.toLowerCase());\n\n  useEffect(() => {\n    if (initialUserList) setUsers([...initialUserList]);\n  }, [initialUserList]);\n\n  useEffect(() => {\n    switch (filter) {\n      case FilterType.NONE:\n        if (searchQuery === '') setFilteredUsers(() => [...users]);\n        else setFilteredUsers(() => [...users.filter(search)]);\n        break;\n      case FilterType.VERIFIED:\n        if (searchQuery === '')\n          setFilteredUsers(() => [\n            ...users.filter((user) => user.cssVerified !== null),\n          ]);\n        else\n          setFilteredUsers(() => [\n            ...users.filter((user) => user.cssVerified !== null).filter(search),\n          ]);\n        break;\n      case FilterType.UNVERIFIED:\n        if (searchQuery === '')\n          setFilteredUsers(() => [\n            ...users.filter((user) => user.cssVerified === null),\n          ]);\n        else\n          setFilteredUsers(() => [\n            ...users.filter((user) => user.cssVerified === null).filter(search),\n          ]);\n        break;\n      default:\n        break;\n    }\n  }, [searchQuery, filter, users]);\n\n  return { filteredUsers, filter, setFilter };\n};\n\nexport default useFilteredUsers;\n","import { LinkButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport PageHeader from '@components/ui/PageHeader';\nimport useFilteredUsers from '@lib/hooks/useFilteredUsers';\nimport { RolePermissions } from '@lib/utils';\nimport { json, type LoaderFunctionArgs } from '@remix-run/node';\nimport { Outlet, useLoaderData, useSearchParams } from '@remix-run/react';\nimport { SearchContext } from '@routes/_withNav+/_withSideBar+/_layout';\nimport { requireUserAsObject } from '@services/user.server';\nimport { getOrgBeingViewed } from './.server/org.queries';\nimport { getUsersByOrg } from './user+/.server/user.queries';\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const { id: userId, currentOrg } = await requireUserAsObject(request, {\n    permissions: RolePermissions.ADMIN,\n  });\n\n  const { orgBeingViewed, orgParam } = await getOrgBeingViewed({\n    defaultOrgId: currentOrg.uuid,\n    searchParams: new URL(request.url).searchParams,\n  });\n\n  const users = await getUsersByOrg(orgParam, {\n    includeChecklists: true,\n  });\n\n  return json({\n    orgBeingViewed,\n    users,\n    currentUser: { id: userId },\n  });\n};\n\nconst TemplateAssignView = () => {\n  const { users, orgBeingViewed, currentUser } =\n    useLoaderData<typeof loader>();\n  const [searchParams] = useSearchParams();\n\n  const orgParam = searchParams.get('org');\n\n  const {filteredUsers} = useFilteredUsers({searchContext: SearchContext, initialUserList: users});\n\n  return (\n    <>\n      <div className=\"mb-5\">\n        <PageHeader org={orgBeingViewed} pageTitle=\"Assign Template\" />\n        <div className=\"mb-5\">\n          {filteredUsers.length > 0 && (\n            <ul>\n              {filteredUsers.map((user) => (\n                <li\n                  className=\"flex flex-wrap justify-between items-center p-2 border-b border-b-1 border-black even:bg-zinc-50\"\n                  key={`template-${user.id}`}>\n                  <div>\n                    <p className=\"font-bold text-lg flex\">\n                      {user.name}\n                      {user.id === currentUser.id && (\n                        <span className=\"font-normal text-xs rounded-xl bg-blue-500 text-white px-3 py-[0.15rem] ml-1 self-center\">\n                          You\n                        </span>\n                      )}\n                    </p>\n                    <p>Checklists Assigned: {user._count.checklists}</p>\n                  </div>\n                  <LinkButton\n                    variant=\"green\"\n                    to={`/template/assign/${user.id}`}>\n                    Manage Checklists\n                  </LinkButton>\n                </li>\n              ))}\n            </ul>\n          )}\n          {filteredUsers.length === 0 && <p>No Users found.</p>}\n        </div>\n      </div>\n      <Outlet />\n    </>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default TemplateAssignView;\n","import { LinkButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { Modal } from '@components/ui/modals';\nimport { RolePermissions } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useFetcher, useLoaderData, useSearchParams } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport React from 'react';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, jsonWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport {\n  assign,\n  deleteChecklist,\n  getTemplates,\n} from './.server/template.queries';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  await requireUser(request, { permissions: RolePermissions.SUPERADMIN });\n  const { userId } = params;\n  if (!userId) throw json({ status: 'error', error: 'userId is required.' });\n\n  const { user, templates } = await getTemplates(userId);\n\n  return json({\n    user,\n    templates,\n  });\n};\n\nexport const action = async ({ request, params }: ActionFunctionArgs) => {\n  const checklistCreateSchema = z.object({\n    templateId: z.string().optional(),\n    userId: z.string(),\n    checklistId: z.string().optional(),\n    _action: z.union([z.literal('create'), z.literal('delete')]),\n  });\n\n  try {\n    const { id: loggedInUserId } = await requireUserAsObject(request, {\n      options: { redirectOnFailure: false },\n      permissions: RolePermissions.SUPERADMIN,\n    });\n\n    const { templateId, userId, _action, checklistId } =\n      checklistCreateSchema.parse({\n        ...Object.fromEntries((await request.formData()).entries()),\n        userId: params.userId,\n      });\n\n    if (_action === 'delete') {\n      if (!checklistId)\n        return json({ status: 'error', error: 'checklistId is required.' });\n\n      await deleteChecklist(checklistId, userId);\n\n      return jsonWithSuccess(\n        {\n          status: 'success',\n          message: 'Template unassigned successfully',\n        },\n        'Checklist Unassigned!'\n      );\n    }\n    if (_action === 'create') {\n      if (!templateId)\n        return json({ status: 'error', error: 'templateId is required.' });\n\n      await assign({\n        templateId,\n        userId,\n        assignedById: loggedInUserId,\n      });\n\n      return jsonWithSuccess(\n        {\n          status: 'success',\n          message: 'Checklist assigned successfully',\n        },\n        'Checklist Assigned!'\n      );\n    }\n  } catch (e) {\n    console.error(e);\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      if (e instanceof ZodError) {\n        return jsonWithError(\n          {\n            status: 'error',\n            message: 'There were validation errors.',\n            issues: e.issues,\n          },\n          'There was an error.'\n        );\n      }\n      return jsonWithError(\n        {\n          status: 'error',\n          message: e.message,\n        },\n        'There was an error.'\n      );\n    }\n  }\n};\n\nconst UserAssignChecklist = () => {\n  const { user, templates } = useLoaderData<typeof loader>();\n  const [searchParams] = useSearchParams();\n  const unassignChecklist = useFetcher();\n  const assignChecklist = useFetcher();\n  //\n  // const url = searchParams.get('org') ? `?org=${searchParams.get('org')}` : '';\n\n  return (\n    <Modal>\n      <div className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4 mb-5\">\n        <Modal.Title>{user?.name}</Modal.Title>\n        <h2 className=\"text-lg font-bold border-b border-black pb-1 mb-3\">\n          Available Templates\n        </h2>\n        <ul className=\"max-h-[75vh] overflow-y-auto\">\n          {templates?.map((template) => (\n            <li\n              key={template.id}\n              className=\"flex justify-between items-center hover:bg-gray-500 hover:text-slate-100 px-3 py-2 border-b border-black hover:\">\n              {template.name}\n              <div>\n                {template.assigned && (\n                  <unassignChecklist.Form method=\"post\" className=\"inline\">\n                    <input\n                      type=\"hidden\"\n                      name=\"checklistId\"\n                      value={template.checklistId}/>\n                    <button\n                      type=\"submit\"\n                      name=\"_action\"\n                      value=\"delete\"\n                      className=\"mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-red-300 sm:mt-0 sm:w-auto\">\n                      Unassign\n                    </button>\n                  </unassignChecklist.Form>\n                )}\n                <assignChecklist.Form method=\"post\" className=\"inline ml-4\">\n                  <input type=\"hidden\" name=\"templateId\" value={template.id} />\n                  <button\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"create\"\n                    disabled={template.assigned}\n                    className=\"mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-green-200 sm:mt-0 sm:w-auto disabled:bg-gray-300 disabled:text-slate-500\">\n                    {template.assigned ? 'Assigned' : 'Assign'}\n                  </button>\n                </assignChecklist.Form>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6\">\n        <LinkButton variant=\"green\" to={`/template/assign`}>\n          Done\n        </LinkButton>\n      </div>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default UserAssignChecklist;\n","/**\n * This was planned to be a place for CSS to manage user checklists. But that will all be done from the checklist pages\n */\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { TrashIcon } from '@heroicons/react/24/solid';\nimport { userProfileSelect } from '@lib/constants';\nimport { Attribute } from '@lib/utils';\nimport { json, type LoaderFunctionArgs } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport db from '@services/db.server';\nimport { requireUser } from '@services/user.server';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  await requireUser(request, {permissions:[\n    Attribute.MEMBERS_READWRITE,\n    Attribute.CHECKLISTS_READWRITE,\n  ]});\n  const manageChecklist = await db.checklist.findFirst({\n    where: {\n      id: params.checklistId,\n      userId: params.userId,\n    },\n    include: {\n      items: {\n        include: {\n          templateItem: {\n            include: {\n              requiredRole: {\n                include: {\n                  role: true,\n                },\n              },\n            },\n          },\n        },\n      },\n      user: {\n        select: {\n          ...userProfileSelect(),\n        },\n      },\n    },\n  });\n\n  return json({ manageChecklist });\n};\n\nconst ManageUserChecklist = () => {\n  const { manageChecklist } = useLoaderData<typeof loader>();\n\n  return (\n    <>\n      <h1>Manage User Checklist</h1>\n      <h2>{manageChecklist?.user.name}</h2>\n      {manageChecklist && <p>{manageChecklist.name}</p>}\n      <div>\n        {manageChecklist &&\n          manageChecklist.items.map((item) => (\n            <p key={item.id}>\n              {item.templateItem.name} -{' '}\n              {item.isComplete ? 'Complete' : 'Not Complete'} -{' '}\n              {item.templateItem.requiredRole.role.name}{' '}\n              <TrashIcon className=\"h-6 w-6 text-red-700\"></TrashIcon>\n            </p>\n          ))}\n      </div>\n    </>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default ManageUserChecklist;\n","import ErrorReport from '@components/ui/ErrorReport';\nimport RegisterForm from '@components/ui/forms/RegisterForm';\nimport PageHeader from '@components/ui/PageHeader';\nimport type { ManageLayoutOutletContext } from '@lib/types';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport {\n  useLoaderData,\n  useOutletContext,\n} from '@remix-run/react';\nimport { getOrgs, registerUserActionFn } from '@routes/_auth+/register.queries.server';\nimport { getOrgBeingViewed } from '@routes/_withNav+/_withSideBar+/_manage+/.server/org.queries';\nimport { requireUserAsObject } from '@services/user.server';\n\nexport const loader = async () => {\n  const orgs = await getOrgs();\n  return json({ orgs }, {\n    headers: {\n      'X-Frame-Options': 'SAMEORIGIN',\n    },\n  });\n};\n\nexport async function action({ request, params }: ActionFunctionArgs) {\n  const { id: loggedInUser, currentOrg } = await requireUserAsObject(request, {\n    permissions: Attribute.MEMBERS_READWRITE,\n    options: { redirectOnFailure: false },\n  });\n  const { orgBeingViewed } = await getOrgBeingViewed({defaultOrgId: currentOrg.uuid, searchParams: new URL(request.url).searchParams, params });\n  const response = await registerUserActionFn(request, '/user', loggedInUser, orgBeingViewed.uuid);\n  return json(response, {\n    headers: {\n      'X-Frame-Options': 'SAMEORIGIN',\n    },\n  });\n}\n\nconst AccountRegister = () => {\n  const { orgs } = useLoaderData<typeof loader>();\n  const { orgBeingViewed } = useOutletContext<ManageLayoutOutletContext>();\n\n  return (\n    <>\n      <PageHeader org={orgBeingViewed} pageTitle=\"Create User Account\" />\n      <section className=\"container mx-auto h-full px-5\">\n        <RegisterForm orgs={orgs} currentOrg={orgBeingViewed} btnAction=\"create\" registerOrCreate=\"create\" />\n      </section>\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default AccountRegister;\n","import { Menu, MenuButton, MenuItem, MenuItems } from '@headlessui/react';\nimport useGenerateSearchParams from '@lib/hooks/useGenerateSearchParams';\nimport { Link } from '@remix-run/react';\n\nexport type ActionMenuLinkProps = {\n  text: string;\n  url: {pathname: string; searchParams?: Record<string, string>;} | string;\n  type?: 'default' | 'danger'\n}\n\nexport function ActionMenuLink({text, url, type =  'default'}: ActionMenuLinkProps) {\n  const searchParams = useGenerateSearchParams({keysToRemove: 'type', keysToAdd: typeof url !== 'string' ? url.searchParams : undefined});\n  const dangerClass = ' text-red-600 dark:text-gray-300 hover:text-slate-50 hover:bg-red-500 bg-white';\n  const defaultClass = ' text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 dark:hover:text-white';\n  return (\n    <MenuItem>\n      <Link\n        className={`block px-4 py-3 text-sm capitalize transition-colors duration-300 transform${type === 'danger' ? dangerClass : defaultClass}`}\n        to={{\n          pathname: typeof url === 'string' ? url : url.pathname,\n          search: searchParams,\n        }}>\n        {text}\n      </Link>\n    </MenuItem>\n  );\n}\n\nexport default function ActionMenu({\n  children,\n}: React.PropsWithChildren) {\n  return (\n    <Menu as=\"div\" className=\"relative inline-block\">\n      <>\n        <MenuButton\n          className={`inline-flex px-3 py-1 data-[open]:bg-zinc-600 data-[open]:text-slate-50 text-gray-700 bg-zinc-300 text-sm border border-transparent rounded-md dark:text-white focus:border-blue-500 focus:ring-opacity-40 focus:ring focus:outline-none hover:bg-zinc-600 hover:text-slate-50`}>\n            Actions\n          <svg\n            className=\"w-5 h-5 text-gray-800 dark:text-white ml-1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 20 20\"\n            fill=\"currentColor\">\n            <path\n              fillRule=\"evenodd\"\n              d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n              clipRule=\"evenodd\"/>\n          </svg>\n        </MenuButton>\n        <MenuItems className=\"absolute z-50 text-left right-0 mt-2 w-56 origin-top-right divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black/5 focus:outline-none\">\n          {children}\n        </MenuItems>\n      </>\n    </Menu>\n  );\n}\n","import ActionMenu, { ActionMenuLink } from '@components/ui/ActionMenu';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport PageHeader from '@components/ui/PageHeader';\nimport { Table } from '@components/ui/table/Table';\nimport { useRootLayoutData } from '@lib/hooks/useMatchesData';\nimport { Attribute } from '@lib/utils';\nimport { json, type LoaderFunctionArgs } from '@remix-run/node';\nimport { Outlet, useLoaderData } from '@remix-run/react';\nimport { requireUser } from '@services/user.server';\nimport useIsAdmin from '@lib/hooks/useIsAdmin';\nimport { getOnboardingUsers } from './.server/user.queries';\nimport { UserRank } from '@lib/constants';\nimport React from 'react';\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  await requireUser(request, {\n    permissions: Attribute.MEMBERS_READWRITEDELETE,\n  });\n\n  const users = await getOnboardingUsers();\n\n  return json({\n    users,\n  });\n}\n\nexport default function OnboardingUserIndex() {\n  const { users } = useLoaderData<typeof loader>();\n  const roles = useRootLayoutData('roles');\n\n  const { isAdmin } = useIsAdmin(roles);\n\n  const tableContents = [\n    {\n      header: 'Rank',\n      key: 'rank',\n      render: (rank: string) => {\n        return UserRank[rank].abb;\n      },\n    },\n    {\n      header: 'Name',\n      key: 'name',\n    },\n    {\n      header: 'Email',\n      key: 'workEmail',\n    },\n    {\n      header: 'Requested Organization',\n      key: 'requestedOrg.name',\n    },\n  ];\n\n  return (\n    <>\n      <div className=\"mb-5\">\n        <PageHeader pageTitle=\"Onboarding Users\" />\n        <div>\n          {users.length > 0 && (\n            <Table cells={tableContents}>\n              <Table.HeaderRow></Table.HeaderRow>\n              <Table.Body>\n                {users\n                  .sort((a, b) => a.name.localeCompare(b.name))\n                  .map((user) => (\n                    <>\n                      <Table.Row item={user} key={user.id}>\n                        <Table.ButtonCell>\n                          <ActionMenu key={`action-menu-${user.id}`}>\n                            <ActionMenuLink\n                              text=\"Onboard User\"\n                              url={`${user.id}`}/>\n                            {isAdmin && (\n                              <ActionMenuLink\n                                text=\"Delete User Account\"\n                                type=\"danger\"\n                                url={{\n                                  pathname: 'delete',\n                                  searchParams: { userId: user.id },\n                                }}/>\n                            )}\n                          </ActionMenu>\n                        </Table.ButtonCell>\n                      </Table.Row>\n                    </>\n                  ))}\n              </Table.Body>\n            </Table>\n          )}\n          {users.length === 0 && <p>No Users found.</p>}\n        </div>\n      </div>\n      <Outlet />\n    </>\n  );\n}\nexport const ErrorBoundary = ErrorReport;\n","import { Form, Label, Input } from '@components/ui';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { Modal } from '@components/ui/modals';\nimport { Transition } from '@headlessui/react';\nimport { UserRank } from '@lib/constants';\nimport {\n  Outlet,\n  useLoaderData,\n  useParams,\n  useSearchParams,\n} from '@remix-run/react';\nimport type { EditLoaderFn } from '@routes/_withNav+/_withSideBar+/_manage+/user+/.server/user.queries';\nimport { useState} from 'react';\n\nexport {\n  EditLoaderFn as loader,\n  EditActionFn as action,\n} from './.server/user.queries';\n\nconst EditTemplate = () => {\n  const { userId } = useParams();\n  const [searchParams] = useSearchParams();\n  const orgId = searchParams.get('org') ?? '';\n  const { user, orgs, allUsers, loggedIn } = useLoaderData<typeof EditLoaderFn>();\n  const [showMove, setShowMove] = useState(false);\n  const [showSupervisor, setShowSupervisor] = useState(false);\n  const [supervisor, setSupervisor] = useState(false);\n  const [assignedOrg, setAssignedOrg] = useState(null);\n\n  const handleGraduatedChange = () => {\n    setShowSupervisor((prev) => {\n      const newGraduated = !prev;\n      if (!newGraduated) {\n        setSupervisor(false);\n      }\n      return newGraduated;\n    });\n  };\n\n  const handleSupervisorChange = (e) => {\n    const value = e.target.value;\n    setSupervisor(value !== 'default');\n  };\n\n  const isFormValid = () =>\n    user.workEmail !== '' && user.name !== '' && user.currentOrg.name !== '';\n\n  return (\n    <Modal>\n      <Form method=\"post\">\n        <Input.Hidden name=\"_navigateOrgId\" value={orgId} />\n        <Input.Hidden name=\"userId\" value={userId} />\n        <Modal.Body>\n          <Form.Row>\n            <Label htmlFor=\"name\">Name</Label>\n            <Input.Text name=\"name\" defaultValue={user?.name} />\n          </Form.Row>\n          <Form.Row>\n            <Label htmlFor=\"workEmail\">Email</Label>\n            <Input.Email\n              name=\"workEmail\"\n              defaultValue={user?.workEmail}\n              pattern=\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"/>\n          </Form.Row>\n          <div className=\"flex gap-4\">\n            <Form.Row className=\"w-full\">\n              <Label htmlFor=\"assignedOrg\">Assigned Organization</Label>\n              <Input.Select\n                options={orgs}\n                name=\"assignedOrg\"\n                valueKey=\"uuid\"\n                value={assignedOrg} // Bind to state\n                onChange={(e) => setAssignedOrg(e.target.value)}/>\n            </Form.Row>\n            {user.currentOrg?.name === 'GLOBAL' && (\n              <Form.Row className=\"text-center w-full\">\n                <Label htmlFor=\"assignedOrg\">User Requested Organization</Label>\n                <p className=\"mt-1 rounded-md border border-zinc-300 py-2\">\n                  {user.requestedOrg?.name}\n                </p>\n              </Form.Row>\n            )}\n          </div>\n\n          {/* Show Supervisor dropdown only if needed */}\n          {showSupervisor && (\n            <Form.Row>\n              <Label>Supervisor</Label>\n              <Input.Select\n                options={allUsers\n                  .filter((u) => UserRank[u.rank].order > 4)     //4 being SrA, could change to supervisor t/f in db instead of checking rank\n                  .filter((u) => u.currentOrgId === assignedOrg)\n                  .sort((a, b) => a.name.localeCompare(b.name))\n                  .map((u) => ({\n                    id: u.id,\n                    name: `${UserRank[u.rank].abb} ${u.name}`,\n                  }))}\n                name=\"supervisorId\"\n                valueKey=\"id\"\n                defaultValue=\"\"\n                onChange={handleSupervisorChange}/>\n            </Form.Row>\n          )}\n\n          <Form.Row>\n            <Label.Heading>Questions</Label.Heading>\n            <Input.CheckboxGroup>\n              <Input.Checkbox\n                name=\"isDormResident\"\n                defaultChecked={user.isDormResident ?? false}\n                label=\"Is the member a dorm resident?\"/>\n              <Input.Checkbox\n                name=\"hasDependents\"\n                defaultChecked={user.hasDependents ?? false}\n                label=\"Does the member currently have any dependents?\"/>\n              <Input.Checkbox\n                name=\"hasEFMP\"\n                defaultChecked={user.hasEFMP ?? false}\n                label=\"Is the member currently enrolled in the EFMP?\"/>\n              {loggedIn !== 'SUPERADMINPROFILE' && <Input.Checkbox\n                name=\"hasGraduated\"\n                defaultChecked={user.hasGraduated ?? false}\n                label=\"Has the member recently graduated from tech-school (60 days)?\"\n                onChange={handleGraduatedChange}/>}\n            </Input.CheckboxGroup>\n          </Form.Row>\n\n          <Form.Row className=\"border-t-2\">\n            <div className=\"mt-4\">\n              <Input.Checkbox\n                name=\"assignChecklist\"\n                onChange={(e) => setShowMove(e.target.checked)}\n                reverse={true}\n                label={`Would you like to assign a checklist to ${user.name}?`}/>\n            </div>\n            <Transition\n              show={showMove}\n              as=\"div\"\n              enter=\"transition duration-200\"\n              enterFrom=\"opacity-0 -translate-y-10\"\n              enterTo=\"opacity-100 translate-y-0\"\n              leaveTo=\"opacity-0 -translate-y-10\"\n              leave=\"transition duration-200\">\n              <p className=\"mb-2 text-sm text-zinc-600\">\n                What type of checklist would you like to assign?\n              </p>\n              <div className=\"flex gap-10\">\n                <label>\n                  <input\n                    type=\"radio\"\n                    name=\"moveType\"\n                    value=\"PCS\"\n                    required={showMove}\n                    defaultChecked={true}\n                    id=\"pcsMoveType\"\n                    className=\"border sr-only peer border-zinc-400 rounded px-6\"/>\n                  <span className=\"border hover:bg-blue-200 hover:cursor-pointer peer-checked:text-white border-zinc-400 rounded-lg px-6 py-1 text-sm peer select-none peer-checked:bg-blue-500 peer-checked:font-bold font-medium text-gray-900 dark:text-gray-300\">\n                    PCS\n                  </span>\n                </label>\n                <label>\n                  <input\n                    type=\"radio\"\n                    name=\"moveType\"\n                    value=\"PCA\"\n                    required={showMove}\n                    id=\"pcaMoveType\"\n                    className=\"border sr-only peer border-zinc-400 rounded px-6\"/>\n                  <span className=\"border hover:bg-blue-200 hover:cursor-pointer peer-checked:text-white border-zinc-400 rounded-lg px-6 py-1 text-sm peer select-none peer-checked:bg-blue-500 peer-checked:font-bold font-medium text-gray-900 dark:text-gray-300\">\n                    PCA\n                  </span>\n                </label>\n              </div>\n            </Transition>\n          </Form.Row>\n        </Modal.Body>\n        <Modal.Buttons\n          link=\"..\"\n          value=\"onboard\"\n          disabled={showSupervisor && !supervisor}>\n          {user.cssVerified &&\n          isFormValid() &&\n          user.currentOrg?.name === 'GLOBAL'\n            ? 'Save'\n            : 'Verify & Onboard'}\n        </Modal.Buttons>\n      </Form>\n      <Outlet />\n    </Modal>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default EditTemplate;\n","import { DeleteButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport {\n  ExclamationTriangleIcon,\n} from '@heroicons/react/24/outline';\nimport { Attribute } from '@lib/utils';\nimport { handleActionError } from '@lib/utils/utils.server';\nimport {\n  type ActionFunctionArgs,\n  json,\n  type LoaderFunctionArgs,\n} from '@remix-run/node';\nimport { Form, useLoaderData, useNavigate } from '@remix-run/react';\nimport { requireUser } from '@services/user.server';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport { z } from 'zod';\nimport { deleteAccount, getUser } from './.server/user.queries';\nimport { Dialog, DialogPanel } from '@headlessui/react';\nimport React from 'react';\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  await requireUser(request, {\n    permissions: Attribute.MEMBERS_READWRITEDELETE,\n  });\n\n  const searchParams = new URL(request.url).searchParams;\n  const userId = searchParams.get('userId');\n\n  console.log(searchParams, userId);\n\n  if (!userId) throw new Error('userId is required');\n\n  const user = await getUser(userId);\n\n  return json({ user });\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const orgParam = new URL(request.url).searchParams.get('org');\n  const updateAccountStatus = z.object({\n    userId: z.string(),\n    _action: z.literal('delete'),\n  });\n  try {\n    await requireUser(request, {\n      options: { redirectOnFailure: false },\n      permissions: Attribute.MEMBERS_READWRITEDELETE,\n    });\n\n    const { userId } = updateAccountStatus.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n\n    await deleteAccount(userId);\n\n    return redirectWithSuccess(\n      `/user/onboard${orgParam ? `?org=${orgParam}` : ''}`,\n      'Account deleted!'\n    );\n  } catch (e) {\n    return handleActionError(e, 'Account could not be deleted');\n  }\n}\n\nexport default function DeleteAccountPage() {\n  const { user } = useLoaderData<typeof loader>();\n  const navigate = useNavigate();\n\n  return (\n    <Dialog as=\"div\" className=\"relative z-10\" open={true} onClose={() => { navigate(-1); }}>\n      <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75\" />\n      <div className=\"fixed inset-0 z-10 w-screen overflow-y-auto\">\n        <div className=\"flex rounded-xl min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0\">\n          <DialogPanel className=\"relative transform rounded-lg bg-white rounded-t-xl text-left shadow-xl sm:my-8 sm:w-full sm:max-w-2xl\">\n            <Form method=\"post\">\n              <input type=\"hidden\" name=\"userId\" value={user.id} />\n              <div className=\"relative bg-white rounded-t-xl p-2 pb-4\">\n                <div className=\"flex flex-col items-center justify-center mt-8\">\n                  <ExclamationTriangleIcon className=\"w-10 h-10 stroke-red-600\" />\n                  <h1 className=\"text-red-600 text-2xl\">\n                      Delete Account\n                  </h1>\n                </div>\n              </div>\n              <div className=\"bg-gray-200 pb-3 rounded-b-xl\">\n                <div className=\"flex flex-col justify-center items-center p-5 gap-3\">\n                  <h2 className=\"mb-2 text-md font-semibold text-gray-900 dark:text-white\">\n                      Are you sure you want to delete{' '}\n                    <span className=\"bg-gray-400/60 px-2 py-1 rounded-lg text-lg\">\n                      {user.name}'s\n                    </span>{' '}\n                      account?\n                  </h2>\n                  <p>Please enter the word <span className=\"bg-gray-400/60 px-2 py-0.5 rounded-lg\">delete</span> to confirm.</p>\n                  <input type=\"text\" required pattern=\"delete\" className=\"block text-sm invalid:border-red-300 valid:border-green-500 rounded-md border-gray-300 shadow-sm focus:border-primary-400 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500\" />\n                </div>\n                <div className=\"flex items-center justify-center p-2\">\n                  <DeleteButton\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"delete\"\n                    className=\"rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:ml-3 sm:w-auto\">\n                      Delete Account\n                  </DeleteButton>\n                  <button type=\"button\" onClick={() => { navigate(-1); }} className=\"rounded-md bg-white px-3 py-2 text-sm font-semibold text-zinc-800 shadow-sm hover:bg-neutral-300 sm:ml-3 sm:w-auto\">Cancel</button>\n                </div>\n              </div>\n            </Form>\n          </DialogPanel>\n        </div>\n      </div>\n    </Dialog>\n  );\n}\n\nexport const ErrorBoundary = ErrorReport;\n","import ActionMenu, { ActionMenuLink } from '@components/ui/ActionMenu';\nimport { LinkButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport PageHeader from '@components/ui/PageHeader';\nimport { Table, type TableItem } from '@components/ui/table/Table';\nimport {\n  useManageLayoutData,\n  useRootLayoutData,\n} from '@lib/hooks/useMatchesData';\nimport { Attribute } from '@lib/utils';\nimport { json } from '@remix-run/node';\nimport type { SerializeFrom, LoaderFunctionArgs } from '@remix-run/node';\nimport { Outlet, useLoaderData } from '@remix-run/react';\nimport { requireUserAsObject } from '@services/user.server';\nimport useIsAdmin from '@lib/hooks/useIsAdmin';\nimport { getOrgBeingViewed } from '../.server/org.queries';\nimport { getUsersByOrg } from './.server/user.queries';\nimport { TailwindWidth, UserRank } from '@lib/constants';\nimport { useMemo } from 'react';\nimport type { Checklist, ChecklistStatus, Organization } from '@prisma/client';\nimport {\n  ArchiveBoxArrowDownIcon,\n  ArrowUpOnSquareIcon,\n  CheckIcon,\n  LockClosedIcon,\n  LockOpenIcon,\n  PauseCircleIcon,\n  PauseIcon,\n  PlayIcon,\n} from '@heroicons/react/24/outline';\nimport { Badge } from '@components/ui/Badge';\nimport { SolidCheckmark } from '@components/ui/Icons';\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const { id: userId, currentOrg } = await requireUserAsObject(request, {\n    permissions: Attribute.MEMBERS_READWRITEDELETE,\n  });\n\n  const { orgParam } = await getOrgBeingViewed({\n    defaultOrgId: currentOrg?.uuid,\n    searchParams: new URL(request.url).searchParams,\n  });\n\n  const users = await getUsersByOrg(orgParam, {\n    excludeUserId: userId,\n    includeChecklists: true,\n  });\n\n  return json({\n    users,\n  });\n};\n\ntype UserRowProps = {\n  user: SerializeFrom<typeof loader>['users'][number];\n  isAdmin: boolean;\n  orgBeingViewed: Organization;\n};\n\nfunction UserRow({ user, isAdmin, orgBeingViewed }: UserRowProps) {\n  const hasChecklist = useMemo(\n    () => user._count.checklists > 0,\n    [user._count.checklists],\n  );\n\n  const activeChecklist = useMemo(\n    () =>\n      user.checklists.find(\n        (checklist) => checklist.template?.type === user.moveType,\n      ),\n    [user.checklists, user.moveType],\n  );\n\n  return (\n    <Table.Row item={user} key={user.id}>\n      <Table.ButtonCell className=\"flex justify-end\">\n        <ActionMenu>\n          <ActionMenuLink text=\"Manage Account\" url={`${user.id}/edit`} />\n          {user.moveType || hasChecklist ? (\n            <>\n              {hasChecklist ? ( // Move confirmed and checklist assigned\n                activeChecklist && (\n                  <ActionMenuLink\n                    text=\"View Checklist\"\n                    url={`/org/${orgBeingViewed.uuid}/inprocess/${\n                      activeChecklist?.id\n                    }/view`}\n                  />\n                )\n              ) : (\n                // Move awaiting verification\n                <ActionMenuLink text=\"Edit Move\" url={`${user.id}/move/edit`} />\n              )}\n            </>\n          ) : (\n            <ActionMenuLink\n              text=\"Start Move\"\n              url={{\n                pathname: `${user.id}/move/start`,\n                searchParams: { type: 'PCS' },\n              }}\n            />\n          )}\n          {isAdmin && (\n            <ActionMenuLink\n              text=\"Delete User Account\"\n              type=\"danger\"\n              url={`${user.id}/delete`}\n            />\n          )}\n        </ActionMenu>\n      </Table.ButtonCell>\n    </Table.Row>\n  );\n}\n\nfunction ClipboardListIcon({\n  alt,\n  ...props\n}: {\n  className: string;\n  alt: string;\n}) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      {alt && <title>{alt}</title>}\n      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M9 5h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2h-2\" />\n      <path d=\"M9 3m0 2a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v0a2 2 0 0 1 -2 2h-2a2 2 0 0 1 -2 -2z\" />\n      <path d=\"M9 12l.01 0\" />\n      <path d=\"M13 12l2 0\" />\n      <path d=\"M9 16l.01 0\" />\n      <path d=\"M13 16l2 0\" />\n    </svg>\n  );\n}\n\nconst ManageUserIndex = () => {\n  const { users } = useLoaderData<typeof loader>();\n  const { orgBeingViewed } = useManageLayoutData();\n  const roles = useRootLayoutData('roles');\n  const { isAdmin } = useIsAdmin(roles);\n\n  const tableContents: TableItem[] = [\n    {\n      header: '',\n      key: '',\n      width: TailwindWidth.W_40,\n      render: (_, user) => {\n        const hasChecklist = user._count.checklists > 0;\n        const movePending = !hasChecklist && !!user.moveType;\n\n        const activeChecklist: Checklist | undefined = user.checklists.find(\n          (checklist) => checklist.template?.type === user.moveType,\n        );\n\n        function calcStatusVariant() {\n          if (!activeChecklist) {\n            return null;\n          }\n          switch (activeChecklist.status) {\n            case 'Paused':\n              return {\n                variant: 'amber',\n                Icon: <PauseCircleIcon className=\"size-5\" />,\n              };\n            case 'Locked':\n              return {\n                variant: 'red',\n                Icon: <LockOpenIcon className=\"size-5\" />,\n              };\n            case 'InProgress':\n              return {\n                variant: undefined,\n                Icon: <ClipboardListIcon className=\"size-5\" />,\n              };\n            case 'Completed':\n              return {\n                variant: 'green',\n                Icon: <CheckIcon className=\"size-5\" />,\n              };\n            case 'Archived':\n              return {\n                variant: 'purple',\n                Icon: <ArchiveBoxArrowDownIcon className=\"size-5\" />,\n              };\n          }\n          return null;\n        }\n\n        const status = calcStatusVariant();\n\n        return (\n          <div className=\"text-nowrap text-center\">\n            {hasChecklist && activeChecklist && (\n              <div className=\"flex items-center justify-center w-full gap-2\">\n                <LinkButton\n                  variant={status?.variant}\n                  title={status?.text}\n                  className=\"flex items-center justify-center gap-1 text-xs\"\n                  to={`/org/${orgBeingViewed.uuid}/inprocess/${activeChecklist?.id}/view`}\n                >\n                  {status?.Icon}\n                  {activeChecklist.template.type}\n                </LinkButton>\n                <p className=\"text-center\">{status?.text ?? ''}</p>\n              </div>\n            )}\n            {movePending && (\n              <LinkButton\n                title=\"Pending Move\"\n                variant=\"amber\"\n                className=\"inline-flex items-center gap-1 text-xs\"\n                to={`${user.id}/move/edit`}\n              >\n                <ArrowUpOnSquareIcon className=\"size-5\" title=\"Pending Move\" />\n                Edit Move\n              </LinkButton>\n            )}\n            {!movePending && !hasChecklist && (\n              <LinkButton\n                title=\"Pending Move\"\n                variant=\"green\"\n                className=\"inline-flex items-center gap-1 text-xs\"\n                to={{\n                  pathname: `${user.id}/move/start`,\n                  searchParams: { type: 'PCS' },\n                }}\n              >\n                <PlayIcon className=\"size-5\" title=\"Pending Move\" />\n                Start Move\n              </LinkButton>\n            )}\n          </div>\n        );\n      },\n    },\n    {\n      header: 'Rank',\n      key: 'rank',\n      width: 'w-24',\n      textAlign: 'text-center',\n      render: (rank: string) => {\n        return <div className=\"text-right\">{UserRank[rank].abb}</div>;\n      },\n    },\n    {\n      header: 'Name',\n      key: 'name',\n    },\n    {\n      header: 'Email',\n      key: 'workEmail',\n    },\n  ];\n\n  return (\n    <>\n      <div className=\"mb-5\">\n        <PageHeader org={orgBeingViewed} pageTitle=\"Manage Accounts\" />\n        <div>\n          {users.length > 0 && (\n            <Table cells={tableContents}>\n              <Table.HeaderRow></Table.HeaderRow>\n              <Table.Body>\n                {users\n                  .sort((a, b) => a.name.localeCompare(b.name))\n                  .map((user) => {\n                    return (\n                      <UserRow\n                        key={user.id}\n                        user={user}\n                        isAdmin={isAdmin}\n                        orgBeingViewed={orgBeingViewed}/>\n                    );\n                  })}\n              </Table.Body>\n            </Table>\n          )}\n          {users.length === 0 && <p>No Users found.</p>}\n        </div>\n      </div>\n      <Outlet />\n    </>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default ManageUserIndex;\n","import { DeleteButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { Modal } from '@components/ui/modals';\nimport {\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from '@heroicons/react/24/outline';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { Form, useNavigate, useParams } from '@remix-run/react';\nimport { requireUser } from '@services/user.server';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport { z } from 'zod';\nimport { deleteAccount } from './.server/user.queries';\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  await requireUser(request, {\n    permissions: Attribute.MEMBERS_READWRITEDELETE,\n  });\n  return null;\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const orgParam = new URL(request.url).searchParams.get('org');\n  const updateAccountStatus = z.object({\n    userId: z.string(),\n    _action: z.literal('delete'),\n  });\n  try {\n    await requireUser(request, {\n      options: { redirectOnFailure: false },\n      permissions: Attribute.MEMBERS_READWRITEDELETE,\n    });\n\n    const { userId } = updateAccountStatus.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n\n    await deleteAccount(userId);\n\n    return redirectWithSuccess(\n      `/user${orgParam ? `?org=${orgParam}` : ''}`,\n      'Account deleted!'\n    );\n  } catch (e) {\n    console.error(e);\n    return jsonWithError({ status: e }, 'Account could not be deleted', {\n      status: 500,\n    });\n  }\n  // return redirectWithSuccess(\n  //   `/user${orgParam ? `?org=${orgParam}` : ''}`,\n  //   'Member Saved!'\n  // );\n}\n\nexport default function DeleteAccountPage() {\n  const { userId } = useParams();\n  const navigate = useNavigate();\n\n  return (\n    <Modal>\n      <Form method=\"post\">\n        <input type=\"hidden\" name=\"userId\" value={userId} />\n        <div className=\"bg-white p-2\">\n          <div className=\"flex flex-col items-center justify-center\">\n            <ExclamationTriangleIcon className=\"w-10 h-10 stroke-red-600\" />\n            <h1 className=\"text-red-600 text-2xl\">Delete User Account</h1>\n          </div>\n        </div>\n        <div className=\"bg-gray-200\">\n          <div className=\"flex flex-col justify-center items-center p-5\">\n            <h2 className=\"mb-2 text-lg font-semibold text-gray-900 dark:text-white\">\n              Warning: this action cannot be undone.\n            </h2>\n            <ul className=\"max-w-md space-y-1 text-gray-500 list-inside dark:text-gray-400\">\n              <li className=\"flex items-center\">\n                <ExclamationCircleIcon className=\"w-5 h-5 mr-2 stroke-red-600\" />\n                The user will all lose access to thier account.\n              </li>\n              <li className=\"flex items-center\">\n                <ExclamationCircleIcon className=\"w-5 h-5 mr-2 stroke-red-600\" />\n                All historical data will be lost (metrics).\n              </li>\n              <li className=\"flex items-center\">\n                <ExclamationCircleIcon className=\"w-5 h-5 mr-2 stroke-red-600\" />\n                The account cannot be recovered.\n              </li>\n            </ul>\n          </div>\n          <div className=\"flex flex-row-reverse p-2\">\n            <DeleteButton\n              type=\"submit\"\n              name=\"_action\"\n              value=\"delete\"\n              className=\"inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:ml-3 sm:w-auto\">\n              Delete Account\n            </DeleteButton>\n            <button\n              type=\"button\"\n              onClick={() => navigate(-1)}\n              className=\"mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto\">\n              Cancel\n            </button>\n          </div>\n        </div>\n      </Form>\n    </Modal>\n  );\n}\n\nexport const ErrorBoundary = ErrorReport;\n","import { Form, Label, Input } from '@components/ui';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { Modal } from '@components/ui/modals';\nimport { Transition } from '@headlessui/react';\nimport { TrashIcon } from '@heroicons/react/24/solid';\nimport { UserRank } from '@lib/constants';\nimport useIsAdmin from '@lib/hooks/useIsAdmin';\nimport { useRootLayoutData } from '@lib/hooks/useMatchesData';\n\nimport { useLoaderData, useParams, useSearchParams } from '@remix-run/react';\nimport { type EditLoaderFn } from '@routes/_withNav+/_withSideBar+/_manage+/user+/.server/user.queries';\nimport { useState } from 'react';\n\nexport {\n  EditLoaderFn as loader,\n  EditActionFn as action,\n} from './.server/user.queries';\n\nconst EditTemplate = () => {\n  const { userId } = useParams();\n  const [searchParams] = useSearchParams();\n  const orgId = searchParams.get('org') ?? '';\n  const { user, orgs, allUsers } = useLoaderData<typeof EditLoaderFn>();\n  const roles = useRootLayoutData('roles');\n  const { isAdmin } = useIsAdmin(roles);\n  const [supervisor, setSupervisor] = useState(false);\n\n  const handleSupervisorChange = (e) => {\n    const value = e.target.value;\n    if(value !== 'default'){\n      setSupervisor(true);\n    }else{\n      setSupervisor(false);\n    }\n  };\n\n  if(user.supervisorId && !supervisor){\n    setSupervisor(true);\n  }\n\n  return (\n    <Modal>\n      <Form method=\"post\">\n        <Input.Hidden name=\"_navigateOrgId\" value={orgId} />\n        <Input.Hidden name=\"userId\" value={userId} />\n        <Modal.Body>\n          <Form.Row className=\"flex justify-between\">\n            <p className=\"text-sm\">\n              <span className=\"font-medium text-gray-700 mr-1\">\n                Assigned Unit:\n              </span>\n              {user.currentOrg?.name}\n            </p>\n          </Form.Row>\n          <Form.Row>\n            <Label htmlFor=\"name\">Name</Label>\n            <Input.Text name=\"name\" defaultValue={user?.name} />\n          </Form.Row>\n          <Form.Row>\n            <Label htmlFor=\"workEmail\">Email</Label>\n            <Input.Email\n              name=\"workEmail\"\n              defaultValue={user?.workEmail}\n              pattern=\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"/>\n          </Form.Row>\n          <Transition show={isAdmin}>\n            <Form.Row>\n              <Label htmlFor=\"assignedOrg\">Assigned Organization</Label>\n              <Input.Select\n                options={orgs}\n                name=\"assignedOrg\"\n                valueKey=\"uuid\"\n                defaultValue={user.currentOrg?.uuid}/>\n            </Form.Row>\n          </Transition>\n          {/* <InputRow>\n            <TextLabel htmlFor=\"dodId\">DoD ID:</TextLabel>\n            <TextInput\n              name=\"dodId\"\n              defaultValue={user?.dodId}\n              pattern=\"[0-9]{10}\"\n            />\n          </InputRow> */}\n          <Form.Row>\n            <Label>\n              <div className=\"inline-flex\">\n                {user.supervisorId ? 'Assigned Supervisor' : 'Assign Supervisor'}\n                {(!supervisor || user.supervisorId) && <p className=\"text-red-600\">&nbsp; *</p>}\n              </div>\n            </Label>\n            {user.supervisorId ? (\n              <div className=\"flex border w-full p-1 justify-between rounded-md shadow-md\">\n                <div className=\"flex pt-1 pl-2\">\n                  <p className=\"pr-1 \">\n                    {UserRank[allUsers.find((u) => u.id === user.supervisorId)?.rank].abb}\n                  </p>\n                  <p className=\"px-1\">\n                    {allUsers.find((u) => u.id === user.supervisorId)?.name}\n                  </p>\n                </div>\n                <button\n                  name=\"_action\"\n                  value=\"deleteSuper\"\n                  className=\"inline-flex text-red-700 p-1 items-center cursor-pointer w-full justify-center drop-shadow-none rounded-md text-sm font-semibold hover:bg-red-200 hover:drop-shadow sm:mt-0 sm:w-auto\">\n                  <>\n                    <TrashIcon\n                      className=\"size-6\"\n                      aria-hidden=\"true\"></TrashIcon>\n                  </>\n                </button>\n              </div>\n            ) : (\n              <Input.Select\n                options={allUsers\n                  .filter((u) => u.id !== user.id)\n                  // The above line filters out the current user from the list,\n                  // ensuring the user cannot assign themselves as their own supervisor.\n                  //\n                  // The next step filters the list by rank to include only eligible supervisors.\n                  // Hereâ€™s how the rank hierarchy works:\n                  //  1 = AB (Airman Basic)\n                  //  2 = Amn (Airman)\n                  //  3 = A1C (Airman First Class)\n                  //  4 = SrA (Senior Airman)\n                  //  5 = SSgt (Staff Sergeant)\n                  //  6 = TSgt (Technical Sergeant)\n                  //  ...and so on.\n                  // In this case, the logic ensures only ranks greater than 4 (SSgt and above)\n                  // are included in the supervisor list. Modify this logic to suit rank requirements.\n                  .filter((u) => u.currentOrgId === user.currentOrgId)\n                  .filter((u) => UserRank[u.rank].order > 4)\n                  .sort((a, b) => a.name.localeCompare(b.name))\n                  .map((u) => ({\n                    id: u.id,\n                    name: `${UserRank[u.rank].abb} ${u.name}`,\n                  }))}\n                name=\"supervisorId\"\n                valueKey=\"id\"\n                defaultValue=\"\"\n                onChange={(e) => handleSupervisorChange(e)}/>\n            )}\n          </Form.Row>\n          <Form.Row>\n            <Label>\n              {user.sponsorId ? 'Assigned Sponsor' : 'Assign Sponsor'}\n            </Label>\n            {user.sponsorId ? (\n              <div className=\"flex border w-full p-1 justify-between rounded-md shadow-md\">\n                <div className=\"flex pt-1 pl-2\">\n                  <p className=\"pr-1 \">\n                    {UserRank[allUsers.find((u) => u.id === user.sponsorId)?.rank].abb}\n                  </p>\n                  <p className=\"px-1\">\n                    {allUsers.find((u) => u.id === user.sponsorId)?.name}\n                  </p>\n                </div>\n                <button\n                  name=\"_action\"\n                  value=\"deleteSponsor\"\n                  className=\"inline-flex text-red-700 p-1 items-center cursor-pointer w-full justify-center drop-shadow-none rounded-md text-sm font-semibold hover:bg-red-200 hover:drop-shadow sm:mt-0 sm:w-auto\">\n                  <TrashIcon\n                    className=\"size-6\"\n                    aria-hidden=\"true\"></TrashIcon>\n                </button>\n              </div>\n            ) : (\n              <Input.Select\n                options={allUsers\n                  .map((u) => ({\n                    id: u.id,\n                    name: `${UserRank[u.rank].abb} ${u.name}`, // Rank + Name\n                  }))\n                  .sort((a, b) => {\n                    // Only sort by name, not the rank\n                    return a.name.split(' ').slice(1).join(' ').localeCompare(b.name.split(' ').slice(1).join(' ')); // Sort by name part only\n                  })}\n                name=\"sponsorsId\"\n                valueKey=\"id\"\n                defaultValue={\n                  user.sponsorId\n                    ? allUsers.find((u) => u.id === user.sponsorId)?.name\n                    : ''\n                }\n              />\n            )}\n          </Form.Row>\n          <Form.Row>\n            <Label.Heading>Questions</Label.Heading>\n            <Input.CheckboxGroup>\n              <Input.Checkbox\n                name=\"isDormResident\"\n                defaultChecked={user.isDormResident ?? false}\n                label=\"Is the member a dorm resident?\"/>\n              <Input.Checkbox\n                name=\"hasDependents\"\n                defaultChecked={user.hasDependents ?? false}\n                label=\"Does the member currently have any dependents?\"/>\n              <Input.Checkbox\n                name=\"hasEFMP\"\n                defaultChecked={user.hasEFMP ?? false}\n                label=\"Is the member currently enrolled in the EFMP?\"/>\n            </Input.CheckboxGroup>\n            {/*<Checkbox\n              name=\"sponsorReach\"\n              defaultChecked={user.isDormResident ?? false}\n              label=\"Has the member been contacted by their sponsor?\" />*/}\n          </Form.Row>\n        </Modal.Body>\n        <Modal.Buttons\n          link=\"..\"\n          value=\"edit\"\n          disabled={!supervisor}>\n          {user.cssVerified ? 'Save' : 'Verify & Save'}\n        </Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default EditTemplate;\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { UserMoveModal } from '@components/ui/modals';\nexport {\n  editUserMoveLoaderFn as loader,\n  editUserMoveActionFn as action,\n} from '../.server/move.queries';\n\nexport default function UserMove() {\n  return <UserMoveModal variant=\"edit\" cancelUrl={'/user'} />;\n}\n\nexport const ErrorBoundary = ErrorReport;\n","/*\n This page starts movement actions for users.\n Show a form that displays\n - the moving user's name\n - the moving user's current org\n and has inputs for\n - Where the user is going, if known\n - type of move (default to type searchQuery)\n\n Once confirmed\n - remove the user from their current org and populate the next org if known and previous org\n\n */\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { UserMoveModal } from '@components/ui/modals';\nimport { Attribute } from '@lib/utils';\nimport { handleActionError } from '@lib/utils/utils.server';\nimport { MoveType } from '@prisma/client';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { requireUser } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { getOrgsByBase } from '../.server/org.queries';\nimport { getUser, startMemberMove } from './.server/user.queries';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  await requireUser(request, { permissions: Attribute.MOVES_READWRITE });\n  const typeParam = new URL(request.url).searchParams.get('type');\n  // if (!typeParam) throw new Error('type is required');\n\n  const { userId } = params;\n  if (!userId) throw new Error('user id required');\n\n  const user = await getUser(userId);\n\n  let orgs = [];\n  if (!user.currentOrg || !user.currentOrg.base) {\n    throw new Error('Current organization not found.');\n  } else {\n    // if (typeParam === 'PCA') {\n    //   // get orgs by base\n    //   orgs = await context.organization.getAllAtBase(user.currentOrg.baseId);\n    // } else if (typeParam === 'PCS') {\n    //   // get orgs at other bases\n    //   // TODO: Group by base\n    //   orgs = await context.organization.getAllNotAtBase(user.currentOrg.baseId);\n    // } else {\n    //   throw new Error('Incorrect type');\n    // }\n\n    orgs = await getOrgsByBase(user.currentOrg.base.uuid);\n  }\n\n  return json({ user, filteredOrgs: orgs });\n};\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  const actionSchema = z.object({\n    moveType: z.nativeEnum(MoveType),\n    nextOrg: z.string().nullable(),\n    currentOrgId: z.string(),\n    userId: z.string(),\n  });\n\n  try {\n    await requireUser(request, { permissions: Attribute.MOVES_READWRITE });\n\n    let {\n      moveType,\n      nextOrg,\n      userId,\n      currentOrgId: previousOrg,\n    } = actionSchema.parse(\n      Object.fromEntries((await request.formData()).entries())\n    );\n\n    if (nextOrg === '') nextOrg = null;\n\n    await startMemberMove(userId, { moveType, nextOrg, previousOrg });\n\n    return redirectWithSuccess('/user', 'Move Started!');\n  } catch (e) {\n    return handleActionError(e, 'There was an error starting the move.');\n  }\n};\n\nexport default function StartUserMove() {\n  return (\n    <UserMoveModal\n      variant=\"start\"\n      cancelUrl={'/user'}/>\n  );\n}\n\nexport const ErrorBoundary = ErrorReport;\n","import ContainerLayout from '@components/ui/Container';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport SideBarNav from '@components/SideBar';\nimport type { SideBarNavLink } from '@lib/types';\nimport { Attribute } from '@lib/utils';\nimport type { LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Outlet, useLoaderData } from '@remix-run/react';\nimport {\n  getItemCountForAllRoles,\n  getItemCountByUserRole,\n  hasCSSRole,\n  getChecklistItemsByRole,\n} from './.server/tasks.queries';\nimport { requireUserAsObject } from '@services/user.server';\n\nexport const loader = async ({ params, request }: LoaderFunctionArgs) => {\n  const { id, roles: userOrgRoles, currentOrg } = await requireUserAsObject(\n    request,\n    { permissions: Attribute.TASKS_READWRITE }\n  );\n\n  const { orgRoleId: roleId } = params;\n  if (!roleId) throw new Error('roleId is required');\n\n  // const items =\n\n  const orgRole = userOrgRoles.find(orgRole => orgRole.roleId === roleId);\n\n  // if (!orgRole) throw new Error(`could not find orgrole with role id: ${roleId}`);\n\n  // let items;\n  //\n  // if (hasCSSRole(userOrgRoles)) {\n  //   items = getChecklistItemsByRole( roleId, cssOrgId );\n  // } else {\n  //   if (!orgRole) throw new Error(`could not find orgrole with role id: ${roleId}`);\n  //   items = getChecklistItemsByRole( roleId, orgRole?.owningOrgId);\n  // }\n\n  let roles;\n\n  if (hasCSSRole(userOrgRoles)) {\n    const cssOrgId = userOrgRoles.find( orgRole => orgRole.abbreviation === 'CSS' )?.owningOrgId;\n    if ( !cssOrgId ) throw new Error( 'CSS owning org id not found.' );\n    roles = await getItemCountForAllRoles( cssOrgId );\n  }\n  else\n  {\n    if (!orgRole) throw new Error(`could not find orgrole with role id: ${roleId}`);\n    roles = await getItemCountByUserRole( id, orgRole?.owningOrgId );\n  }\n  return json({\n    roleId: params.roleId,\n    roles,\n  }, {\n    headers: {\n      'X-Frame-Options': 'SAMEORIGIN',\n      'Content-Security-Policy': 'frame-ancestors: none',\n    },\n  });\n};\n\n\ntype RoleLinkProps = {\n  info: any & { name: string };\n  notCompleteCount: number;\n  overdueCount: number;\n}\n\nfunction RoleLink({ info, notCompleteCount, overdueCount }: RoleLinkProps) {\n\n  let text = '';\n  if (overdueCount > 0) {\n    if (overdueCount > 99) {\n      text = '99+';\n    } else {\n      text = overdueCount.toString();\n    }\n  } else {\n    if (notCompleteCount > 99) {\n      text = '99+';\n    } else {\n      text = notCompleteCount.toString();\n    }\n  }\n\n  return (\n    <div className=\"flex w-full justify-between\">\n      <span className=\"text-ellipsis overflow-hidden whitespace-nowrap max-w-[calc(100%-3rem)]\">\n        {info.name}\n      </span>\n      {notCompleteCount > 0 && (\n        <span\n          className={`${overdueCount > 0 ? 'bg-red-500' : 'bg-primary-500'} px-2.5 rounded-full text-center text-white`}\n          title=\"Unsigned Tasks\">\n          { text }\n        </span>\n      )}\n    </div>\n  );\n}\n\nconst TasksTabLayout = () => {\n  const { roles } = useLoaderData<typeof loader>();\n\n  let links: SideBarNavLink['links'] = [];\n\n  for (const orgRole of roles) {\n    links.push({\n      text: (\n        <RoleLink\n          info={orgRole}\n          notCompleteCount={orgRole.notCompleteCount ?? 0}\n          overdueCount={orgRole.overdueCount}/>\n      ),\n      href: `/tasks/${orgRole.id}`,\n      urlPattern: orgRole.id,\n      extraClasses: orgRole.overdueCount && orgRole.overdueCount > 0 ? 'font-bold' : undefined,\n    });\n  }\n\n  const sideBarLinks = [\n    {\n      header: 'View Items By Role',\n      links: [...links],\n    },\n  ];\n\n  return (\n    <>\n      <SideBarNav navLinks={sideBarLinks}></SideBarNav>\n      <ContainerLayout>\n        <Outlet />\n      </ContainerLayout>\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default TasksTabLayout;\n","import { Menu, MenuButton, MenuItem, MenuItems, Transition } from '@headlessui/react';\nimport { useParams, useSearchParams } from '@remix-run/react';\nimport type { FilterStatus, SortByStatus } from '@routes/_withNav+/_withSideBar+/tasks.$orgRoleId';\nimport { Fragment, useContext, useEffect } from 'react';\nimport {\n  AdjustmentsHorizontalIcon,\n  FunnelIcon,\n} from '@heroicons/react/24/outline';\nimport { FilterSortContext } from '@lib/hooks/useFilterAndSort';\n\nexport default function FilterSortMenus(/* props: {\n    filterStatus: FilterStatus;\n    sortStatus: SortByStatus;\n    setFilterStatus: (status: FilterStatus) => void;\n    setSortStatus: (status: SortByStatus) => void;\n    filterLabels: Record<FilterStatus, { label: string; icon: string | JSX.Element}>;\n    sortLabels: Record<SortByStatus, { label: string; icon: string | JSX.Element}>;\n  } */) {\n  const context = useContext(FilterSortContext);\n  const { orgRoleId } = useParams();\n  const [_, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    if (context)\n      context.setFilterState('all');\n    // props.setSortStatus('default');\n  }, [orgRoleId]);\n\n  if (!context) {\n    return 'FilterSortMenu must be in a FilterSortContext Provider.';\n  }\n\n  const handleFilterChange = (status: FilterStatus) => {\n    // setSearchParams((prev) => {\n    //   prev.set('page', '1');\n    //   return prev;\n    // });\n    context.setFilterState(status);\n  };  \n    \n  const handleSortChange = (status: SortByStatus) => {\n    // setSearchParams((prev) => {\n    //   prev.set('page', '1');\n    //   return prev;\n    // });\n    context.setSortState(status);\n  };\n  \n  return (\n    <div className=\"relative inline-flex gap-x-2 text-left\">\n      <Menu as=\"div\" className=\"inline-block text-left\">\n        <div className=\"flex gap-3\">\n          <MenuButton className=\"inline-flex justify-center w-full rounded-md border border-gray-300 bg-white text-sm font-medium text-gray-700 shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-gray-100\">\n            <div className=\"flex text-md px-3 py-1\">\n              <FunnelIcon className=\"size-5 mr-2\" />\n              <span>Filter ({context.filterLabels[context.filterState].label})</span>\n            </div>\n          </MenuButton>\n        </div>\n\n        <Transition\n          as={Fragment}\n          enter=\"transition ease-out duration-100\"\n          enterFrom=\"transform opacity-0 scale-95\"\n          enterTo=\"transform opacity-100 scale-100\"\n          leave=\"transition ease-in duration-75\"\n          leaveFrom=\"transform opacity-100 scale-100\"\n          leaveTo=\"transform opacity-0 scale-95\">\n          <MenuItems className=\"absolute left-0 w-44 mt-2 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n            <div className=\"py-1\">\n              {Object.keys(context.filterLabels).map((status) => {\n                return (\n                  <MenuItem\n                    key={status}\n                    data-selected={status === context.filterState ? true : null}>\n                    <button\n                      onClick={() => handleFilterChange(status as FilterStatus)}\n                      className={`block w-full py-2 text-sm text-gray-700 data-[active]:bg-gray-200 data-[selected]:bg-primary-200`}>\n                      <div className=\"flex items-center\">\n                        {context.filterLabels[status as FilterStatus].icon}\n                        {context.filterLabels[status as FilterStatus].label}\n                      </div>\n                    </button>\n                  </MenuItem>\n                );\n              })}\n            </div>\n          </MenuItems>\n        </Transition>\n      </Menu>\n      {context.filteredItems.length > 0 && (\n        <Menu as=\"div\" className=\"inline-block text-left\">\n          <div className=\"flex gap-3\">\n            <MenuButton className=\"inline-flex justify-center w-full rounded-md border border-gray-300 bg-white text-sm font-medium text-gray-700 shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-gray-100\">\n              <div className=\"flex text-md px-3 py-1\">\n                <AdjustmentsHorizontalIcon className=\"size-5 mr-2\" />\n                <span>Sort ({context.sortLabels[context.sortState].label || 'Default'})</span>\n              </div>\n            </MenuButton>\n          </div>\n\n          <Transition\n            as={Fragment}\n            enter=\"transition ease-out duration-100\"\n            enterFrom=\"transform opacity-0 scale-95\"\n            enterTo=\"transform opacity-100 scale-100\"\n            leave=\"transition ease-in duration-75\"\n            leaveFrom=\"transform opacity-100 scale-100\"\n            leaveTo=\"transform opacity-0 scale-95\">\n            <MenuItems anchor=\"bottom start\" className=\"absolute left-0 w-44 mt-2 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n              <div className=\"py-1\">\n                {Object.keys(context.sortLabels)\n                  .filter((key) => key !== 'default')\n                  .map((status) => (\n                    <MenuItem key={status} data-selected={context.sortState === status ? true : null}>\n                      <button\n                        onClick={() => handleSortChange(status as SortByStatus)}\n                        className={`block w-full py-2 text-sm text-gray-700 data-[active]:bg-gray-200 data-[selected]:bg-primary-200`}>\n                        <div className=\"flex items-center\">\n                          {context.sortLabels[status as SortByStatus].icon}\n                          {context.sortLabels[status as SortByStatus].label}\n                        </div>\n                      </button>\n                    </MenuItem>\n                  ))}\n              </div>\n            </MenuItems>\n          </Transition>\n        </Menu>\n      )}\n    </div>\n  );\n}","import type {\n  FilterStatus,\n  SortByStatus,\n} from '@routes/_withNav+/_withSideBar+/tasks.$orgRoleId';\nimport { createContext, useContext, useEffect, useState } from 'react';\n\nexport { default as FilterSortMenus } from '@components/Tasks/FilterSortMenus';\n\nfunction sortItems(items: FilterSortContextValue['filteredItems'], sortState: SortByStatus) {\n  let sorted: typeof items = [];\n\n  if (items && items.length > 0) {\n    switch ( sortState ) {\n      case 'newOld':\n        sorted = [\n          ...items.sort(\n            ( a, b ) =>\n              new Date( b.createdAt ).getTime() - new Date( a.createdAt ).getTime()\n          ),\n        ];\n        break;\n      case 'oldNew':\n        sorted = [\n          ...items.sort(\n            ( a, b ) =>\n              new Date( a.createdAt ).getTime() - new Date( b.createdAt ).getTime()\n          ),\n        ];\n        break;\n      case 'AtoZ':\n        sorted = [\n          ...items.sort( ( a, b ) => a.user.name.localeCompare( b.user.name ) ),\n        ];\n        break;\n      case 'ZtoA':\n        sorted = [\n          ...items.sort( ( a, b ) => b.user.name.localeCompare( a.user.name ) ),\n        ];\n        break;\n      default:\n        sorted = [...items];\n        break;\n    }\n  }\n\n  return sorted;\n}\n\nexport function useFilterAndSort(\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>\n) {\n  const context = useContext(FilterSortContext);\n\n  const {\n    filterState,\n    sortState,\n    filterLabels,\n    sortLabels,\n    items,\n    filteredItems,\n    setFilteredItems,\n  } = context ?? {\n    items: [],\n    filterState: 'all',\n    sortState: 'default',\n    filterLabels: undefined,\n    sortLabels: undefined,\n    setFilterState: undefined,\n    setSortState: undefined,\n    filteredItems: [],\n    setFilteredItems: undefined,\n  };\n\n  useEffect(() => {\n    if (items && setFilteredItems) {\n      let filterItems: typeof filteredItems = [];\n\n      switch (filterState) {\n        case 'all':\n          filterItems = [...items];\n          break;\n        case 'notCompleted':\n          filterItems = items.filter((item) => !item.isComplete);\n          break;\n        case 'completed':\n          filterItems = items.filter((item) => item.isComplete);\n          break;\n        case 'overdue':\n          filterItems = items.filter((item) => item.isOverdue);\n          break;\n        default:\n          break;\n      }\n\n\n      setFilteredItems(sortItems(filterItems, sortState));\n\n      setLoading(false);\n    }\n  }, [items, filterState, sortState]);\n\n  return {\n    filterState: context?.filterState,\n    sortState: context?.sortState,\n    filteredItems: context?.filteredItems,\n    setFilteredItems: context?.setFilteredItems,\n    sortLabels,\n    filterLabels,\n  };\n}\n\nexport type FilterSortContextValue = {\n  filterState: FilterStatus;\n  sortState: SortByStatus;\n  filterLabels: Record<FilterStatus, { label: string; icon: string | JSX.Element }>;\n  sortLabels: Record<SortByStatus, { label: string; icon: string | JSX.Element }>;\n  filteredItems: {\n    isComplete: boolean;\n    isOverdue: boolean;\n    createdAt: string;\n    user: { name: string };\n  }[];\n  setFilterState: React.Dispatch<React.SetStateAction<FilterStatus>>;\n  setSortState: React.Dispatch<React.SetStateAction<SortByStatus>>;\n  items: FilterSortContextValue['filteredItems'];\n  setFilteredItems: React.Dispatch<React.SetStateAction<FilterSortContextValue['filteredItems']>>;\n};\n\nexport const FilterSortContext = createContext<FilterSortContextValue | null>(null);\n\nexport function FilterSortProvider({\n  items,\n  children,\n  labels,\n}: {\n  items: FilterSortContextValue['filteredItems'];\n  labels: {\n    sortByLabels: FilterSortContextValue['sortLabels'];\n    filterLabels: FilterSortContextValue['filterLabels'];\n  };\n} & React.PropsWithChildren) {\n  const { sortByLabels, filterLabels } = labels;\n  const [filterStatus, setFilterStatus] = useState<FilterStatus>('all');\n  const [sortStatus, setSortStatus] = useState<SortByStatus>('default');\n  const [filteredItems, setFilteredItems] = useState<typeof items>([]);\n\n  return (\n    <FilterSortContext.Provider\n      value={{\n        filterState: filterStatus,\n        sortState: sortStatus,\n        filterLabels,\n        sortLabels: sortByLabels,\n        items,\n        setSortState: setSortStatus,\n        setFilterState: setFilterStatus,\n        filteredItems,\n        setFilteredItems,\n      }}>\n      {children}\n    </FilterSortContext.Provider>\n  );\n}\n","import React from \"react\";\n\nexport const ChatIcon = ({unreadMessages, MessageComponent}) => {\n\n  return (\n    <div className='relative'>\n        <div className={`absolute text-white bg-red-500 rounded-xl ${unreadMessages < 10? 'px-[7px]': 'px-[4.5px]'} ${unreadMessages >= 10? unreadMessages >= 100? 'translate-x-[50%]': 'translate-x-[80%]':'translate-x-[100%]'} translate-y-[-20%]`}>{unreadMessages > 0 && unreadMessages}</div>\n        <MessageComponent className=\"size-10\"></MessageComponent>\n    </div>\n  );\n};\n\nexport default ChatIcon;\n","import { Badge, type BadgeProps } from '@components/ui/Badge';\nimport {\n  ChatBubbleOvalLeftEllipsisIcon,\n  CheckCircleIcon,\n  ArrowDownCircleIcon,\n  XCircleIcon,\n} from '@heroicons/react/20/solid';\nimport { UserRank } from '@lib/constants';\nimport type { TaskTabChecklistItem } from '@lib/types';\nimport { Link, useFetcher } from '@remix-run/react';\nimport ChatIcon from './ChatIcon';\nimport { RichTextView } from '@components/ui/RichText/Viewer';\nimport { CalendarDaysIcon, CalendarIcon, ArrowUturnLeftIcon } from '@heroicons/react/16/solid';\nimport { ClipboardDocumentCheckIcon } from '@heroicons/react/24/outline';\n\nexport const TaskItem = ({\n  item,\n  loggedInUserId,\n}: {\n  item: TaskTabChecklistItem;\n  loggedInUserId: string;\n}) => {\n  const fetcher = useFetcher();\n  const createdAt = new Date(item.createdAt);\n  const dueDate = new Date(createdAt);\n  dueDate.setDate(createdAt.getDate() + 30);\n\n  const today = new Date(Date());\n  const thirtyDays = new Date();\n  thirtyDays.setDate(today.getDate() + 30);\n  const twoWeeks = new Date();\n  twoWeeks.setDate(today.getDate() + 14);\n  const fiveDays = new Date();\n  fiveDays.setDate(today.getDate() + 5);\n\n  let dateBadgeVariant: BadgeProps['variant'] = 'none';\n\n  if (!item.isComplete) {\n    if (dueDate < thirtyDays) {\n      if (dueDate < twoWeeks) {\n        if (dueDate < fiveDays) {\n          if (dueDate < today) {\n            dateBadgeVariant = 'danger';\n          } else dateBadgeVariant = 'warning';\n        } else dateBadgeVariant = 'primary';\n      }\n    }\n  }\n\n  return (\n    <>\n      <tr className=\"table-row border-b even:bg-zinc-50\">\n        <td className=\"text-left pl-5 pr-3 py-2 min-w-[260px] max-w-[260px]\">\n          <div className=\"grid gap-y-2\">\n            <h4 className=\"font-bold text-lg line-clamp-1 break-all\">\n              {UserRank[item.user.rank].abb} {item.user.name}\n            </h4>\n            <div className=\"text-sm\">\n              <div className=\"flex justify-between items-center gap-x-2 px-2 border rounded-xl bg-gray-200\">\n                <p className=\"text-center flex-1\">\n                  {item.user.org.abbreviation}\n                </p>\n                <span className=\"text-gray-400\">/</span>\n                <p className=\"text-center flex-1\">{item.template.type}</p>\n              </div>\n            </div>\n          </div>\n        </td>\n        <td className=\"w-[1px] pr-3\">\n          <div className=\"border-gray-200 border-x h-[4rem]\"></div>\n        </td>\n\n        <td className=\"text-sm align-top py-3 pr-3 min-w-[500px]\">\n          <div className=\"flex justify-between\">\n            <h3 className=\"line-clamp-1 leading-6 font-bold\">\n              {item.templateItem.name}\n            </h3>\n            <div className=\"inline-flex justify-between items-center gap-x-2 text-sm\">\n              {!item.isComplete && <> <Badge variant={'none'} className=\"my-1\">\n                <CalendarIcon className=\"size-5 mr-1\" />\n                Started&nbsp;\n                {createdAt.toLocaleString('en-US', {\n                  month: 'numeric',\n                  day: 'numeric',\n                  year: 'numeric',\n                })}\n              </Badge>\n              <Badge variant={dateBadgeVariant} className=\"my-1\">\n                <CalendarDaysIcon className=\"size-5 mr-1\" />\n                Due&nbsp;\n                {dueDate.toLocaleString('en-US', {\n                  month: 'numeric',\n                  day: 'numeric',\n                  year: 'numeric',\n                })}\n              </Badge></>}\n              {item.isComplete && (<>\n                <Badge variant=\"green\" className=\"my-1\">\n                  <CalendarDaysIcon className=\"size-5 mr-1\" />\n                  Signed {new Date(item.dateCompleted).toLocaleString('en-US', {\n                    month: 'numeric',\n                    day: 'numeric',\n                    year: 'numeric',\n                  })}\n                </Badge></>\n              )}\n            </div>\n          </div>\n          <RichTextView className=\"line-clamp-2\">\n            {item.templateItem.description}\n          </RichTextView>\n        </td>\n        <td className=\"w-[1px] pr-3\">\n          <div className=\"border-gray-200 border-x h-[4rem]\"></div>\n        </td>\n        <td>\n          <div className=\"flex gap-x-5 justify-between items-center mr-5\">\n            <div className=\"text-nowrap flex-grow text-center\">\n              {item.isComplete && (\n                <Badge variant=\"green\">\n                  Complete\n                </Badge>\n              )}\n              {!item.isComplete && item.userComplete && (\n                <Badge>Ready to Approve</Badge>\n              )}\n              {!item.isComplete && !item.userComplete && (\n                <Badge variant=\"warning\">Awaiting Member</Badge>\n              )}\n            </div>\n            <fetcher.Form method=\"post\" className=\"\">\n              <input type=\"hidden\" name=\"itemId\" value={item.id} />\n              <input type=\"hidden\" name=\"userId\" value={loggedInUserId} />\n              <div className=\"flex shadow bg-white items-center justify-center justify-items-center rounded-xl divide-x border\">\n                {!item.isComplete && (\n                  <>\n                    <button\n                      type=\"submit\"\n                      name=\"_action\"\n                      value=\"update\"\n                      className=\"px-2 py-1 text-green-400 rounded-l-xl hover:text-green-600 hover:cursor-pointer hover:bg-zinc-200\"\n                      disabled={fetcher.state !== 'idle'}\n                    >\n                      <CheckCircleIcon className=\"size-10\"></CheckCircleIcon>\n                      <span className=\"sr-only\">Approve</span>\n                    </button>\n                    {item.userComplete && (\n                      <Link\n                        to={`${item.id}/deny`}\n                        className=\"px-2 py-1 text-red-400 hover:text-red-600 hover:cursor-pointer hover:bg-zinc-200\"\n                      >\n                        <XCircleIcon className=\"size-10\"></XCircleIcon>\n\n                        <span className=\"sr-only\">Deny</span>\n                      </Link>\n                    )}\n                  </>\n                )}\n                {item.isComplete && (\n                  <button\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"incomplete\"\n                    className=\"px-2 p-1 text-red-400 rounded-l-xl hover:text-red-600 hover:cursor-pointer h-12 hover:font-bolder hover:bg-zinc-200\"\n                    disabled={fetcher.state !== 'idle'}\n                  >\n                    <ArrowUturnLeftIcon className=\"size-8\"></ArrowUturnLeftIcon>\n                    <span className=\"sr-only\">Unsign</span>\n                  </button>\n                )}\n                <Link\n                  to={`${item.id}/comments`}\n                  className=\"px-2 py-1 hover:text-primary-700 hover:drop-shadow text-primary-500 rounded-r-xl hover:bg-zinc-200\"\n                >\n                  <ChatIcon\n                    unreadMessages={item.commentCount}\n                    MessageComponent={ChatBubbleOvalLeftEllipsisIcon}\n                  />\n                  <span className=\"sr-only\">Comments</span>\n                </Link>\n              </div>\n            </fetcher.Form>\n          </div>\n        </td>\n      </tr>\n    </>\n  );\n};\n\nexport default TaskItem;\n","import {\n  FilterSortMenus,\n  useFilterAndSort,\n} from '@lib/hooks/useFilterAndSort';\nimport { useEffect, useState } from 'react';\nimport TaskItem from './TaskItem';\nimport { Pagination, usePagination } from '@lib/hooks/usePagination';\n\nexport default function TaskList({\n  loggedInUserId,\n}: {\n  loggedInUserId: string;\n}) {\n  const [showProgressIndicator, setShowProgressIndicator] = useState(true);\n  const { filteredItems, filterState, sortState, filterLabels } =\n    useFilterAndSort(setShowProgressIndicator);\n  const {\n    currentItems,\n    currentPage,\n    totalPages,\n    setCurrentPage,\n    nextPage,\n    prevPage,\n    itemPos,\n    itemsPerPage,\n    setItemsPerPage,\n  } = usePagination(filteredItems ?? [], 10);\n\n  useEffect(() => {\n    if (currentItems && currentItems.length > 0)\n      setCurrentPage(1);\n  }, [sortState, filterState]);\n\n  if (showProgressIndicator) {\n    return <div className=\"flex text-lg items-center\">\n      <svg className=\"animate-spin -ml-1 mr-2 size-6 text-zinc-900\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n        <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n      </svg>\n      Loading...</div>;\n  }\n\n  return (\n    <>\n      <section className=\"mb-5\">\n        <FilterSortMenus />\n      </section>\n      {currentItems?.length > 0 ? (\n        <div>\n          <table className=\"table-auto w-full rounded-t-lg shadow-lg border-collapse\">\n            <thead>\n              <tr className=\"border-b border-zinc-600 text-zinc-800 uppercase bg-gray-100 dark:bg-gray-700 dark:text-gray-400\">\n                <th className=\"text-left px-6 py-3 rounded-tl-lg\">Items</th>\n                <th></th>\n                <th className=\"text-left px-2 py-3 rounded-tl-lg\"></th>\n                <th></th>\n                <th className=\"text-center w-72 rounded-tr-lg\"></th>\n              </tr>\n            </thead>\n            <tbody>\n              {currentItems.map((item) => (\n                <TaskItem\n                  key={item.id}\n                  item={item}\n                  loggedInUserId={loggedInUserId}/>\n              ))}\n            </tbody>\n          </table>\n          <Pagination\n            currentPage={currentPage}\n            totalPages={totalPages}\n            setCurrentPage={setCurrentPage}\n            nextPage={nextPage}\n            prevPage={prevPage}\n            itemsPerPage={itemsPerPage}\n            setItemsPerPage={setItemsPerPage}\n            itemPos={itemPos}/>\n        </div>\n      ) : (\n        <p className=\"text-2xl font-bold\">\n            No items to show.\n        </p>\n      )}\n    </>\n  );\n}\n","import { LinkButton } from '@components/ui/Buttons';\nimport ErrorReport from '@components/ui/ErrorReport';\nimport { useRootLayoutData } from '@lib/hooks/useMatchesData';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { Await, defer, Outlet, useLoaderData } from '@remix-run/react';\nimport { getOrgRoleByOrgAndRole } from './_manage+/.server/role.queries';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport {\n  completeItem,\n  getChecklistItemsByRole,\n  hasCSSRole,\n  uncompleteItem,\n  denyTask,\n} from './.server/tasks.queries';\nimport React, { Suspense, useState } from 'react';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, jsonWithSuccess } from 'remix-toast';\nimport { z } from 'zod';\nimport {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  Bars3BottomRightIcon,\n  CheckCircleIcon,\n  ClockIcon,\n  Cog8ToothIcon,\n  FunnelIcon,\n  XCircleIcon,\n} from '@heroicons/react/24/outline';\nimport TaskList from '@components/Tasks/TaskList';\nimport { FilterSortProvider } from '@lib/hooks/useFilterAndSort';\n\nexport async function loader({ request, params }: LoaderFunctionArgs) {\n  const { roles: userOrgRoles, id: userId } = await requireUserAsObject(\n    request,\n    { permissions: Attribute.TASKS_READWRITE }\n  );\n  const { orgRoleId: roleId } = params;\n  if (!roleId) throw new Error('roleId is required');\n\n  let orgRole;\n  let items;\n\n  if (hasCSSRole(userOrgRoles)) {\n    const cssOrgId = userOrgRoles.find(\n      (orgRole) => orgRole.abbreviation === 'CSS'\n    )?.owningOrgId;\n    if (!cssOrgId) throw new Error('CSS owning org id not found.');\n    items = getChecklistItemsByRole(roleId, cssOrgId, userId);\n    orgRole = await getOrgRoleByOrgAndRole(cssOrgId, roleId);\n  } else {\n    orgRole = userOrgRoles.find((orgRole) => orgRole.roleId === roleId);\n    if (!orgRole)\n      throw new Error(`could not find orgrole with role id: ${roleId}`);\n    items = getChecklistItemsByRole(roleId, orgRole?.owningOrgId, userId);\n  }\n\n  return defer({ items, orgRole, userId });\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const updateTaskSchema = z.object({\n    itemId: z.string(),\n    postedById: z.string().optional(),\n    userId: z.string(),\n    content: z.string().optional(),\n    _action: z.union([\n      z.literal('update'),\n      z.literal('incomplete'),\n      z.literal('send'),\n      z.literal('deny'),\n    ]), // with more actions this needs to be z.union([z.literal('update'), z.literal('otherAction')])\n  });\n\n  try {\n    const approvedUserId = await requireUser(request, {\n      options: { redirectOnFailure: false },\n      permissions: Attribute.TASKS_READWRITE,\n    });\n\n    const { itemId, userId, _action, content, postedById } =\n      updateTaskSchema.parse(\n        Object.fromEntries((await request.formData()).entries())\n      );\n\n    if (_action === 'update') {\n      await completeItem(itemId, userId, approvedUserId as string);\n      return jsonWithSuccess({ status: 'success' }, 'Task Signed!');\n    }\n    if (_action === 'incomplete') {\n      await uncompleteItem(itemId, userId, approvedUserId as string);\n      return jsonWithSuccess({ status: 'success' }, 'Task Unsigned!');\n    }\n    if (_action === 'deny') {\n      await denyTask(itemId, postedById as string, 'Task Denied!');\n      return jsonWithError({ status: 'success' }, 'Task Denied!');\n    }\n  } catch (error) {\n    console.error('Error during approval: ', error);\n    if (error instanceof Error) {\n      if (error instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', error: 'Failed to approve task' },\n        'There was an error.'\n      );\n    }\n  }\n}\n\nfunction EditOrgRoleButton(props: {\n  orgRole?: {\n    name: any;\n    description: any;\n    id: string;\n    abbreviation: any;\n    owningOrgId: string;\n    roleId: string;\n  };\n}) {\n  if (props.orgRole)\n    return (\n      <>\n        {props.orgRole?.abbreviation !== 'USER' && (\n          <LinkButton\n            to={{\n              pathname: `/tasks/${props.orgRole?.roleId}/edit`,\n              searchParams: { orgRole: props.orgRole?.roleId },\n            }}\n            className=\"flex items-center gap-1\">\n            <Cog8ToothIcon className=\"w-6 h-6\" />\n            {props.orgRole?.abbreviation === 'CSS'\n              ? props.orgRole.abbreviation\n              : props.orgRole?.name}{' '}\n            Info\n          </LinkButton>\n        )}\n      </>\n    );\n\n  return null;\n}\n\nconst filterLabels = {\n  all: { label: 'All', icon: <FunnelIcon className=\"ml-4 w-5 h-5 mr-2\" /> },\n  notCompleted: {\n    label: 'Not Completed',\n    icon: <XCircleIcon className=\"ml-4 w-5 h-5 mr-2\" />,\n  },\n  completed: {\n    label: 'Completed',\n    icon: <CheckCircleIcon className=\"ml-4 w-5 h-5 mr-2\" />,\n  },\n  overdue: {\n    label: 'Overdue',\n    icon: <ClockIcon className=\"ml-4 w-5 h-5 mr-2\" />,\n  },\n};\n\nconst sortByLabels = {\n  default: { label: '', icon: '' },\n  newOld: {\n    label: 'Newest to Oldest',\n    icon: <Bars3BottomRightIcon className=\"ml-4 w-5 h-5 mr-2\" />,\n  },\n  oldNew: {\n    label: 'Oldest to Newest',\n    icon: (\n      <Bars3BottomRightIcon className=\"ml-4 w-5 h-5 mr-2 transform scale-y-[-1]\" />\n    ),\n  },\n  AtoZ: {\n    label: 'A to Z',\n    icon: <ArrowDownIcon className=\"ml-4 w-5 h-5 mr-2\" />,\n  },\n  ZtoA: {\n    label: 'Z to A',\n    icon: <ArrowUpIcon className=\"ml-4 w-5 h-5 mr-2\" />,\n  },\n};\n\nexport type FilterStatus = keyof typeof filterLabels;\nexport type SortByStatus = keyof typeof sortByLabels;\n\nconst RoleTasks = () => {\n  const { items, orgRole: roleInfo } = useLoaderData<typeof loader>();\n  const { id: loggedInUserId } = useRootLayoutData('user');\n\n  return (\n    <>\n      <div className=\"flex justify-between mb-5\">\n        <div>\n          {roleInfo && <h1 className=\"text-2xl mb-3\">{roleInfo.name}</h1>}\n        </div>\n        <div>\n          <EditOrgRoleButton orgRole={roleInfo} />\n        </div>\n      </div>\n\n      <Suspense fallback={<p>Loading...</p>} key={roleInfo?.uuid}>\n        <Await resolve={items}>\n          {(itemsJsonResult) => {\n            return (\n              <FilterSortProvider\n                items={itemsJsonResult}\n                labels={{ sortByLabels, filterLabels }}>\n                <TaskList loggedInUserId={loggedInUserId} />\n              </FilterSortProvider>\n            );\n          }}\n        </Await>\n      </Suspense>\n      <Outlet />\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default RoleTasks;\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { Modal } from '@components/ui/modals';\nimport { useRootLayoutData } from '@lib/hooks/useMatchesData';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Form, useFetcher, useLoaderData, useSearchParams } from '@remix-run/react';\nimport { UserIcon, UserCircleIcon } from '@heroicons/react/24/solid';\nimport { useEffect, useRef, useState } from 'react';\nimport { getChecklistItem } from './.server/tasks.queries';\nimport { Attribute } from '@lib/utils';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithSuccess, jsonWithError } from 'remix-toast';\nimport { z } from 'zod';\nimport { markRead, sendMessage } from '../_noSideBar+/.server/checklist.queries';\nimport { MessageContainer } from '@components/ui/Message';\nimport { ChevronDoubleLeftIcon } from '@heroicons/react/24/outline';\nimport { comment } from 'postcss';\n\nexport const loader = async ({ params, request }: LoaderFunctionArgs) => {\n  const { taskId, orgRoleId } = params;\n  if (!taskId) {\n    throw json({ status: 'error', error: 'roleId is required.' });\n  }\n  const userId = await requireUser(request);\n\n  const searchQuery = (new URL(request.url)).searchParams;\n\n  const internalOnly = searchQuery.get('internal');\n\n  const [item, comments] = await getChecklistItem(taskId, {internalOnly: internalOnly === 'true'});\n\n\n  return json({ item, comments, orgRoleId, userId });\n};\n\nexport async function action ({ request }: ActionFunctionArgs) {\n  const cookieUserId = await requireUser(request);\n  const updateTaskSchema = z.object({\n    itemId: z.string().optional(),\n    postedById: z.string().optional(),\n    userId: z.literal(cookieUserId).optional(),\n    internal: z.enum(['true', 'false']).transform((value) => value === 'true').optional(),\n    content: z.string().optional(),\n    commentId: z.string().optional(),\n    _action: z.union([\n      z.literal('send'),\n      z.literal('markRead')]),\n  });\n\n  try {\n    \n    await requireUser(request, {\n      options: { redirectOnFailure: false },\n      permissions: Attribute.TASKS_READWRITE,\n    });\n     \n    const { itemId, userId, _action, content, postedById, internal, commentId} =\n        updateTaskSchema.parse(\n          Object.fromEntries((await request.formData()).entries())\n        );\n    \n    if (_action === 'send') {\n      \n      await sendMessage(itemId, postedById ?? '', content ?? '', internal);\n      return json({ status: 'success' });\n    }\n    \n    if (_action === 'markRead') {\n      const items: number[] = Array.from(JSON.parse(decodeURIComponent(commentId)))\n      await markRead(items, userId as string);\n      return json({ status: 'success' });\n    }\n    \n  } catch (error) {\n    console.error('Error during approval: ', error);\n    if (error instanceof Error) {\n      if (error instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', error: 'Failed to approve task' },\n        'There was an error.'\n      );\n    }\n  }\n}\n\n\nconst EditOrgDefaultPage = () => {\n\n  const { item, comments } = useLoaderData<typeof loader>();\n  const user = useRootLayoutData('user');\n  const sendMessageFetcher = useFetcher();\n  const markReadFetcher = useFetcher();\n  const [searchParams] = useSearchParams();\n\n  const [messageContent, setMessageContent] = useState('');\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setMessageContent(event.target.value);\n  };\n\n  const handleFormSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    sendMessageFetcher.submit(event.target as HTMLFormElement);\n    setMessageContent('');\n  };\n\n  // function handleMarkRead() {\n  //   let messageId: Array<number> = []\n    \n  //   console.log(user, comments)\n\n  //   comments.forEach(comment => {\n  //     if(!comment.readBy.includes(user.id)){\n  //       console.log('mark as read', comment.id)\n  //       messageId.push(comment.id)\n  //     }\n  //   })\n\n  //   console.log(messageId)\n  //   for(const item of messageId){\n  //   }\n  //     const formData = new FormData();\n  //     formData.append('commentId',  encodeURIComponent(JSON.stringify(messageId)));\n  //     formData.append('userId', user.id);\n  //     formData.append('_action', 'markRead');\n  //     markReadFetcher.submit(formData, {method: 'POST'});\n  // }\n\n  // useEffect(() => {\n  //   handleMarkRead()\n  // },[])\n\n  // useEffect(() => {\n  //   console.log(markReadFetcher.state)\n  //   console.log(markReadFetcher)\n  // }, [markReadFetcher.state])\n\n  const containerRef = useRef();\n\n  return (\n    <Modal>\n      <h3 className=\"text-base font-semibold leading-6 text-gray-900 p-3\">{item?.templateItem.name}</h3>\n      <div className=\"shadow-lg w-full flex flex-col\" ref={containerRef}>\n        <MessageContainer loggedInUser={user.id} comments={comments} isModal={true}  />\n        <div className=\"p-4 border-t bg-gray-200 rounded-b-lg\">\n          <sendMessageFetcher.Form onSubmit={handleFormSubmit} method=\"POST\">\n            <input type=\"hidden\" value={item?.id} name=\"itemId\" />\n            <input type=\"hidden\" value={searchParams.get('internal') ?? 'false'} name=\"internal\" />\n            <input type=\"hidden\" value={user.id} name=\"userId\" />\n            <input\n              type=\"hidden\"\n              value={user.id}\n              name=\"postedById\"/>\n            <input type=\"hidden\" name=\"_action\" value=\"send\" />\n            <div className=\"flex gap-2\">\n              <input\n                type=\"text\"\n                name=\"content\"\n                className=\"block w-full rounded p-2 text-sm border\"\n                placeholder=\"Type a message\"\n                value={messageContent}\n                onChange={handleInputChange}\n                required/>\n              <button\n                type=\"submit\"\n                className=\"bg-blue-500 text-white py-2 px-4 rounded w-40\">\n                  Send\n              </button>\n            </div>\n          </sendMessageFetcher.Form>\n        </div>\n      </div>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default EditOrgDefaultPage;\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { Form, Input, Label } from '@components/ui';\nimport { Modal } from '@components/ui/modals';\nimport { Attribute } from '@lib/utils';\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { requireUser, requireUserAsObject } from '@services/user.server';\nimport React, { useState } from 'react';\nimport { AuthorizationError } from 'remix-auth';\nimport { jsonWithError, redirectWithSuccess } from 'remix-toast';\nimport z, { ZodError } from 'zod';\nimport { denyTask, getTask } from './.server/tasks.queries';\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  await requireUser(request, { permissions: Attribute.ORGS_READWRITE });\n  const { taskId } = params;\n  if (!taskId) throw json({ status: 'error', error: 'Task Id is required.' });\n  const task = await getTask(taskId);\n  return json({ taskId: taskId, task });\n};\n\nenum DenialReason {\n  inPerson,\n  docsNeeded,\n  incompleteDocs,\n  pastDue,\n  missingInfo,\n  other,\n}\n\n// TODO: Add try catch\nexport async function action({ request, params }: ActionFunctionArgs) {\n  const schema = z.object({\n    message: z.string().optional(),\n    reason: z.nativeEnum(DenialReason),\n  });\n\n  try {\n    const ReasonMessages = new Map();\n    ReasonMessages.set(DenialReason.inPerson, 'In-person visit required!');\n    ReasonMessages.set(DenialReason.docsNeeded, 'Documents needed to complete task!');\n    ReasonMessages.set(DenialReason.incompleteDocs, 'Documents are incomplete!');\n    ReasonMessages.set(DenialReason.pastDue, 'Task is past required completion date!');\n    ReasonMessages.set(DenialReason.missingInfo, 'Missing information!');\n    ReasonMessages.set(DenialReason.other, '');\n\n    if (!params.taskId) throw new Error('missing task id');\n    const { id: userId } = await requireUserAsObject(request, {\n      permissions: Attribute.ORGS_READWRITE,\n    });\n\n    const { reason: reasonString, ...formData } = Object.fromEntries(\n      (await request.formData()).entries()\n    );\n\n    let { message, reason } = schema.parse({\n      reason: +reasonString,\n      ...formData,\n    });\n\n    if(message){\n      message = ReasonMessages.get(reason) + ' ' + message;\n    }\n\n    if (!message) {\n      message = ReasonMessages.get(reason);\n      if (!message)\n        message = 'Item Denied.';\n    }\n\n    denyTask(params.taskId, userId, message);\n\n    // await updateOrg(orgId, {\n    //   userId,\n    //   orgName,\n    //   abbreviation,\n    // });\n\n    return redirectWithSuccess('..', 'Task successfully denied.');\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof Error) {\n      if (e instanceof AuthorizationError) {\n        return jsonWithError(\n          { status: 'error', error: 'Authorization Error.' },\n          'User is not authorized.'\n        );\n      }\n      if (e instanceof ZodError) {\n        return jsonWithError(\n          { status: 'error', message: 'validation error', errors: e.errors },\n          'There was an error denying the task.'\n        );\n      }\n      return jsonWithError(\n        { status: 'error', message: e.message },\n        'There was an error adding the base.'\n      );\n    }\n  }\n}\nconst EditOrgDefaultPage = () => {\n  const { taskId, task } = useLoaderData<typeof loader>();\n\n  const [optionSelect, setOptionSelect] = useState<undefined | DenialReason | string>();\n\n  const [addMessageCheck, setAddMessageCheck] = useState(false);\n\n  const handleOptionSelect = (event: React.FormEvent) => {\n    setOptionSelect((event.target as HTMLSelectElement).value);\n    if(+(event.target as HTMLSelectElement).value === DenialReason.other){\n      setAddMessageCheck(true);\n\n    }\n    else{\n      setAddMessageCheck(false);\n    }\n  };\n\n  const handleMessageCheck = () => {\n    setAddMessageCheck(!addMessageCheck);\n  };\n\n  return (\n    <Modal>\n      <Form method=\"POST\">\n        <Modal.Body>\n          <Modal.Title>Deny Task: {task?.templateItem.name}</Modal.Title>\n          <Form.Row>\n            <Label htmlFor=\"reason\">Reason for denial:</Label>\n            <Input.ValidationGroup\n              message=\"Please select a reason for denial.\"\n              isValid={optionSelect !== 'default'}>\n              <Input.Select\n                name=\"reason\"\n                onChange={handleOptionSelect}\n                options={[\n                  { id: DenialReason.inPerson, name: 'In-Person Visit' },\n                  { id: DenialReason.docsNeeded, name: 'Missing Documents' },\n                  { id: DenialReason.incompleteDocs, name: 'Incomplete Documents'},\n                  { id: DenialReason.missingInfo, name: 'Missing Information'},\n                  { id: DenialReason.pastDue, name: 'Past Due Date'},\n                  { id: DenialReason.other, name: 'Other' },\n                ]}></Input.Select>\n            </Input.ValidationGroup>\n          </Form.Row>\n          <Form.Row>\n            <Input.Checkbox\n              label=\"Add Message\"\n              id=\"MessageCheckbox\"\n              checked={addMessageCheck}\n              onChange={handleMessageCheck}\n              disabled={+optionSelect === DenialReason.other}></Input.Checkbox>\n            {addMessageCheck && <Input.Textarea name=\"message\" required></Input.Textarea>}\n          </Form.Row>\n        </Modal.Body>\n        <Modal.Buttons link=\"/\" value=\"edit\" onClick={(e) => {if (optionSelect === 'default') e.preventDefault();}}\n          disabled={optionSelect === 'default' || optionSelect === undefined}>\n          Send\n        </Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default EditOrgDefaultPage;\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { Form, Input, Label } from '@components/ui';\nimport { Modal } from '@components/ui/modals';\nimport type { LoaderFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { getOrgRole } from './_manage+/.server/role.queries';\n\nexport { roleEditActionFunction as action } from './_manage+/.server/role.queries';\n\nexport const loader = async ({ params, request }: LoaderFunctionArgs) => {\n  const { orgRoleId: roleId } = params;\n\n  const orgRoleId = (new URL(request.url)).searchParams.get('orgrole');\n\n  if (!orgRoleId) {\n    throw json({ status: 'error', error: 'roleId is required.' });\n  }\n\n  const orgRole = await getOrgRole(orgRoleId);\n  return json({ orgRole });\n};\n\nconst EditOrgDefaultPage = () => {\n  const { orgRole } = useLoaderData<typeof loader>();\n\n  return (\n    <Modal>\n      <Form method=\"POST\">\n        <Modal.Body>\n          <Modal.Title>Edit Contact Info:</Modal.Title>\n          <Input.Hidden name=\"orgRoleId\" value={orgRole.uuid} />\n          <Form.Row>\n            <Label htmlFor=\"contactPhone\">Phone:</Label>\n            <Input.Text name=\"contactPhone\" defaultValue={orgRole.contactPhone} />\n          </Form.Row>\n          <Form.Row>\n            <Label htmlFor=\"contactEmail\">Email:</Label>\n            <Input.Text name=\"contactEmail\" defaultValue={orgRole.contactEmail} />\n          </Form.Row>\n        </Modal.Body>\n        <Modal.Buttons link=\"/tasks\" value=\"edit\">\n          Save\n        </Modal.Buttons>\n      </Form>\n    </Modal>\n  );\n};\nexport const ErrorBoundary = ErrorReport;\nexport default EditOrgDefaultPage;\n\n\n","import ErrorReport from '@components/ui/ErrorReport';\nimport { useRouteLoaderData } from '@remix-run/react';\nimport type { loader as ParentLoader } from './tasks';\n\nconst TasksTabIndex = () => {\n  // const parentLoaderData = useRouteLoaderData<typeof ParentLoader>(\n  //   'routes/_withNav+/_withSideBar+/tasks'\n  // );\n\n  return (\n    <>\n      {/* <h1 className=\"justify-start text-4xl font-bold text-gray-900 mb-5\">\n        Your Roles Dashboard\n      </h1>\n      <section>\n        { parentLoaderData?.roles.map(\n          ( [ _, { roleInfo, overdueCount, notCompleteItems } ] ) => {\n            let overdueText = '';\n            if ( overdueCount === 0 ) {\n              overdueText = 'No items overdue';\n            }\n            else if ( overdueCount === 1 ) {\n              overdueText = '1 item is overdue';\n            }\n            else {\n              overdueText = `${ overdueCount } items overdue.`;\n            }\n\n            return (\n              <div key={ roleInfo.id }>\n                <h3 className=\"text-lg font-bold\">\n                  <a className=\"hover:underline\" href={ `/tasks/${ roleInfo.id }` }>\n                    { roleInfo.name }\n                  </a>\n                </h3>\n                <p>{ notCompleteItems.length } items waiting for approval.</p>\n                <p>{ overdueText }</p>\n              </div>\n            );\n          }\n        ) }\n      </section> */}\n    </>\n  );\n};\n\nexport const ErrorBoundary = ErrorReport;\nexport default TasksTabIndex;\n"],"names":["deleteChecklist","getAllRoles","self","deleteOrg","root","org","templateId","ChecklistType","assignChecklist","dbServer","loader","meta","ErrorBoundary","action","Form","handleChange","query","Label","selected","entry","Link","editor","TextInput","TextArea","TextLabel","Select","isNameValid","ChevronRightIcon","AttributeCategory","Operation","RolePermissions","PasswordError","headers","userId","updateProfile","redirect","AccountRegister","usePermissions","pathname","link","isActive","links","completeItem","toast","page","ChevronLeftIcon","item","match","getUserChecklists","z","comments","container","markRead","UserCircleIcon","children","Heading1","PageHeader","styles","airman","sub","PasswordPolicy","zodRadioButton","RemixForm","EditBase","XCircleIcon","isSuperAdmin","isAdmin","EditOrgDefaultPage","convertToCSV","downloadCSV","currentOrgId","type","CloudArrowDownIcon","CheckIcon","Fragment","sponsor","XMarkIcon","EditRoleDefaultPage","open","ChevronUpIcon","ChevronDownIcon","TrashIcon","orgRole","EditTemplate","DeleteAccountPage","ArrowUpOnSquareIcon","filterLabels","sortByLabels","CalendarDaysIcon","CheckCircleIcon","defer","ClockIcon","DenialReason"],"mappings":"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_google_ignoreList":[19]}